{"version":3,"file":"b2de8ed4-73cf63fdc4d40efe3710.js","mappings":";yIAEA,IAAIA,EAAO,EAAQ,MACfC,EAAM,EAAQ,MACdC,EAAS,EAAQ,MACjBC,EAAQ,EAAQ,MAChBC,EAAY,EAAQ,MAoRxB,SAASC,IAIL,MAAO,CACH,wCAA8F,0LAItG,CAQA,MAAMC,EAhLN,WACI,MAAO,CACH,6BAAyE,uDACzE,iBAAuD,GACvD,qBAA+D,6LAG/D,oBAA6D,qJAG7D,uBAAmE,kKAGnE,eAAmD,+EAEnD,oBAA6D,kCAC7D,mBAA2D,iCAC3D,4BAA6E,uEAC7E,wBAAmE,wDACnE,wBAA8E,6GAE9E,wCAA8F,0LAG9F,6BAA+E,+FAE/E,kCAAyF,wDACzF,uBAA2D,0DAC3D,yBAAuE,gKAGvE,sBAA8D,+BAC9D,0BAAuE,mFACvE,iBAAuD,sCACvD,yBAAuE,sIAEvE,iBAAuD,qEACvD,qBAAyD,sLAGzD,qBAA+D,sCAC/D,4BAAgE,wLAGhE,uBAAmE,uDACnE,gCAAqF,gOAIrF,uBAAmE,wEACnE,8BAAiF,4FACjF,gBAAqD,wCACrD,0BAAyE,qEACzE,kBAAyD,sEACzD,oBAA6D,kDAC7D,qBAA+D,uEAC/D,0BAAyE,+KAEzE,+BAA0E,iFAC1E,yBAAuE,uGAEvE,0BAAyE,0FAEzE,sBAA4D,+IAE5D,sBAA8D,2GAE9D,iBAAyD,gEACzD,2BAAsE,oFACtE,uBAAmE,gPAInE,sBAAiE,wCACjE,0BAAyE,4GAEzE,iBAAuD,6KAEvD,0BAAsE,2EACtE,oBAA6D,4CAC7D,gBAAqD,4DACrD,2BAA+E,2FAC/E,8BAAyE,8HAEzE,yBAAuE,gIAEvE,4BAAgE,6EAChE,uBAAmE,kDACnE,uBAAmE,sCACnE,wBAAqE,oEACrE,2BAA2E,oKAG3E,mBAA2D,wCAC3D,4BAAoE,2CACpE,+BAA0E,mEAC1E,uBAAmE,wEACnE,0BAAsE,uEACtE,cAAsD,iDACtD,8BAAwE,2EACxE,6BAAiE,yEACjE,2CAAoF,wJAGpF,yBAAuE,kGACvE,gBAAqD,sCACrD,mBAA2D,6DAC3D,YAA6C,0GAE7C,wBAAqE,yJAGrE,8CAA6F,kLAG7F,gBAAqD,4FACrD,uBAAmE,yEACnE,0BAAyE,kEACzE,iBAAuD,4DACvD,6BAA+E,2EAC/E,6BAA+E,mDAC/E,sBAAiE,6DACjE,+BAAqF,yDACrF,uCAA2F,4EAC3F,qBAA+D,sEAC/D,QAAyC,+BACzC,qBAA0D,yEAC1D,oBAAuE,0FAEvE,4BAAuE,2GAEvE,2BAA2E,sHAC3E,+BAA8E,2EAC9E,+BAAmF,6DACnF,mBAA2D,2CAC3D,iBAAuD,wEACvD,iBAAqD,4FAErD,gBAAqD,0DACrD,gBAAqD,+EACrD,kBAAyD,GACzD,gBAAqD,kDACrD,0BAAyE,+EACzE,sBAAiE,oOAIjE,0BAAyE,sEACzE,0BAAyE,sEACzE,2BAA2E,uEAC3E,wBAAqE,oEACrE,sBAAiE,4EACjE,4BAA6E,wEAC7E,mBAA2D,8BAC3D,4BAA6E,wEAC7E,6CAA+G,iIAC/G,sCAAiG,+CAEzG,EA0BMC,EAAeF,EACfG,EAA8B,IAAIR,EAAKS,aAAa,OAAQ,WAtBvD,CACH,wCAA8F,4LA4JhGC,EAAY,IAAIR,EAAOS,OAAO,kBAMpC,SAASC,EAAUC,KAAQC,GACnBJ,EAAUK,UAAYb,EAAOc,SAASC,OACtCP,EAAUQ,MAAM,SAASjB,EAAIkB,iBAAiBN,OAAUC,EAEhE,CAkBA,SAASM,EAAMC,KAAeC,GAC1B,MAAMC,EAAoBF,KAAeC,EAC7C,CACA,SAASE,EAAaH,KAAeC,GACjC,OAAOC,EAAoBF,KAAeC,EAC9C,CACA,SAASG,EAAwBC,EAAMC,EAAMC,GACzC,MAAMC,EAAWC,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAGxB,KAAiB,CAAE,CAACoB,GAAOC,IAE5E,OADgB,IAAI5B,EAAKS,aAAa,OAAQ,WAAYoB,GAC3CG,OAAOL,EAAM,CACxBM,QAASP,EAAKQ,MAEtB,CACA,SAASC,EAAkBT,EAAMU,EAAQC,GAErC,KAAMD,aADsBC,GAKxB,MALwBA,EAEAH,OAASE,EAAOE,YAAYJ,MAChDd,EAAMM,EAAM,kBAEVD,EAAwBC,EAAM,iBAAqD,WAAWU,EAAOE,YAAYJ,4FAG/H,CACA,SAASX,EAAoBF,KAAeC,GACxC,GAA0B,iBAAfD,EAAyB,CAChC,MAAMM,EAAOL,EAAK,GACZiB,EAAa,IAAIjB,EAAKkB,MAAM,IAIlC,OAHID,EAAW,KACXA,EAAW,GAAGN,QAAUZ,EAAWa,MAEhCb,EAAWoB,cAAcT,OAAOL,KAASY,EACpD,CACA,OAAO/B,EAA4BwB,OAAOX,KAAeC,EAC7D,CACA,SAASoB,EAAQC,EAAWtB,KAAeC,GACvC,IAAKqB,EACD,MAAMpB,EAAoBF,KAAeC,EAEjD,CAOA,SAASsB,EAAUC,GAGf,MAAMjB,EAAU,8BAAgCiB,EAKhD,MAJAjC,EAAUgB,GAIJ,IAAIkB,MAAMlB,EACpB,CAQA,SAASmB,EAAYJ,EAAWf,GACvBe,GACDC,EAAUhB,EAElB,CAkBA,SAASoB,IACL,IAAIC,EACJ,MAAwB,oBAATC,OAAkD,QAAxBD,EAAKC,KAAKC,gBAA6B,IAAPF,OAAgB,EAASA,EAAGG,OAAU,EACnH,CACA,SAASC,IACL,MAA+B,UAAxBC,KAA2D,WAAxBA,GAC9C,CACA,SAASA,IACL,IAAIL,EACJ,MAAwB,oBAATC,OAAkD,QAAxBD,EAAKC,KAAKC,gBAA6B,IAAPF,OAAgB,EAASA,EAAGM,WAAc,IACvH,CAyEA,MAAMC,EACF,WAAAlB,CAAYmB,EAAYC,GACpBC,KAAKF,WAAaA,EAClBE,KAAKD,UAAYA,EAEjBX,EAAYW,EAAYD,EAAY,+CACpCE,KAAKC,SAAW5D,EAAK6D,mBAAqB7D,EAAK8D,eACnD,CACA,GAAAC,GACI,MA5DqB,oBAAdC,WACPA,WACA,WAAYA,WACgB,kBAArBA,UAAUC,SAMhBZ,KAAoBrD,EAAKkE,sBAAwB,eAAgBF,aAC3DA,UAAUC,OAoDNE,KAAKC,IAAI,IAA6BT,KAAKF,YAM/CE,KAAKC,SAAWD,KAAKD,UAAYC,KAAKF,UACjD,EAmBJ,SAASY,EAAaC,EAAQC,GAC1BxB,EAAYuB,EAAOE,SAAU,sCAC7B,MAAM,IAAEC,GAAQH,EAAOE,SACvB,OAAKD,EAGE,GAAGE,IAAMF,EAAKG,WAAW,KAAOH,EAAK/B,MAAM,GAAK+B,IAF5CE,CAGf,CAkBA,MAAME,EACF,iBAAOC,CAAWC,EAAWC,EAAaC,GACtCpB,KAAKkB,UAAYA,EACbC,IACAnB,KAAKmB,YAAcA,GAEnBC,IACApB,KAAKoB,aAAeA,EAE5B,CACA,YAAOC,GACH,OAAIrB,KAAKkB,UACElB,KAAKkB,UAEI,oBAAT3B,MAAwB,UAAWA,KACnCA,KAAK8B,MAEU,oBAAfC,YAA8BA,WAAWD,MACzCC,WAAWD,MAED,oBAAVA,MACAA,WAEXpC,EAAU,kHACd,CACA,cAAOsC,GACH,OAAIvB,KAAKmB,YACEnB,KAAKmB,YAEI,oBAAT5B,MAAwB,YAAaA,KACrCA,KAAKiC,QAEU,oBAAfF,YAA8BA,WAAWE,QACzCF,WAAWE,QAEC,oBAAZA,QACAA,aAEXvC,EAAU,oHACd,CACA,eAAOwC,GACH,OAAIzB,KAAKoB,aACEpB,KAAKoB,aAEI,oBAAT7B,MAAwB,aAAcA,KACtCA,KAAKmC,SAEU,oBAAfJ,YAA8BA,WAAWI,SACzCJ,WAAWI,SAEE,oBAAbA,SACAA,cAEXzC,EAAU,qHACd,EAsBJ,MAAM0C,EAAmB,CAErB,oBAA+D,wBAE/D,qBAAiE,iBAEjE,mBAA6D,gBAE7D,qBAAiE,iBAEjE,iBAAyD,iBAEzD,iBAAyD,mBAGzD,0BAA2E,qBAE3E,aAAiD,uBACjD,wBAAuE,wBAEvE,qBAAiE,qBACjE,sBAAmE,qBACnE,iCAAyF,4BAEzF,iBAAyD,iBAEzD,gBAAuD,iBACvD,4BAA+E,oBAC/E,iBAAyD,sBACzD,iBAAyD,sBAEzD,iBAAyD,iBAEzD,+BAAqF,wBACrF,iBAAyD,qBACzD,cAAmD,qBACnD,eAAqD,qBAErD,4BAA+E,oBAC/E,oCAA+F,sCAE/F,aAAiD,4BACjD,qBAAiE,0BACjE,wBAAuE,qBACvE,qBAAiE,0BACjE,gBAAuD,eAIvD,6BAAiF,2BACjF,oBAA+D,4BAE/D,wBAAuE,0BAEvE,qBAAiE,6BAEjE,+BAAqF,+BACrF,yBAAyE,8BACzE,0BAA2E,4BAC3E,+BAAqF,+BACrF,qBAAiE,+BACjE,6BAAiF,uCAEjF,iCAAyF,iBAEzF,sBAAmE,wBACnE,wBAAuE,0BACvE,wBAAuE,0BACvE,yBAAyE,2BACzE,oBAA+D,sBAC/D,0BAA2E,4BAC3E,0BAA2E,4BAC3E,iBAAyD,oBAmBvDC,EAAyB,IAAI/B,EAAM,IAAO,KAChD,SAASgC,EAAmB9D,EAAM+D,GAC9B,OAAI/D,EAAKgE,WAAaD,EAAQC,SACnB5D,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAG0D,GAAU,CAAEC,SAAUhE,EAAKgE,WAE/DD,CACX,CACAE,eAAeC,EAAmBlE,EAAMmE,EAAQtB,EAAMkB,EAASK,EAAiB,CAAC,GAC7E,OAAOC,EAA+BrE,EAAMoE,GAAgBH,UACxD,IAAIK,EAAO,CAAC,EACRC,EAAS,CAAC,EACVR,IACe,QAAXI,EACAI,EAASR,EAGTO,EAAO,CACHA,KAAME,KAAKC,UAAUV,KAIjC,MAAMW,EAAQpG,EAAKqG,YAAYvE,OAAOC,OAAO,CAAEuE,IAAK5E,EAAK4C,OAAOiC,QAAUN,IAASzD,MAAM,GACnF0C,QAAgBxD,EAAK8E,wBAK3B,OAJAtB,EAAQ,gBAAgD,mBACpDxD,EAAK+E,eACLvB,EAAQ,qBAA0DxD,EAAK+E,cAEpE9B,EAAcK,OAAdL,CAAsB+B,EAAgBhF,EAAMA,EAAK4C,OAAOqC,QAASpC,EAAM6B,GAAQtE,OAAOC,OAAO,CAAE8D,SAClGX,UAAS0B,eAAgB,eAAiBZ,GAAM,GAE5D,CACAL,eAAeI,EAA+BrE,EAAMoE,EAAgBe,GAChEnF,EAAKoF,kBAAmB,EACxB,MAAMjF,EAAWC,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAGuD,GAAmBQ,GACpE,IACI,MAAMiB,EAAiB,IAAIC,EAAetF,GACpC0D,QAAiB6B,QAAQC,KAAK,CAChCL,IACAE,EAAeI,UAInBJ,EAAeK,sBACf,MAAMC,QAAajC,EAASiC,OAC5B,GAAI,qBAAsBA,EACtB,MAAMC,EAAiB5F,EAAM,2CAAkF2F,GAEnH,GAAIjC,EAASmC,MAAQ,iBAAkBF,GACnC,OAAOA,EAEN,CACD,MAAMG,EAAepC,EAASmC,GAAKF,EAAKG,aAAeH,EAAKnG,MAAMU,SAC3D6F,EAAiBC,GAAsBF,EAAaG,MAAM,OACjE,GAAwB,qCAApBF,EACA,MAAMH,EAAiB5F,EAAM,4BAA2E2F,GAEvG,GAAwB,iBAApBI,EACL,MAAMH,EAAiB5F,EAAM,uBAAyD2F,GAErF,GAAwB,kBAApBI,EACL,MAAMH,EAAiB5F,EAAM,gBAAmD2F,GAEpF,MAAMO,EAAY/F,EAAS4F,IACvBA,EACKI,cACAC,QAAQ,UAAW,KAC5B,GAAIJ,EACA,MAAMjG,EAAwBC,EAAMkG,EAAWF,GAG/CtG,EAAMM,EAAMkG,EAEpB,CACJ,CACA,MAAOG,GACH,GAAIA,aAAa/H,EAAKgI,cAClB,MAAMD,EAKV3G,EAAMM,EAAM,yBAAqE,CAAE,QAAWuG,OAAOF,IACzG,CACJ,CACApC,eAAeuC,EAAsBxG,EAAMmE,EAAQtB,EAAMkB,EAASK,EAAiB,CAAC,GAChF,MAAMqC,QAAwBvC,EAAmBlE,EAAMmE,EAAQtB,EAAMkB,EAASK,GAM9E,MALI,yBAA0BqC,GAC1B/G,EAAMM,EAAM,6BAA+D,CACvE0G,gBAAiBD,IAGlBA,CACX,CACA,SAASzB,EAAgBhF,EAAM2G,EAAM9D,EAAM6B,GACvC,MAAMkC,EAAO,GAAGD,IAAO9D,KAAQ6B,IAC/B,OAAK1E,EAAK4C,OAAOE,SAGVH,EAAa3C,EAAK4C,OAAQgE,GAFtB,GAAG5G,EAAK4C,OAAOiE,eAAeD,GAG7C,CACA,SAASE,EAAuBC,GAC5B,OAAQA,GACJ,IAAK,UACD,MAAO,UACX,IAAK,QACD,MAAO,QACX,IAAK,MACD,MAAO,MACX,QACI,MAAO,gCAEnB,CACA,MAAMzB,EACF,WAAA1E,CAAYZ,GACRiC,KAAKjC,KAAOA,EAIZiC,KAAK+E,MAAQ,KACb/E,KAAKwD,QAAU,IAAIF,SAAQ,CAAC0B,EAAGC,KAC3BjF,KAAK+E,MAAQG,YAAW,IACbD,EAAOpH,EAAamC,KAAKjC,KAAM,4BACvC6D,EAAuBxB,MAAM,GAExC,CACA,mBAAAqD,GACI0B,aAAanF,KAAK+E,MACtB,EAEJ,SAASpB,EAAiB5F,EAAMC,EAAMyD,GAClC,MAAM2D,EAAc,CAChB9G,QAASP,EAAKQ,MAEdkD,EAAS4D,QACTD,EAAYC,MAAQ5D,EAAS4D,OAE7B5D,EAAS6D,cACTF,EAAYE,YAAc7D,EAAS6D,aAEvC,MAAM/H,EAAQM,EAAaE,EAAMC,EAAMoH,GAGvC,OADA7H,EAAMgI,WAAWC,eAAiB/D,EAC3BlE,CACX,CAkBA,SAASkI,EAAKC,GACV,YAAuBC,IAAfD,QACuBC,IAA3BD,EAAWE,WACnB,CACA,SAASC,EAAaH,GAClB,YAAuBC,IAAfD,QACsBC,IAA1BD,EAAWI,UACnB,CACA,MAAMC,EACF,WAAApH,CAAY8C,GASR,GALAzB,KAAKgG,QAAU,GAIfhG,KAAKiG,0BAA4B,QACHN,IAA1BlE,EAASyE,aACT,MAAM,IAAI/G,MAAM,0BAGpBa,KAAKgG,QAAUvE,EAASyE,aAAalC,MAAM,KAAK,GAChDhE,KAAKiG,0BAA4BxE,EAASwE,yBAC9C,CAOA,2BAAAE,CAA4BC,GACxB,IAAKpG,KAAKiG,2BACoC,IAA1CjG,KAAKiG,0BAA0BI,OAC/B,OAAO,KAEX,IAAK,MAAMJ,KAA6BjG,KAAKiG,0BACzC,GAAIA,EAA0BK,UAC1BL,EAA0BK,WAAaF,EACvC,OAAOvB,EAAuBoB,EAA0BM,kBAGhE,OAAO,IACX,CAOA,iBAAAC,CAAkBJ,GACd,MACI,YADIpG,KAAKmG,4BAA4BC,IAEa,UAAlDpG,KAAKmG,4BAA4BC,EACzC,EAsBJpE,eAAeyE,EAAmB1I,EAAM+D,GACpC,OAAOG,EAAmBlE,EAAM,MAA4B,sBAA2D8D,EAAmB9D,EAAM+D,GACpJ,CA4CA,SAAS4E,EAAyBC,GAC9B,GAAKA,EAGL,IAEI,MAAMC,EAAO,IAAIC,KAAKC,OAAOH,IAE7B,IAAKI,MAAMH,EAAKI,WAEZ,OAAOJ,EAAKK,aAEpB,CACA,MAAO7C,GAEP,CAEJ,CA6CApC,eAAekF,EAAiBC,EAAMC,GAAe,GACjD,MAAMC,EAAehL,EAAKiL,mBAAmBH,GACvCI,QAAcF,EAAaG,WAAWJ,GACtCK,EAASC,EAAYH,GAC3BxI,EAAQ0I,GAAUA,EAAOE,KAAOF,EAAOG,WAAaH,EAAOI,IAAKR,EAAatJ,KAAM,kBACnF,MAAM+J,EAAsC,iBAApBL,EAAOK,SAAwBL,EAAOK,cAAWnC,EACnEoC,EAAiBD,aAA2C,EAASA,EAA2B,iBACtG,MAAO,CACHL,SACAF,QACAS,SAAUtB,EAAyBuB,EAA4BR,EAAOG,YACtEM,aAAcxB,EAAyBuB,EAA4BR,EAAOI,MAC1EM,eAAgBzB,EAAyBuB,EAA4BR,EAAOE,MAC5EI,eAAgBA,GAAkB,KAClCK,oBAAqBN,aAA2C,EAASA,EAAgC,wBAAM,KAEvH,CACA,SAASG,EAA4BI,GACjC,OAAyB,IAAlBvB,OAAOuB,EAClB,CACA,SAASX,EAAYH,GACjB,MAAOe,EAAWC,EAASC,GAAajB,EAAMvD,MAAM,KACpD,QAAkB2B,IAAd2C,QACY3C,IAAZ4C,QACc5C,IAAd6C,EAEA,OADAvL,EAAU,kDACH,KAEX,IACI,MAAMwL,EAAUpM,EAAKqM,aAAaH,GAClC,OAAKE,EAIElG,KAAKoG,MAAMF,IAHdxL,EAAU,uCACH,KAGf,CACA,MAAOmH,GAEH,OADAnH,EAAU,2CAA4CmH,aAA6B,EAASA,EAAEwE,YACvF,IACX,CACJ,CA4BA5G,eAAe6G,EAAqB1B,EAAM3D,EAASsF,GAAkB,GACjE,GAAIA,EACA,OAAOtF,EAEX,IACI,aAAaA,CACjB,CACA,MAAOY,GAMH,MALIA,aAAa/H,EAAKgI,eAQ9B,UAA2B,KAAErG,IACzB,MAAiB,uBAATA,GACK,4BAATA,CACR,CAX+C+K,CAAkB3E,IACjD+C,EAAKpJ,KAAKiL,cAAgB7B,SACpBA,EAAKpJ,KAAKkL,UAGlB7E,CACV,CACJ,CAsBA,MAAM8E,EACF,WAAAvK,CAAYwI,GACRnH,KAAKmH,KAAOA,EACZnH,KAAKmJ,WAAY,EAKjBnJ,KAAKoJ,QAAU,KACfpJ,KAAKqJ,aAAe,GACxB,CACA,MAAAC,GACQtJ,KAAKmJ,YAGTnJ,KAAKmJ,WAAY,EACjBnJ,KAAKuJ,WACT,CACA,KAAAC,GACSxJ,KAAKmJ,YAGVnJ,KAAKmJ,WAAY,EACI,OAAjBnJ,KAAKoJ,SACLjE,aAAanF,KAAKoJ,SAE1B,CACA,WAAAK,CAAYC,GACR,IAAIpK,EACJ,GAAIoK,EAAU,CACV,MAAMC,EAAW3J,KAAKqJ,aAEtB,OADArJ,KAAKqJ,aAAe7I,KAAKC,IAAwB,EAApBT,KAAKqJ,aAAkB,MAC7CM,CACX,CACK,CAED3J,KAAKqJ,aAAe,IACpB,MACMM,GAD8D,QAAnDrK,EAAKU,KAAKmH,KAAKyC,gBAAgBzB,sBAAmC,IAAP7I,EAAgBA,EAAK,GACtEuH,KAAKgD,MAAQ,IACxC,OAAOrJ,KAAKsJ,IAAI,EAAGH,EACvB,CACJ,CACA,QAAAJ,CAASG,GAAW,GAChB,IAAK1J,KAAKmJ,UAEN,OAEJ,MAAMQ,EAAW3J,KAAKyJ,YAAYC,GAClC1J,KAAKoJ,QAAUlE,YAAWlD,gBAChBhC,KAAK+J,WAAW,GACvBJ,EACP,CACA,eAAMI,GACF,UACU/J,KAAKmH,KAAKK,YAAW,EAC/B,CACA,MAAOpD,GAMH,YAHI,iCADCA,aAA6B,EAASA,EAAEpG,OAEzCgC,KAAKuJ,UAAwB,GAGrC,CACAvJ,KAAKuJ,UACT,EAmBJ,MAAMS,EACF,WAAArL,CAAYsL,EAAWC,GACnBlK,KAAKiK,UAAYA,EACjBjK,KAAKkK,YAAcA,EACnBlK,KAAKmK,iBACT,CACA,eAAAA,GACInK,KAAKoK,eAAiB1D,EAAyB1G,KAAKkK,aACpDlK,KAAKqK,aAAe3D,EAAyB1G,KAAKiK,UACtD,CACA,KAAAK,CAAMC,GACFvK,KAAKiK,UAAYM,EAASN,UAC1BjK,KAAKkK,YAAcK,EAASL,YAC5BlK,KAAKmK,iBACT,CACA,MAAAK,GACI,MAAO,CACHP,UAAWjK,KAAKiK,UAChBC,YAAalK,KAAKkK,YAE1B,EAmBJlI,eAAeyI,EAAqBtD,GAChC,IAAI7H,EACJ,MAAMvB,EAAOoJ,EAAKpJ,KACZ2M,QAAgBvD,EAAKK,aACrB/F,QAAiBoH,EAAqB1B,EA1ThDnF,eAA8BjE,EAAM+D,GAChC,OAAOG,EAAmBlE,EAAM,OAA8B,sBAAuD+D,EACzH,CAwTsD6I,CAAe5M,EAAM,CAAE2M,aACzE3L,EAAQ0C,aAA2C,EAASA,EAASmJ,MAAMvE,OAAQtI,EAAM,kBACzF,MAAM8M,EAAcpJ,EAASmJ,MAAM,GACnCzD,EAAK2D,sBAAsBD,GAC3B,MAAME,GAA2D,QAAvCzL,EAAKuL,EAAYG,wBAAqC,IAAP1L,OAAgB,EAASA,EAAG+G,QAC3EwE,EAAYG,iBA8CrBC,KAAK3L,IAClB,IAAI,WAAE4L,GAAe5L,EAAIgH,EAAW9J,EAAM2O,OAAO7L,EAAI,CAAC,eACtD,MAAO,CACH4L,aACAE,IAAK9E,EAAS+E,OAAS,GACvBC,YAAahF,EAASgF,aAAe,KACrCjG,MAAOiB,EAASjB,OAAS,KACzBC,YAAagB,EAAShB,aAAe,KACrCiG,SAAUjF,EAASkF,UAAY,KAClC,IAtDC,GACN,MAAMC,GAuCiBC,EAvCgBvE,EAAKsE,aAuCXE,EAvCyBZ,EAyCnD,IADSW,EAASE,QAAOC,IAAMF,EAAQG,MAAKC,GAAKA,EAAEb,aAAeW,EAAEX,kBACpDS,IAF3B,IAA2BD,EAAUC,EAjCjC,MAAMK,EAAiB7E,EAAK8E,YACtBC,IAAmB/E,EAAK9B,OAASwF,EAAYsB,eAAmBV,aAAmD,EAASA,EAAapF,SACzI4F,IAAeD,GAAyBE,EACxCE,EAAU,CACZhB,IAAKP,EAAYwB,QACjBf,YAAaT,EAAYS,aAAe,KACxCC,SAAUV,EAAYW,UAAY,KAClCnG,MAAOwF,EAAYxF,OAAS,KAC5BiH,cAAezB,EAAYyB,gBAAiB,EAC5ChH,YAAauF,EAAYvF,aAAe,KACxCvD,SAAU8I,EAAY9I,UAAY,KAClC0J,eACAlB,SAAU,IAAIP,EAAaa,EAAYZ,UAAWY,EAAYX,aAC9D+B,eAEJ9N,OAAOC,OAAO+I,EAAMiF,EACxB,CAQApK,eAAeuK,EAAOpF,GAClB,MAAME,EAAehL,EAAKiL,mBAAmBH,SACvCsD,EAAqBpD,SAIrBA,EAAatJ,KAAKyO,sBAAsBnF,GAC9CA,EAAatJ,KAAK0O,0BAA0BpF,EAChD,CAoFA,MAAMqF,EACF,WAAA/N,GACIqB,KAAK2M,aAAe,KACpB3M,KAAK4M,YAAc,KACnB5M,KAAKmI,eAAiB,IAC1B,CACA,aAAI0E,GACA,OAAS7M,KAAKmI,gBACVtB,KAAKgD,MAAQ7J,KAAKmI,eAAiB,GAC3C,CACA,wBAAA2E,CAAyBrL,GACrB1C,EAAQ0C,EAASiJ,QAAS,kBAC1B3L,OAAoC,IAArB0C,EAASiJ,QAAyB,kBACjD3L,OAAyC,IAA1B0C,EAASkL,aAA8B,kBACtD,MAAMI,EAAY,cAAetL,QAA0C,IAAvBA,EAASsL,UACvDjG,OAAOrF,EAASsL,WA5U9B,SAAyBxF,GACrB,MAAMyF,EAActF,EAAYH,GAIhC,OAHAxI,EAAQiO,EAAa,kBACrBjO,OAAmC,IAApBiO,EAAYrF,IAAqB,kBAChD5I,OAAmC,IAApBiO,EAAYnF,IAAqB,kBACzCf,OAAOkG,EAAYrF,KAAOb,OAAOkG,EAAYnF,IACxD,CAuUcoF,CAAgBxL,EAASiJ,SAC/B1K,KAAKkN,0BAA0BzL,EAASiJ,QAASjJ,EAASkL,aAAcI,EAC5E,CACA,cAAMI,CAASpP,EAAMqJ,GAAe,GAEhC,OADArI,GAASiB,KAAK4M,aAAe5M,KAAK2M,aAAc5O,EAAM,sBACjDqJ,IAAgBpH,KAAK4M,aAAgB5M,KAAK6M,UAG3C7M,KAAK2M,oBACC3M,KAAKoN,QAAQrP,EAAMiC,KAAK2M,cACvB3M,KAAK4M,aAET,KANI5M,KAAK4M,WAOpB,CACA,iBAAAS,GACIrN,KAAK2M,aAAe,IACxB,CACA,aAAMS,CAAQrP,EAAMuP,GAChB,MAAM,YAAEV,EAAW,aAAED,EAAY,UAAEI,SAnF3C/K,eAA+BjE,EAAM4O,GACjC,MAAMlL,QAAiBW,EAA+BrE,EAAM,CAAC,GAAGiE,UAC5D,MAAMK,EAAOhG,EAAKqG,YAAY,CAC1B,WAAc,gBACd,cAAiBiK,IAClB9N,MAAM,IACH,aAAE0O,EAAY,OAAE3K,GAAW7E,EAAK4C,OAChCG,EAAMiC,EAAgBhF,EAAMwP,EAAc,YAAkC,OAAO3K,KACnFrB,QAAgBxD,EAAK8E,wBAE3B,OADAtB,EAAQ,gBAAgD,oCACjDP,EAAcK,OAAdL,CAAsBF,EAAK,CAC9BoB,OAAQ,OACRX,UACAc,QACF,IAGN,MAAO,CACHuK,YAAanL,EAAS+L,aACtBT,UAAWtL,EAASgM,WACpBd,aAAclL,EAASiM,cAE/B,CA6D+DC,CAAgB5P,EAAMuP,GAC7EtN,KAAKkN,0BAA0BN,EAAaD,EAAc7F,OAAOiG,GACrE,CACA,yBAAAG,CAA0BN,EAAaD,EAAciB,GACjD5N,KAAK2M,aAAeA,GAAgB,KACpC3M,KAAK4M,YAAcA,GAAe,KAClC5M,KAAKmI,eAAiBtB,KAAKgD,MAAuB,IAAf+D,CACvC,CACA,eAAOC,CAASvP,EAASG,GACrB,MAAM,aAAEkO,EAAY,YAAEC,EAAW,eAAEzE,GAAmB1J,EAChDqP,EAAU,IAAIpB,EAmBpB,OAlBIC,IACA5N,EAAgC,iBAAjB4N,EAA2B,iBAAqD,CAC3FrO,YAEJwP,EAAQnB,aAAeA,GAEvBC,IACA7N,EAA+B,iBAAhB6N,EAA0B,iBAAqD,CAC1FtO,YAEJwP,EAAQlB,YAAcA,GAEtBzE,IACApJ,EAAkC,iBAAnBoJ,EAA6B,iBAAqD,CAC7F7J,YAEJwP,EAAQ3F,eAAiBA,GAEtB2F,CACX,CACA,MAAAtD,GACI,MAAO,CACHmC,aAAc3M,KAAK2M,aACnBC,YAAa5M,KAAK4M,YAClBzE,eAAgBnI,KAAKmI,eAE7B,CACA,OAAA4F,CAAQnE,GACJ5J,KAAK4M,YAAchD,EAAgBgD,YACnC5M,KAAK2M,aAAe/C,EAAgB+C,aACpC3M,KAAKmI,eAAiByB,EAAgBzB,cAC1C,CACA,MAAA6F,GACI,OAAO7P,OAAOC,OAAO,IAAIsO,EAAmB1M,KAAKwK,SACrD,CACA,eAAAyD,GACI,OAAOhP,EAAU,kBACrB,EAmBJ,SAASiP,EAAwBlP,EAAWV,GACxCS,EAA6B,iBAAdC,QAA+C,IAAdA,EAA2B,iBAAqD,CAAEV,WACtI,CACA,MAAM6P,EACF,WAAAxP,CAAYW,GACR,IAAI,IAAE8L,EAAG,KAAErN,EAAI,gBAAE6L,GAAoBtK,EAAI8O,EAAM5R,EAAM2O,OAAO7L,EAAI,CAAC,MAAO,OAAQ,oBAEhFU,KAAKkL,WAAa,WAClBlL,KAAKqO,iBAAmB,IAAInF,EAAiBlJ,MAC7CA,KAAKsO,eAAiB,KACtBtO,KAAKuO,eAAiB,KACtBvO,KAAKoL,IAAMA,EACXpL,KAAKjC,KAAOA,EACZiC,KAAK4J,gBAAkBA,EACvB5J,KAAK4M,YAAchD,EAAgBgD,YACnC5M,KAAKsL,YAAc8C,EAAI9C,aAAe,KACtCtL,KAAKqF,MAAQ+I,EAAI/I,OAAS,KAC1BrF,KAAKsM,cAAgB8B,EAAI9B,gBAAiB,EAC1CtM,KAAKsF,YAAc8I,EAAI9I,aAAe,KACtCtF,KAAKuL,SAAW6C,EAAI7C,UAAY,KAChCvL,KAAKiM,YAAcmC,EAAInC,cAAe,EACtCjM,KAAK+B,SAAWqM,EAAIrM,UAAY,KAChC/B,KAAKyL,aAAe2C,EAAI3C,aAAe,IAAI2C,EAAI3C,cAAgB,GAC/DzL,KAAKuK,SAAW,IAAIP,EAAaoE,EAAInE,gBAAatE,EAAWyI,EAAIlE,kBAAevE,EACpF,CACA,gBAAM6B,CAAWJ,GACb,MAAMwF,QAAoB/D,EAAqB7I,KAAMA,KAAK4J,gBAAgBuD,SAASnN,KAAKjC,KAAMqJ,IAO9F,OANArI,EAAQ6N,EAAa5M,KAAKjC,KAAM,kBAC5BiC,KAAK4M,cAAgBA,IACrB5M,KAAK4M,YAAcA,QACb5M,KAAKjC,KAAKyO,sBAAsBxM,MACtCA,KAAKjC,KAAK0O,0BAA0BzM,OAEjC4M,CACX,CACA,gBAAA1F,CAAiBE,GACb,OAAOF,EAAiBlH,KAAMoH,EAClC,CACA,MAAAmF,GACI,OAAOA,EAAOvM,KAClB,CACA,OAAA+N,CAAQ5G,GACAnH,OAASmH,IAGbpI,EAAQiB,KAAKoL,MAAQjE,EAAKiE,IAAKpL,KAAKjC,KAAM,kBAC1CiC,KAAKsL,YAAcnE,EAAKmE,YACxBtL,KAAKuL,SAAWpE,EAAKoE,SACrBvL,KAAKqF,MAAQ8B,EAAK9B,MAClBrF,KAAKsM,cAAgBnF,EAAKmF,cAC1BtM,KAAKsF,YAAc6B,EAAK7B,YACxBtF,KAAKiM,YAAc9E,EAAK8E,YACxBjM,KAAK+B,SAAWoF,EAAKpF,SACrB/B,KAAKyL,aAAetE,EAAKsE,aAAaR,KAAIuD,GAAarQ,OAAOC,OAAO,CAAC,EAAGoQ,KACzExO,KAAKuK,SAASD,MAAMnD,EAAKoD,UACzBvK,KAAK4J,gBAAgBmE,QAAQ5G,EAAKyC,iBACtC,CACA,MAAAoE,CAAOjQ,GACH,MAAM0Q,EAAU,IAAIN,EAAShQ,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAG4B,MAAO,CAAEjC,OAAM6L,gBAAiB5J,KAAK4J,gBAAgBoE,YAElH,OADAS,EAAQlE,SAASD,MAAMtK,KAAKuK,UACrBkE,CACX,CACA,SAAAC,CAAUC,GAEN5P,GAASiB,KAAKuO,eAAgBvO,KAAKjC,KAAM,kBACzCiC,KAAKuO,eAAiBI,EAClB3O,KAAKsO,iBACLtO,KAAK8K,sBAAsB9K,KAAKsO,gBAChCtO,KAAKsO,eAAiB,KAE9B,CACA,qBAAAxD,CAAsB0D,GACdxO,KAAKuO,eACLvO,KAAKuO,eAAeC,GAIpBxO,KAAKsO,eAAiBE,CAE9B,CACA,sBAAAI,GACI5O,KAAKqO,iBAAiB/E,QAC1B,CACA,qBAAAuF,GACI7O,KAAKqO,iBAAiB7E,OAC1B,CACA,8BAAMsF,CAAyBrN,EAAU8K,GAAS,GAC9C,IAAIwC,GAAkB,EAClBtN,EAASiJ,SACTjJ,EAASiJ,UAAY1K,KAAK4J,gBAAgBgD,cAC1C5M,KAAK4J,gBAAgBkD,yBAAyBrL,GAC9CsN,GAAkB,GAElBxC,SACM9B,EAAqBzK,YAEzBA,KAAKjC,KAAKyO,sBAAsBxM,MAClC+O,GACA/O,KAAKjC,KAAK0O,0BAA0BzM,KAE5C,CACA,YAAM,GACF,MAAM0K,QAAgB1K,KAAKwH,aAK3B,aAJMqB,EAAqB7I,KA7oBnCgC,eAA6BjE,EAAM+D,GAC/B,OAAOG,EAAmBlE,EAAM,OAA8B,sBAAqD+D,EACvH,CA2oByCkN,CAAchP,KAAKjC,KAAM,CAAE2M,aAC5D1K,KAAK4J,gBAAgByD,oBAGdrN,KAAKjC,KAAKkL,SACrB,CACA,MAAAuB,GACI,OAAOrM,OAAOC,OAAOD,OAAOC,OAAO,CAAEgN,IAAKpL,KAAKoL,IAAK/F,MAAOrF,KAAKqF,YAASM,EAAW2G,cAAetM,KAAKsM,cAAehB,YAAatL,KAAKsL,kBAAe3F,EAAWsG,YAAajM,KAAKiM,YAAaV,SAAUvL,KAAKuL,eAAY5F,EAAWL,YAAatF,KAAKsF,kBAAeK,EAAW5D,SAAU/B,KAAK+B,eAAY4D,EAAW8F,aAAczL,KAAKyL,aAAaR,KAAIuD,GAAarQ,OAAOC,OAAO,CAAC,EAAGoQ,KAAa5E,gBAAiB5J,KAAK4J,gBAAgBY,SAG5ayE,iBAAkBjP,KAAKiP,kBAAoBjP,KAAKuK,SAASC,UAAW,CAEpE5H,OAAQ5C,KAAKjC,KAAK4C,OAAOiC,OAAQtE,QAAS0B,KAAKjC,KAAKQ,MAC5D,CACA,gBAAIoO,GACA,OAAO3M,KAAK4J,gBAAgB+C,cAAgB,EAChD,CACA,gBAAOuC,CAAUnR,EAAMU,GACnB,IAAIa,EAAI6P,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAChC,MAAMnE,EAA4C,QAA7BhM,EAAKb,EAAO6M,mBAAgC,IAAPhM,EAAgBA,OAAKqG,EACzEN,EAAgC,QAAvB8J,EAAK1Q,EAAO4G,aAA0B,IAAP8J,EAAgBA,OAAKxJ,EAC7DL,EAA4C,QAA7B8J,EAAK3Q,EAAO6G,mBAAgC,IAAP8J,EAAgBA,OAAKzJ,EACzE4F,EAAsC,QAA1B8D,EAAK5Q,EAAO8M,gBAA6B,IAAP8D,EAAgBA,OAAK1J,EACnE5D,EAAsC,QAA1BuN,EAAK7Q,EAAOsD,gBAA6B,IAAPuN,EAAgBA,OAAK3J,EACnEsJ,EAAsD,QAAlCM,EAAK9Q,EAAOwQ,wBAAqC,IAAPM,EAAgBA,OAAK5J,EACnFsE,EAAwC,QAA3BuF,EAAK/Q,EAAOwL,iBAA8B,IAAPuF,EAAgBA,OAAK7J,EACrEuE,EAA4C,QAA7BuF,EAAKhR,EAAOyL,mBAAgC,IAAPuF,EAAgBA,OAAK9J,GACzE,IAAEyF,EAAG,cAAEkB,EAAa,YAAEL,EAAW,aAAER,EAAc7B,gBAAiB8F,GAA4BjR,EACpGM,EAAQqM,GAAOsE,EAAyB3R,EAAM,kBAC9C,MAAM6L,EAAkB8C,EAAgBmB,SAAS7N,KAAKzB,KAAMmR,GAC5D3Q,EAAuB,iBAARqM,EAAkBrN,EAAM,kBACvCmQ,EAAwB5C,EAAavN,EAAKQ,MAC1C2P,EAAwB7I,EAAOtH,EAAKQ,MACpCQ,EAAiC,kBAAlBuN,EAA6BvO,EAAM,kBAClDgB,EAA+B,kBAAhBkN,EAA2BlO,EAAM,kBAChDmQ,EAAwB5I,EAAavH,EAAKQ,MAC1C2P,EAAwB3C,EAAUxN,EAAKQ,MACvC2P,EAAwBnM,EAAUhE,EAAKQ,MACvC2P,EAAwBe,EAAkBlR,EAAKQ,MAC/C2P,EAAwBjE,EAAWlM,EAAKQ,MACxC2P,EAAwBhE,EAAanM,EAAKQ,MAC1C,MAAM4I,EAAO,IAAIgH,EAAS,CACtB/C,MACArN,OACAsH,QACAiH,gBACAhB,cACAW,cACAV,WACAjG,cACAvD,WACA6H,kBACAK,YACAC,gBAQJ,OANIuB,GAAgBkE,MAAMC,QAAQnE,KAC9BtE,EAAKsE,aAAeA,EAAaR,KAAIuD,GAAarQ,OAAOC,OAAO,CAAC,EAAGoQ,MAEpES,IACA9H,EAAK8H,iBAAmBA,GAErB9H,CACX,CAMA,iCAAa0I,CAAqB9R,EAAM+R,EAAiB7D,GAAc,GACnE,MAAMrC,EAAkB,IAAI8C,EAC5B9C,EAAgBkD,yBAAyBgD,GAEzC,MAAM3I,EAAO,IAAIgH,EAAS,CACtB/C,IAAK0E,EAAgBzD,QACrBtO,OACA6L,kBACAqC,gBAIJ,aADMxB,EAAqBtD,GACpBA,CACX,EAmBJ,MAAM4I,GAAgB,IAAIC,IAC1B,SAASC,GAAaC,GAClB9Q,EAAY8Q,aAAeC,SAAU,+BACrC,IAAIzR,EAAWqR,GAAc3P,IAAI8P,GACjC,OAAIxR,GACAU,EAAYV,aAAoBwR,EAAK,kDAC9BxR,IAEXA,EAAW,IAAIwR,EACfH,GAAcK,IAAIF,EAAKxR,GAChBA,EACX,CAkBA,MAAM2R,GACF,WAAA1R,GACIqB,KAAKsQ,KAAO,OACZtQ,KAAKuQ,QAAU,CAAC,CACpB,CACA,kBAAMC,GACF,OAAO,CACX,CACA,UAAMC,CAAK9N,EAAK+N,GACZ1Q,KAAKuQ,QAAQ5N,GAAO+N,CACxB,CACA,UAAMC,CAAKhO,GACP,MAAM+N,EAAQ1Q,KAAKuQ,QAAQ5N,GAC3B,YAAiBgD,IAAV+K,EAAsB,KAAOA,CACxC,CACA,aAAME,CAAQjO,UACH3C,KAAKuQ,QAAQ5N,EACxB,CACA,YAAAkO,CAAaC,EAAMC,GAGnB,CACA,eAAAC,CAAgBF,EAAMC,GAGtB,EAEJV,GAAoBC,KAAO,OAM3B,MAAMW,GAAsBZ,GAkB5B,SAASa,GAAoBvO,EAAKC,EAAQtE,GACtC,MAAO,YAA6CqE,KAAOC,KAAUtE,GACzE,CACA,MAAM6S,GACF,WAAAxS,CAAYyS,EAAarT,EAAMsT,GAC3BrR,KAAKoR,YAAcA,EACnBpR,KAAKjC,KAAOA,EACZiC,KAAKqR,QAAUA,EACf,MAAM,OAAE1Q,EAAM,KAAEpC,GAASyB,KAAKjC,KAC9BiC,KAAKsR,YAAcJ,GAAoBlR,KAAKqR,QAAS1Q,EAAOiC,OAAQrE,GACpEyB,KAAKuR,mBAAqBL,GAAoB,cAA8CvQ,EAAOiC,OAAQrE,GAC3GyB,KAAKwR,kBAAoBzT,EAAK0T,gBAAgBC,KAAK3T,GACnDiC,KAAKoR,YAAYP,aAAa7Q,KAAKsR,YAAatR,KAAKwR,kBACzD,CACA,cAAAG,CAAexK,GACX,OAAOnH,KAAKoR,YAAYX,KAAKzQ,KAAKsR,YAAanK,EAAKqD,SACxD,CACA,oBAAMoH,GACF,MAAMC,QAAa7R,KAAKoR,YAAYT,KAAK3Q,KAAKsR,aAC9C,OAAOO,EAAO1D,EAASe,UAAUlP,KAAKjC,KAAM8T,GAAQ,IACxD,CACA,iBAAAC,GACI,OAAO9R,KAAKoR,YAAYR,QAAQ5Q,KAAKsR,YACzC,CACA,0BAAAS,GACI,OAAO/R,KAAKoR,YAAYX,KAAKzQ,KAAKuR,mBAAoBvR,KAAKoR,YAAYd,KAC3E,CACA,oBAAM0B,CAAeC,GACjB,GAAIjS,KAAKoR,cAAgBa,EACrB,OAEJ,MAAMjJ,QAAoBhJ,KAAK4R,iBAG/B,aAFM5R,KAAK8R,oBACX9R,KAAKoR,YAAca,EACfjJ,EACOhJ,KAAK2R,eAAe3I,QAD/B,CAGJ,CACA,SACIhJ,KAAKoR,YAAYJ,gBAAgBhR,KAAKsR,YAAatR,KAAKwR,kBAC5D,CACA,mBAAanT,CAAON,EAAMmU,EAAsBb,EAAU,YACtD,IAAKa,EAAqB7L,OACtB,OAAO,IAAI8K,GAAuBlB,GAAagB,IAAsBlT,EAAMsT,GAG/E,MAAMc,SAA+B7O,QAAQ8O,IAAIF,EAAqBjH,KAAIjJ,MAAOoP,IAC7E,SAAUA,EAAYZ,eAClB,OAAOY,CAEK,MACfxF,QAAOwF,GAAeA,IAE3B,IAAIiB,EAAsBF,EAAsB,IAC5ClC,GAAagB,IACjB,MAAMtO,EAAMuO,GAAoBG,EAAStT,EAAK4C,OAAOiC,OAAQ7E,EAAKQ,MAGlE,IAAI+T,EAAgB,KAIpB,IAAK,MAAMlB,KAAec,EACtB,IACI,MAAML,QAAaT,EAAYT,KAAKhO,GACpC,GAAIkP,EAAM,CACN,MAAM1K,EAAOgH,EAASe,UAAUnR,EAAM8T,GAClCT,IAAgBiB,IAChBC,EAAgBnL,GAEpBkL,EAAsBjB,EACtB,KACJ,CACJ,CACA,MAAO9R,GAAM,CAIjB,MAAMiT,EAAqBJ,EAAsBvG,QAAO4G,GAAKA,EAAEC,wBAE/D,OAAKJ,EAAoBI,uBACpBF,EAAmBlM,QAGxBgM,EAAsBE,EAAmB,GACrCD,SAGMD,EAAoB5B,KAAK9N,EAAK2P,EAAc9H,gBAIhDlH,QAAQ8O,IAAIF,EAAqBjH,KAAIjJ,MAAOoP,IAC9C,GAAIA,IAAgBiB,EAChB,UACUjB,EAAYR,QAAQjO,EAC9B,CACA,MAAOrD,GAAM,CACjB,KAEG,IAAI6R,GAAuBkB,EAAqBtU,EAAMsT,IAlBlD,IAAIF,GAAuBkB,EAAqBtU,EAAMsT,EAmBrE,EAsBJ,SAASqB,GAAgBC,GACrB,MAAMC,EAAKD,EAAUzO,cACrB,GAAI0O,EAAGC,SAAS,WAAaD,EAAGC,SAAS,SAAWD,EAAGC,SAAS,UAC5D,MAAO,QAEN,GAAIC,GAAYF,GAEjB,MAAO,WAEN,GAAIA,EAAGC,SAAS,SAAWD,EAAGC,SAAS,YACxC,MAAO,KAEN,GAAID,EAAGC,SAAS,SACjB,MAAO,OAEN,GAAIE,GAAWH,GAChB,MAAO,UAEN,GAAIA,EAAGC,SAAS,SACjB,MAAO,OAEN,GAAIG,GAAcJ,GAEnB,MAAO,aAEN,GAAIK,GAASL,GAEd,MAAO,QAEN,GAAIM,GAAUN,GACf,MAAO,SAEN,IAAKA,EAAGC,SAAS,YAAcM,GAAaP,MAC5CA,EAAGC,SAAS,SACb,MAAO,SAEN,GAAIO,GAAWR,GAEhB,MAAO,UAEN,CAED,MAAMS,EAAK,kCACLC,EAAUX,EAAUY,MAAMF,GAChC,GAA2E,KAAtEC,aAAyC,EAASA,EAAQjN,QAC3D,OAAOiN,EAAQ,EAEvB,CACA,MAAO,OACX,CACA,SAASP,GAAWH,EAAKvW,EAAKmX,SAC1B,MAAO,aAAaC,KAAKb,EAC7B,CACA,SAASM,GAAUP,EAAYtW,EAAKmX,SAChC,MAAMZ,EAAKD,EAAUzO,cACrB,OAAQ0O,EAAGC,SAAS,aACfD,EAAGC,SAAS,aACZD,EAAGC,SAAS,YACZD,EAAGC,SAAS,UACrB,CACA,SAASM,GAAaP,EAAKvW,EAAKmX,SAC5B,MAAO,WAAWC,KAAKb,EAC3B,CACA,SAASE,GAAYF,EAAKvW,EAAKmX,SAC3B,MAAO,YAAYC,KAAKb,EAC5B,CACA,SAASQ,GAAWR,EAAKvW,EAAKmX,SAC1B,MAAO,WAAWC,KAAKb,EAC3B,CACA,SAASI,GAAcJ,EAAKvW,EAAKmX,SAC7B,MAAO,cAAcC,KAAKb,EAC9B,CACA,SAASK,GAASL,EAAKvW,EAAKmX,SACxB,MAAO,SAASC,KAAKb,EACzB,CACA,SAASc,GAAOd,EAAKvW,EAAKmX,SACtB,MAAQ,oBAAoBC,KAAKb,IAC5B,aAAaa,KAAKb,IAAO,UAAUa,KAAKb,EACjD,CAYA,SAASe,GAAiBf,EAAKvW,EAAKmX,SAEhC,OAAQE,GAAOd,IACXQ,GAAWR,IACXK,GAASL,IACTI,GAAcJ,IACd,iBAAiBa,KAAKb,IACtBE,GAAYF,EACpB,CA+BA,SAASgB,GAAkBC,EAAgBC,EAAa,IACpD,IAAIC,EACJ,OAAQF,GACJ,IAAK,UAEDE,EAAmBrB,GAAgBrW,EAAKmX,SACxC,MACJ,IAAK,SAIDO,EAAmB,GAAGrB,GAAgBrW,EAAKmX,YAAYK,IACvD,MACJ,QACIE,EAAmBF,EAE3B,MAAMG,EAAqBF,EAAWzN,OAChCyN,EAAWG,KAAK,KAChB,mBACN,MAAO,GAAGF,YAAgEzX,EAAIkB,eAAewW,GACjG,CAkBA,MAAME,GACF,WAAAvV,CAAYZ,GACRiC,KAAKjC,KAAOA,EACZiC,KAAKmU,MAAQ,EACjB,CACA,YAAAC,CAAazF,EAAU0F,GAGnB,MAAMC,EAAmBnN,GAAS,IAAI7D,SAAQ,CAACiR,EAAStP,KACpD,IAIIsP,EAHe5F,EAASxH,GAI5B,CACA,MAAO/C,GAEHa,EAAOb,EACX,KAGJkQ,EAAgBD,QAAUA,EAC1BrU,KAAKmU,MAAMK,KAAKF,GAChB,MAAMG,EAAQzU,KAAKmU,MAAM9N,OAAS,EAClC,MAAO,KAGHrG,KAAKmU,MAAMM,GAAS,IAAMnR,QAAQiR,SAAS,CAEnD,CACA,mBAAMG,CAAcC,GAChB,GAAI3U,KAAKjC,KAAKiL,cAAgB2L,EAC1B,OAIJ,MAAMC,EAAe,GACrB,IACI,IAAK,MAAMC,KAAuB7U,KAAKmU,YAC7BU,EAAoBF,GAEtBE,EAAoBR,SACpBO,EAAaJ,KAAKK,EAAoBR,QAGlD,CACA,MAAOjQ,GAGHwQ,EAAaE,UACb,IAAK,MAAMT,KAAWO,EAClB,IACIP,GACJ,CACA,MAAOrP,GAEP,CAEJ,MAAMhF,KAAKjC,KAAKe,cAAcT,OAAO,gBAAmD,CACpF0W,gBAAiB3Q,aAA6B,EAASA,EAAEnG,SAEjE,CACJ,EAqDJ,MAAM+W,GACF,WAAArW,CAAY8C,GACR,IAAInC,EAAI6P,EAAIC,EAAIC,EAEhB,MAAM4F,EAAkBxT,EAASyT,sBACjClV,KAAKkV,sBAAwB,CAAC,EAE9BlV,KAAKkV,sBAAsBC,kBACsB,QAA5C7V,EAAK2V,EAAgBE,yBAAsC,IAAP7V,EAAgBA,EAd7C,EAexB2V,EAAgBG,oBAChBpV,KAAKkV,sBAAsBE,kBACvBH,EAAgBG,wBAE2BzP,IAA/CsP,EAAgBI,6BAChBrV,KAAKkV,sBAAsBI,wBACvBL,EAAgBI,iCAE2B1P,IAA/CsP,EAAgBM,6BAChBvV,KAAKkV,sBAAsBM,wBACvBP,EAAgBM,iCAEyB5P,IAA7CsP,EAAgBQ,2BAChBzV,KAAKkV,sBAAsBO,yBACvBR,EAAgBQ,+BAEiC9P,IAArDsP,EAAgBS,mCAChB1V,KAAKkV,sBAAsBQ,iCACvBT,EAAgBS,kCAExB1V,KAAKuG,iBAAmB9E,EAAS8E,iBACH,kCAA1BvG,KAAKuG,mBACLvG,KAAKuG,iBAAmB,OAG5BvG,KAAK2V,iCAC4G,QAA5GvG,EAA0D,QAApDD,EAAK1N,EAASkU,wCAAqD,IAAPxG,OAAgB,EAASA,EAAG8E,KAAK,WAAwB,IAAP7E,EAAgBA,EAAK,GAC9IpP,KAAK4V,qBAAgE,QAAxCvG,EAAK5N,EAASmU,4BAAyC,IAAPvG,GAAgBA,EAC7FrP,KAAK6V,cAAgBpU,EAASoU,aAClC,CACA,gBAAAC,CAAiBC,GACb,IAAIzW,EAAI6P,EAAIC,EAAIC,EAAIC,EAAIC,EACxB,MAAMyG,EAAS,CACXC,SAAS,EACTC,eAAgBlW,MAYpB,OATAA,KAAKmW,8BAA8BJ,EAAUC,GAC7ChW,KAAKoW,iCAAiCL,EAAUC,GAEhDA,EAAOC,UAAYD,EAAOC,QAAmD,QAAxC3W,EAAK0W,EAAOK,8BAA2C,IAAP/W,GAAgBA,GACrG0W,EAAOC,UAAYD,EAAOC,QAAmD,QAAxC9G,EAAK6G,EAAOM,8BAA2C,IAAPnH,GAAgBA,GACrG6G,EAAOC,UAAYD,EAAOC,QAAoD,QAAzC7G,EAAK4G,EAAOV,+BAA4C,IAAPlG,GAAgBA,GACtG4G,EAAOC,UAAYD,EAAOC,QAAoD,QAAzC5G,EAAK2G,EAAOR,+BAA4C,IAAPnG,GAAgBA,GACtG2G,EAAOC,UAAYD,EAAOC,QAAqD,QAA1C3G,EAAK0G,EAAOP,gCAA6C,IAAPnG,GAAgBA,GACvG0G,EAAOC,UAAYD,EAAOC,QAA6D,QAAlD1G,EAAKyG,EAAON,wCAAqD,IAAPnG,GAAgBA,GACxGyG,CACX,CAOA,6BAAAG,CAA8BJ,EAAUC,GACpC,MAAMb,EAAoBnV,KAAKkV,sBAAsBC,kBAC/CC,EAAoBpV,KAAKkV,sBAAsBE,kBACjDD,IACAa,EAAOK,uBAAyBN,EAAS1P,QAAU8O,GAEnDC,IACAY,EAAOM,uBAAyBP,EAAS1P,QAAU+O,EAE3D,CAOA,gCAAAgB,CAAiCL,EAAUC,GAOvC,IAAIO,EALJvW,KAAKwW,uCAAuCR,GACV,GACA,GACF,GACQ,GAExC,IAAK,IAAIS,EAAI,EAAGA,EAAIV,EAAS1P,OAAQoQ,IACjCF,EAAeR,EAASW,OAAOD,GAC/BzW,KAAKwW,uCAAuCR,EACVO,GAAgB,KAC9CA,GAAgB,IACcA,GAAgB,KAC9CA,GAAgB,IACYA,GAAgB,KAC5CA,GAAgB,IACoBvW,KAAK2V,iCAAiC9C,SAAS0D,GAE/F,CAYA,sCAAAC,CAAuCR,EAAQX,EAA4BE,EAA4BE,EAA0BC,GACzH1V,KAAKkV,sBAAsBI,0BAC3BU,EAAOV,0BAA4BU,EAAOV,wBAA0BD,IAEpErV,KAAKkV,sBAAsBM,0BAC3BQ,EAAOR,0BAA4BQ,EAAOR,wBAA0BD,IAEpEvV,KAAKkV,sBAAsBO,2BAC3BO,EAAOP,2BAA6BO,EAAOP,yBAA2BA,IAEtEzV,KAAKkV,sBAAsBQ,mCAC3BM,EAAON,mCAAqCM,EAAON,iCAAmCA,GAE9F,EAmBJ,MAAMiB,GACF,WAAAhY,CAAYrC,EAAKsa,EAA0BC,EAAyBlW,GAChEX,KAAK1D,IAAMA,EACX0D,KAAK4W,yBAA2BA,EAChC5W,KAAK6W,wBAA0BA,EAC/B7W,KAAKW,OAASA,EACdX,KAAKgJ,YAAc,KACnBhJ,KAAK8W,eAAiB,KACtB9W,KAAK+W,WAAazT,QAAQiR,UAC1BvU,KAAKgX,sBAAwB,IAAIC,GAAajX,MAC9CA,KAAKkX,oBAAsB,IAAID,GAAajX,MAC5CA,KAAKmX,iBAAmB,IAAIjD,GAAoBlU,MAChDA,KAAKoX,aAAe,KACpBpX,KAAKqX,2BAA4B,EACjCrX,KAAKsX,wCAA0C,EAG/CtX,KAAKmD,kBAAmB,EACxBnD,KAAKuX,gBAAiB,EACtBvX,KAAKwX,UAAW,EAChBxX,KAAKyX,uBAAyB,KAC9BzX,KAAK0X,uBAAyB,KAC9B1X,KAAKlB,cAAgBjC,EACrBmD,KAAK2X,sBAAwB,KAC7B3X,KAAK4X,wBAA0B,CAAC,EAChC5X,KAAK6X,uBAAyB,KAC9B7X,KAAK8X,wBAA0B,CAAC,EAIhC9X,KAAK+X,qBAAkBpS,EACvB3F,KAAK8C,aAAe,KACpB9C,KAAK+B,SAAW,KAChB/B,KAAKgY,SAAW,CAAEC,mCAAmC,GACrDjY,KAAK8T,WAAa,GAClB9T,KAAKzB,KAAOjC,EAAIiC,KAChByB,KAAKkY,cAAgBvX,EAAOwX,gBAChC,CACA,0BAAAC,CAA2BlG,EAAsBmG,GAiC7C,OAhCIA,IACArY,KAAK0X,uBAAyBzH,GAAaoI,IAI/CrY,KAAKyX,uBAAyBzX,KAAKmU,OAAMnS,UACrC,IAAI1C,EAAI6P,EACR,IAAInP,KAAKwX,WAGTxX,KAAKsY,yBAA2BnH,GAAuB9S,OAAO2B,KAAMkS,IAChElS,KAAKwX,UAAT,CAKA,GAA2C,QAAtClY,EAAKU,KAAK0X,8BAA2C,IAAPpY,OAAgB,EAASA,EAAGiZ,uBAE3E,UACUvY,KAAK0X,uBAAuBc,YAAYxY,KAClD,CACA,MAAOoE,GAEP,OAEEpE,KAAKyY,sBAAsBJ,GACjCrY,KAAK+X,iBAA+C,QAA3B5I,EAAKnP,KAAKgJ,mBAAgC,IAAPmG,OAAgB,EAASA,EAAG/D,MAAQ,KAC5FpL,KAAKwX,WAGTxX,KAAKuX,gBAAiB,EAjBtB,CAiB0B,IAEvBvX,KAAKyX,sBAChB,CAIA,qBAAMhG,GACF,GAAIzR,KAAKwX,SACL,OAEJ,MAAMrQ,QAAanH,KAAK0Y,oBAAoB9G,iBAC5C,OAAK5R,KAAKgJ,aAAgB7B,EAKtBnH,KAAKgJ,aAAe7B,GAAQnH,KAAKgJ,YAAYoC,MAAQjE,EAAKiE,KAE1DpL,KAAK2Y,aAAa5K,QAAQ5G,cAGpBnH,KAAKgJ,YAAYxB,yBAKrBxH,KAAK4Y,mBAAmBzR,GAAqC,QAfnE,CAgBJ,CACA,2BAAMsR,CAAsBJ,GACxB,IAAI/Y,EAEJ,MAAMuZ,QAA8B7Y,KAAK0Y,oBAAoB9G,iBAC7D,IAAIkH,EAAoBD,EACpBE,GAAyB,EAC7B,GAAIV,GAAyBrY,KAAKW,OAAOqY,WAAY,OAC3ChZ,KAAKiZ,sCACX,MAAMC,EAAmD,QAA5B5Z,EAAKU,KAAKoX,oBAAiC,IAAP9X,OAAgB,EAASA,EAAG2P,iBACvFkK,EAAoBL,aAA6D,EAASA,EAAkB7J,iBAC5GmK,QAAepZ,KAAKqZ,kBAAkBhB,GAKtCa,GAAuBA,IAAwBC,KAChDC,aAAuC,EAASA,EAAOjS,QACxD2R,EAAoBM,EAAOjS,KAC3B4R,GAAyB,EAEjC,CAEA,IAAKD,EACD,OAAO9Y,KAAKsZ,uBAAuB,MAEvC,IAAKR,EAAkB7J,iBAAkB,CAGrC,GAAI8J,EACA,UACU/Y,KAAKmX,iBAAiBzC,cAAcoE,EAC9C,CACA,MAAO1U,GACH0U,EAAoBD,EAGpB7Y,KAAK0X,uBAAuB6B,wBAAwBvZ,MAAM,IAAMsD,QAAQ2B,OAAOb,IACnF,CAEJ,OAAI0U,EACO9Y,KAAKwZ,+BAA+BV,GAGpC9Y,KAAKsZ,uBAAuB,KAE3C,CAMA,OALAva,EAAQiB,KAAK0X,uBAAwB1X,KAAM,wBACrCA,KAAKiZ,sCAIPjZ,KAAKoX,cACLpX,KAAKoX,aAAanI,mBAAqB6J,EAAkB7J,iBAClDjP,KAAKsZ,uBAAuBR,GAEhC9Y,KAAKwZ,+BAA+BV,EAC/C,CACA,uBAAMO,CAAkBI,GAgBpB,IAAIL,EAAS,KACb,IAGIA,QAAepZ,KAAK0X,uBAAuBgC,oBAAoB1Z,KAAMyZ,GAAkB,EAC3F,CACA,MAAOrV,SAGGpE,KAAK2Z,iBAAiB,KAChC,CACA,OAAOP,CACX,CACA,oCAAMI,CAA+BrS,GACjC,UACUsD,EAAqBtD,EAC/B,CACA,MAAO/C,GACH,GACI,iCADCA,aAA6B,EAASA,EAAEpG,MAIzC,OAAOgC,KAAKsZ,uBAAuB,KAE3C,CACA,OAAOtZ,KAAKsZ,uBAAuBnS,EACvC,CACA,iBAAAyS,GACI5Z,KAAK8C,aArjEb,WACI,GAAyB,oBAAdzC,UACP,OAAO,KAEX,MAAMwZ,EAAoBxZ,UAC1B,OAECwZ,EAAkBC,WAAaD,EAAkBC,UAAU,IAGxDD,EAAkBE,UAElB,IACR,CAwiE4BC,EACxB,CACA,aAAMC,GACFja,KAAKwX,UAAW,CACpB,CACA,uBAAM0C,CAAkBC,GAGpB,MAAMhT,EAAOgT,EACP9d,EAAKiL,mBAAmB6S,GACxB,KAIN,OAHIhT,GACApI,EAAQoI,EAAKpJ,KAAK4C,OAAOiC,SAAW5C,KAAKW,OAAOiC,OAAQ5C,KAAM,sBAE3DA,KAAK4Y,mBAAmBzR,GAAQA,EAAK6G,OAAOhO,MACvD,CACA,wBAAM4Y,CAAmBzR,EAAMiT,GAA2B,GACtD,IAAIpa,KAAKwX,SAST,OANIrQ,GACApI,EAAQiB,KAAK+B,WAAaoF,EAAKpF,SAAU/B,KAAM,sBAE9Coa,SACKpa,KAAKmX,iBAAiBzC,cAAcvN,GAEvCnH,KAAKmU,OAAMnS,gBACRhC,KAAKsZ,uBAAuBnS,GAClCnH,KAAKqa,qBAAqB,GAElC,CACA,aAAMpR,GASF,aAPMjJ,KAAKmX,iBAAiBzC,cAAc,OAEtC1U,KAAKsa,4BAA8Bta,KAAK0X,+BAClC1X,KAAK2Z,iBAAiB,MAIzB3Z,KAAK4Y,mBAAmB,MAAqC,EACxE,CACA,cAAA5G,CAAeZ,GACX,OAAOpR,KAAKmU,OAAMnS,gBACRhC,KAAK0Y,oBAAoB1G,eAAe/B,GAAamB,GAAa,GAEhF,CACA,mBAAAmJ,GACI,OAAqB,MAAjBva,KAAK+B,SACE/B,KAAK2X,sBAGL3X,KAAK4X,wBAAwB5X,KAAK+B,SAEjD,CACA,sBAAM+T,CAAiBC,GACd/V,KAAKwa,oCACAxa,KAAKya,wBAGf,MAAMvE,EAAiBlW,KAAKwa,6BAG5B,OAAItE,EAAeL,gBACf7V,KAAKsX,wCACEhU,QAAQ2B,OAAOjF,KAAKlB,cAAcT,OAAO,6CAA6G,CAAC,IAE3J6X,EAAeJ,iBAAiBC,EAC3C,CACA,0BAAAyE,GACI,OAAsB,OAAlBxa,KAAK+B,SACE/B,KAAK6X,uBAGL7X,KAAK8X,wBAAwB9X,KAAK+B,SAEjD,CACA,2BAAM0Y,GACF,MAAMhZ,QA9bdO,eAAkCjE,EAAM+D,EAAU,CAAC,GAC/C,OAAOG,EAAmBlE,EAAM,MAA4B,qBAAyD8D,EAAmB9D,EAAM+D,GAClJ,CA4b+B4Y,CAAmB1a,MACpCkW,EAAiB,IAAIlB,GAAmBvT,GACxB,OAAlBzB,KAAK+B,SACL/B,KAAK6X,uBAAyB3B,EAG9BlW,KAAK8X,wBAAwB9X,KAAK+B,UAAYmU,CAEtD,CACA,eAAAyE,GACI,OAAO3a,KAAK0Y,oBAAoBtH,YAAYd,IAChD,CACA,eAAAsK,CAAgB1c,GACZ8B,KAAKlB,cAAgB,IAAIzC,EAAKS,aAAa,OAAQ,WAAYoB,IACnE,CACA,kBAAA2c,CAAmBC,EAAgBvd,EAAOwd,GACtC,OAAO/a,KAAKgb,sBAAsBhb,KAAKgX,sBAAuB8D,EAAgBvd,EAAOwd,EACzF,CACA,sBAAAE,CAAuBtM,EAAU0F,GAC7B,OAAOrU,KAAKmX,iBAAiB/C,aAAazF,EAAU0F,EACxD,CACA,gBAAA6G,CAAiBJ,EAAgBvd,EAAOwd,GACpC,OAAO/a,KAAKgb,sBAAsBhb,KAAKkX,oBAAqB4D,EAAgBvd,EAAOwd,EACvF,CACA,cAAAI,GACI,OAAO,IAAI7X,SAAQ,CAACiR,EAAStP,KACzB,GAAIjF,KAAKgJ,YACLuL,QAEC,CACD,MAAM6G,EAAcpb,KAAK6a,oBAAmB,KACxCO,IACA7G,GAAS,GACVtP,EACP,IAER,CAIA,uBAAMoW,CAAkB9T,GACpB,GAAIvH,KAAKgJ,YAAa,CAClB,MAEMlH,EAAU,CACZoJ,WAAY,YACZoQ,UAAW,eACX/T,QACAmD,cANkB1K,KAAKgJ,YAAYxB,cAQlB,MAAjBxH,KAAK+B,WACLD,EAAQC,SAAW/B,KAAK+B,gBArwCxCC,eAA2BjE,EAAM+D,GAC7B,OAAOG,EAAmBlE,EAAM,OAA8B,2BAAwD8D,EAAmB9D,EAAM+D,GACnJ,CAqwCkByZ,CAAYvb,KAAM8B,EAC5B,CACJ,CACA,MAAA0I,GACI,IAAIlL,EACJ,MAAO,CACHsD,OAAQ5C,KAAKW,OAAOiC,OACpBoW,WAAYhZ,KAAKW,OAAOqY,WACxB1a,QAAS0B,KAAKzB,KACdyK,YAA0C,QAA5B1J,EAAKU,KAAK2Y,oBAAiC,IAAPrZ,OAAgB,EAASA,EAAGkL,SAEtF,CACA,sBAAMmP,CAAiBxS,EAAMkR,GACzB,MAAMmD,QAAwBxb,KAAKiZ,oCAAoCZ,GACvE,OAAgB,OAATlR,EACDqU,EAAgB1J,oBAChB0J,EAAgB7J,eAAexK,EACzC,CACA,yCAAM8R,CAAoCZ,GACtC,IAAKrY,KAAKsa,2BAA4B,CAClC,MAAMmB,EAAYpD,GAAyBpI,GAAaoI,IACpDrY,KAAK0X,uBACT3Y,EAAQ0c,EAAUzb,KAAM,kBACxBA,KAAKsa,iCAAmCnJ,GAAuB9S,OAAO2B,KAAM,CAACiQ,GAAawL,EAASC,uBAAwB,gBAC3H1b,KAAKoX,mBACKpX,KAAKsa,2BAA2B1I,gBAC9C,CACA,OAAO5R,KAAKsa,0BAChB,CACA,wBAAMqB,CAAmBC,GACrB,IAAItc,EAAI6P,EAMR,OAHInP,KAAKuX,sBACCvX,KAAKmU,OAAMnS,eAEa,QAA5B1C,EAAKU,KAAK2Y,oBAAiC,IAAPrZ,OAAgB,EAASA,EAAG2P,oBAAsB2M,EACjF5b,KAAK2Y,cAEkB,QAA5BxJ,EAAKnP,KAAKoX,oBAAiC,IAAPjI,OAAgB,EAASA,EAAGF,oBAAsB2M,EACjF5b,KAAKoX,aAET,IACX,CACA,2BAAM5K,CAAsBrF,GACxB,GAAIA,IAASnH,KAAKgJ,YACd,OAAOhJ,KAAKmU,OAAMnS,SAAYhC,KAAKsZ,uBAAuBnS,IAElE,CAEA,yBAAAsF,CAA0BtF,GAClBA,IAASnH,KAAKgJ,aACdhJ,KAAKqa,qBAEb,CACA,IAAAvJ,GACI,MAAO,GAAG9Q,KAAKW,OAAOqY,cAAchZ,KAAKW,OAAOiC,UAAU5C,KAAKzB,MACnE,CACA,sBAAAqQ,GACI5O,KAAKqX,2BAA4B,EAC7BrX,KAAKgJ,aACLhJ,KAAK2Y,aAAa/J,wBAE1B,CACA,qBAAAC,GACI7O,KAAKqX,2BAA4B,EAC7BrX,KAAKgJ,aACLhJ,KAAK2Y,aAAa9J,uBAE1B,CAEA,gBAAI8J,GACA,OAAO3Y,KAAKgJ,WAChB,CACA,mBAAAqR,GACI,IAAI/a,EAAI6P,EACR,IAAKnP,KAAKuX,eACN,OAEJvX,KAAKkX,oBAAoB2E,KAAK7b,KAAKgJ,aACnC,MAAM8S,EAA4F,QAA9E3M,EAAiC,QAA3B7P,EAAKU,KAAKgJ,mBAAgC,IAAP1J,OAAgB,EAASA,EAAG8L,WAAwB,IAAP+D,EAAgBA,EAAK,KAC3HnP,KAAK+X,kBAAoB+D,IACzB9b,KAAK+X,gBAAkB+D,EACvB9b,KAAKgX,sBAAsB6E,KAAK7b,KAAKgJ,aAE7C,CACA,qBAAAgS,CAAsBe,EAAcjB,EAAgBvd,EAAOwd,GACvD,GAAI/a,KAAKwX,SACL,MAAO,OAEX,MAAMwE,EAA+B,mBAAnBlB,EACZA,EACAA,EAAee,KAAKnK,KAAKoJ,GAC/B,IAAImB,GAAiB,EACrB,MAAMzY,EAAUxD,KAAKuX,eACfjU,QAAQiR,UACRvU,KAAKyX,uBAUX,GATA1Y,EAAQyE,EAASxD,KAAM,kBAGvBwD,EAAQ0Y,MAAK,KACLD,GAGJD,EAAGhc,KAAKgJ,YAAY,IAEM,mBAAnB8R,EAA+B,CACtC,MAAMM,EAAcW,EAAaI,YAAYrB,EAAgBvd,EAAOwd,GACpE,MAAO,KACHkB,GAAiB,EACjBb,GAAa,CAErB,CACK,CACD,MAAMA,EAAcW,EAAaI,YAAYrB,GAC7C,MAAO,KACHmB,GAAiB,EACjBb,GAAa,CAErB,CACJ,CAMA,4BAAM9B,CAAuBnS,GACrBnH,KAAKgJ,aAAehJ,KAAKgJ,cAAgB7B,GACzCnH,KAAK2Y,aAAa9J,wBAElB1H,GAAQnH,KAAKqX,2BACblQ,EAAKyH,yBAET5O,KAAKgJ,YAAc7B,EACfA,QACMnH,KAAK0Y,oBAAoB/G,eAAexK,SAGxCnH,KAAK0Y,oBAAoB5G,mBAEvC,CACA,KAAAqC,CAAMiI,GAIF,OADApc,KAAK+W,WAAa/W,KAAK+W,WAAWmF,KAAKE,EAAQA,GACxCpc,KAAK+W,UAChB,CACA,uBAAI2B,GAEA,OADA3Z,EAAQiB,KAAKsY,mBAAoBtY,KAAM,kBAChCA,KAAKsY,kBAChB,CACA,aAAA+D,CAAcC,GACLA,IAAatc,KAAK8T,WAAWjB,SAASyJ,KAG3Ctc,KAAK8T,WAAWU,KAAK8H,GAGrBtc,KAAK8T,WAAWyI,OAChBvc,KAAKkY,cAAgBtE,GAAkB5T,KAAKW,OAAOkT,eAAgB7T,KAAKwc,kBAC5E,CACA,cAAAA,GACI,OAAOxc,KAAK8T,UAChB,CACA,2BAAMjR,GACF,IAAIvD,EAEJ,MAAMiC,EAAU,CACZ,mBAAwDvB,KAAKkY,eAE7DlY,KAAK1D,IAAImgB,QAAQC,QACjBnb,EAAQ,oBAAwDvB,KAAK1D,IAAImgB,QAAQC,OAGrF,MAAMC,QAGE,QAHyBrd,EAAKU,KAAK4W,yBACtCgG,aAAa,CACdC,UAAU,WACS,IAAPvd,OAAgB,EAASA,EAAGwd,uBACxCH,IACApb,EAAQ,qBAA0Dob,GAGtE,MAAMI,QAAsB/c,KAAKgd,oBAIjC,OAHID,IACAxb,EAAQ,uBAA+Dwb,GAEpExb,CACX,CACA,uBAAMyb,GACF,IAAI1d,EACJ,MAAM2d,QACqC,QADP3d,EAAKU,KAAK6W,wBACzC+F,aAAa,CAAEC,UAAU,WAA4B,IAAPvd,OAAgB,EAASA,EAAG6N,YAQ/E,OAPI8P,aAAiE,EAASA,EAAoB1f,QAthF1G,SAAkBL,KAAQC,GAClBJ,EAAUK,UAAYb,EAAOc,SAAS6f,MACtCngB,EAAUogB,KAAK,SAAS7gB,EAAIkB,iBAAiBN,OAAUC,EAE/D,CAuhFYigB,CAAS,2CAA2CH,EAAoB1f,SAErE0f,aAAiE,EAASA,EAAoB1V,KACzG,EAQJ,SAAS8V,GAAUtf,GACf,OAAO1B,EAAKiL,mBAAmBvJ,EACnC,CAEA,MAAMkZ,GACF,WAAAtY,CAAYZ,GACRiC,KAAKjC,KAAOA,EACZiC,KAAKsd,SAAW,KAChBtd,KAAKmc,YAAc9f,EAAKkhB,iBAAgBD,GAAatd,KAAKsd,SAAWA,GACzE,CACA,QAAIzB,GAEA,OADA9c,EAAQiB,KAAKsd,SAAUtd,KAAKjC,KAAM,kBAC3BiC,KAAKsd,SAASzB,KAAKnK,KAAK1R,KAAKsd,SACxC,EAmBJ,IAAIE,GAAqB,CACrB,YAAMC,GACF,MAAM,IAAIte,MAAM,kCACpB,EACAue,kBAAmB,GACnBC,0BAA2B,GAC3BC,WAAY,IAKhB,SAASC,GAAQ/c,GACb,OAAO0c,GAAmBC,OAAO3c,EACrC,CAUA,SAASgd,GAAsBC,GAC3B,MAAO,KAAKA,IAASvd,KAAKwd,MAAsB,IAAhBxd,KAAKyd,WACzC,CAKA,MAAMC,GAMF,WAAAvf,CAAYwf,GAIRne,KAAKsQ,KAZ8B,uBAanCtQ,KAAKjC,KAAOsf,GAAUc,EAC1B,CAMA,YAAMC,CAAOhC,EAAS,SAAUhV,GAAe,GAoC3C,SAASiX,EAAuBrY,EAASuO,EAAStP,GAC9C,MAAMS,EAAa4Y,OAAO5Y,WACtBG,EAAaH,GACbA,EAAWI,WAAWyY,OAAM,KACxB7Y,EAAWI,WACN0Y,QAAQxY,EAAS,CAAEoW,WACnBF,MAAK3U,IACNgN,EAAQhN,EAAM,IAEbkX,OAAM,KACPlK,EAjEL,eAiEwB,GACrB,IAINtP,EAAO9F,MAAM,0CAErB,CACA,OAAO,IAAImE,SAAQ,CAACiR,EAAStP,MArD7BjD,eAA+BjE,GAC3B,IAAKqJ,EAAc,CACf,GAAqB,MAAjBrJ,EAAKgE,UAAkD,MAA9BhE,EAAK4Z,sBAC9B,OAAO5Z,EAAK4Z,sBAAsB3R,QAEtC,GAAqB,MAAjBjI,EAAKgE,eAC2C4D,IAAhD5H,EAAK6Z,wBAAwB7Z,EAAKgE,UAClC,OAAOhE,EAAK6Z,wBAAwB7Z,EAAKgE,UAAUiE,OAE3D,CACA,OAAO,IAAI1C,SAAQtB,MAAOuS,EAAStP,KAC/BwB,EAAmB1I,EAAM,CACrB2gB,WAAY,kBACZC,QAAS,yBAERzC,MAAKza,IACN,QAA8BkE,IAA1BlE,EAASyE,aAGR,CACD,MAAMvF,EAAS,IAAIoF,EAAgBtE,GAOnC,OANqB,MAAjB1D,EAAKgE,SACLhE,EAAK4Z,sBAAwBhX,EAG7B5C,EAAK6Z,wBAAwB7Z,EAAKgE,UAAYpB,EAE3C4T,EAAQ5T,EAAOqF,QAC1B,CAXIf,EAAO,IAAI9F,MAAM,2CAWrB,IAECsf,OAAMlhB,IACP0H,EAAO1H,EAAM,GACf,GAEV,EAoBIqhB,CAAgB5e,KAAKjC,MAChBme,MAAKlW,IACN,IAAKoB,GAAgBvB,EAAayY,OAAO5Y,YACrC2Y,EAAuBrY,EAASuO,EAAStP,OAExC,CACD,GAAsB,oBAAXqZ,OAEP,YADArZ,EAAO,IAAI9F,MAAM,mDAGrB,IAAI2B,EA/Fb0c,GAAmBG,0BAgGS,IAAf7c,EAAIuF,SACJvF,GAAOkF,GAEX6X,GAAQ/c,GACHob,MAAK,KACNmC,EAAuBrY,EAASuO,EAAStP,EAAO,IAE/CwZ,OAAMlhB,IACP0H,EAAO1H,EAAM,GAErB,KAECkhB,OAAMlhB,IACP0H,EAAO1H,EAAM,GACf,GAEV,EAEJyE,eAAe6c,GAAsB9gB,EAAM+D,EAASsa,EAAQ0C,GAAc,GACtE,MAAMC,EAAW,IAAIb,GAA4BngB,GACjD,IAAIihB,EACJ,IACIA,QAAwBD,EAASX,OAAOhC,EAC5C,CACA,MAAO7e,GACHyhB,QAAwBD,EAASX,OAAOhC,GAAQ,EACpD,CACA,MAAM6C,EAAa9gB,OAAOC,OAAO,CAAC,EAAG0D,GAWrC,OAVKgd,EAID3gB,OAAOC,OAAO6gB,EAAY,CAAE,YAAeD,IAH3C7gB,OAAOC,OAAO6gB,EAAY,CAAED,oBAKhC7gB,OAAOC,OAAO6gB,EAAY,CAAE,WAAc,oBAC1C9gB,OAAOC,OAAO6gB,EAAY,CACtB,iBAAoB,yBAEjBA,CACX,CACAjd,eAAekd,GAAoBC,EAAcrd,EAASsd,EAAYC,GAClE,IAAI/f,EACJ,GACgC,QAD3BA,EAAK6f,EACL5E,6BAA0C,IAAPjb,OAAgB,EAASA,EAAGkH,kBAAkB,2BAA4E,CAC9J,MAAM8Y,QAA6BT,GAAsBM,EAAcrd,EAASsd,EAA2B,eAAfA,GAC5F,OAAOC,EAAaF,EAAcG,EACtC,CAEI,OAAOD,EAAaF,EAAcrd,GAAS2c,OAAMzc,MAAOzE,IACpD,GAAmB,iCAAfA,EAAMS,KAA0F,CAChGuhB,QAAQC,IAAI,GAAGJ,iIACf,MAAME,QAA6BT,GAAsBM,EAAcrd,EAASsd,EAA2B,eAAfA,GAC5F,OAAOC,EAAaF,EAAcG,EACtC,CAEI,OAAOhc,QAAQ2B,OAAO1H,EAC1B,GAGZ,CA6DA,SAASkiB,GAAeC,EAAOC,GAC3B,MAAMrZ,EAAWhK,EAAIsjB,aAAaF,EAAO,QACzC,GAAIpZ,EAASuZ,gBAAiB,CAC1B,MAAM9hB,EAAOuI,EAASsW,eAChBkD,EAAiBxZ,EAASyZ,aAChC,GAAI1jB,EAAK2jB,UAAUF,EAAgBH,QAAmCA,EAAO,CAAC,GAC1E,OAAO5hB,EAGPN,EAAMM,EAAM,sBAEpB,CAEA,OADauI,EAASrF,WAAW,CAAEwb,QAASkD,GAEhD,CAmCA,SAASM,GAAoBliB,EAAM+C,EAAK2b,GACpC,MAAMyD,EAAe7C,GAAUtf,GAC/BgB,EAAQmhB,EAAa/c,iBAAkB+c,EAAc,0BACrDnhB,EAAQ,eAAe0U,KAAK3S,GAAMof,EAAc,2BAChD,MAAMC,KAAqB1D,aAAyC,EAASA,EAAQ0D,iBAC/EvgB,EAAWwgB,GAAgBtf,IAC3B,KAAE4D,EAAI,KAAE2b,GAmBlB,SAA4Bvf,GACxB,MAAMlB,EAAWwgB,GAAgBtf,GAC3Bwf,EAAY,mBAAmBC,KAAKzf,EAAI0f,OAAO5gB,EAASyG,SAC9D,IAAKia,EACD,MAAO,CAAE5b,KAAM,GAAI2b,KAAM,MAE7B,MAAMI,EAAcH,EAAU,GAAGtc,MAAM,KAAK0c,OAAS,GAC/CC,EAAgB,qBAAqBJ,KAAKE,GAChD,GAAIE,EAAe,CACf,MAAMjc,EAAOic,EAAc,GAC3B,MAAO,CAAEjc,OAAM2b,KAAMO,GAAUH,EAAYD,OAAO9b,EAAK2B,OAAS,IACpE,CACK,CACD,MAAO3B,EAAM2b,GAAQI,EAAYzc,MAAM,KACvC,MAAO,CAAEU,OAAM2b,KAAMO,GAAUP,GACnC,CACJ,CAnC2BQ,CAAmB/f,GACpCggB,EAAmB,OAATT,EAAgB,GAAK,IAAIA,IAEzCH,EAAavf,OAAOE,SAAW,CAAEC,IAAK,GAAGlB,MAAa8E,IAAOoc,MAC7DZ,EAAalI,SAASC,mCAAoC,EAC1DiI,EAAapJ,eAAiB3Y,OAAO4iB,OAAO,CACxCrc,OACA2b,OACAzgB,SAAUA,EAASuE,QAAQ,IAAK,IAChCsY,QAASte,OAAO4iB,OAAO,CAAEZ,sBAExBA,GAmCT,WACI,SAASa,IACL,MAAMC,EAAKC,SAASC,cAAc,KAC5BC,EAAMH,EAAGI,MACfJ,EAAGK,UACC,oEACJF,EAAIG,SAAW,QACfH,EAAII,MAAQ,OACZJ,EAAIK,gBAAkB,UACtBL,EAAIM,OAAS,qBACbN,EAAIO,MAAQ,UACZP,EAAIQ,OAAS,MACbR,EAAIS,KAAO,MACXT,EAAIU,OAAS,MACbV,EAAIW,OAAS,QACbX,EAAIY,UAAY,SAChBf,EAAGgB,UAAUC,IAAI,6BACjBhB,SAAS7e,KAAK8f,YAAYlB,EAC9B,CACuB,oBAAZ1B,SAAmD,mBAAjBA,QAAQ6C,MACjD7C,QAAQ6C,KAAK,gIAIK,oBAAX9D,QAA8C,oBAAb4C,WACZ,YAAxBA,SAASmB,WACT/D,OAAOgE,iBAAiB,mBAAoBtB,GAG5CA,IAGZ,CAlEQuB,EAER,CACA,SAASnC,GAAgBtf,GACrB,MAAM0hB,EAAc1hB,EAAI2hB,QAAQ,KAChC,OAAOD,EAAc,EAAI,GAAK1hB,EAAI0f,OAAO,EAAGgC,EAAc,EAC9D,CAkBA,SAAS5B,GAAUE,GACf,IAAKA,EACD,OAAO,KAEX,MAAMT,EAAOvZ,OAAOga,GACpB,OAAI/Z,MAAMsZ,GACC,KAEJA,CACX,CA2DA,MAAMqC,GAEF,WAAA/jB,CAOAuM,EASAyX,GACI3iB,KAAKkL,WAAaA,EAClBlL,KAAK2iB,aAAeA,CACxB,CAMA,MAAAnY,GACI,OAAOvL,EAAU,kBACrB,CAEA,mBAAA2jB,CAAoBC,GAChB,OAAO5jB,EAAU,kBACrB,CAEA,cAAA6jB,CAAeD,EAAOE,GAClB,OAAO9jB,EAAU,kBACrB,CAEA,4BAAA+jB,CAA6BH,GACzB,OAAO5jB,EAAU,kBACrB,EAmBJ+C,eAAeihB,GAAcllB,EAAM+D,GAC/B,OAAOG,EAAmBlE,EAAM,OAA8B,6BAA4D8D,EAAmB9D,EAAM+D,GACvJ,CAMAE,eAAekhB,GAAkBnlB,EAAM+D,GACnC,OAAOG,EAAmBlE,EAAM,OAA8B,sBAA8C+D,EAChH,CAqBAE,eAAemhB,GAAmBplB,EAAM+D,GACpC,OAAOyC,EAAsBxG,EAAM,OAA8B,kCAAwE8D,EAAmB9D,EAAM+D,GACtK,CACAE,eAAeohB,GAAYrlB,EAAM+D,GAC7B,OAAOG,EAAmBlE,EAAM,OAA8B,2BAAyD8D,EAAmB9D,EAAM+D,GACpJ,CAIAE,eAAeqhB,GAAyBtlB,EAAM+D,GAC1C,OAAOshB,GAAYrlB,EAAM+D,EAC7B,CACAE,eAAeshB,GAAwBvlB,EAAM+D,GACzC,OAAOshB,GAAYrlB,EAAM+D,EAC7B,CAsDA,MAAMyhB,WAA4Bb,GAE9B,WAAA/jB,CAEA6kB,EAEAC,EAAWd,EAEXe,EAAY,MACRC,MAAM,WAAsChB,GAC5C3iB,KAAKwjB,OAASA,EACdxjB,KAAKyjB,UAAYA,EACjBzjB,KAAK0jB,UAAYA,CACrB,CAEA,4BAAOE,CAAsBve,EAAO0Q,GAChC,OAAO,IAAIwN,GAAoBle,EAAO0Q,EAAU,WACpD,CAEA,wBAAO8N,CAAkBxe,EAAOye,EAAS/hB,EAAW,MAChD,OAAO,IAAIwhB,GAAoBle,EAAOye,EAAS,YAA2C/hB,EAC9F,CAEA,MAAAyI,GACI,MAAO,CACHnF,MAAOrF,KAAKwjB,OACZzN,SAAU/V,KAAKyjB,UACfd,aAAc3iB,KAAK2iB,aACnB5gB,SAAU/B,KAAK0jB,UAEvB,CASA,eAAO7V,CAASnK,GACZ,MAAMqgB,EAAsB,iBAATrgB,EAAoBnB,KAAKoG,MAAMjF,GAAQA,EAC1D,IAAKqgB,aAAiC,EAASA,EAAI1e,SAAW0e,aAAiC,EAASA,EAAIhO,UAAW,CACnH,GAAyB,aAArBgO,EAAIpB,aACJ,OAAO3iB,KAAK4jB,sBAAsBG,EAAI1e,MAAO0e,EAAIhO,UAEhD,GAAyB,cAArBgO,EAAIpB,aACT,OAAO3iB,KAAK6jB,kBAAkBE,EAAI1e,MAAO0e,EAAIhO,SAAUgO,EAAIhiB,SAEnE,CACA,OAAO,IACX,CAEA,yBAAM6gB,CAAoB7kB,GACtB,OAAQiC,KAAK2iB,cACT,IAAK,WAOD,OAAOzD,GAAoBnhB,EANX,CACZimB,mBAAmB,EACnB3e,MAAOrF,KAAKwjB,OACZzN,SAAU/V,KAAKyjB,UACf/E,WAAY,mBAE0B,qBAAsEyE,IACpH,IAAK,YACD,OAhGhBnhB,eAAqCjE,EAAM+D,GACvC,OAAOyC,EAAsBxG,EAAM,OAA8B,mCAA2E8D,EAAmB9D,EAAM+D,GACzK,CA8FuBmiB,CAAsBlmB,EAAM,CAC/BsH,MAAOrF,KAAKwjB,OACZM,QAAS9jB,KAAKyjB,YAEtB,QACIhmB,EAAMM,EAAM,kBAExB,CAEA,oBAAM+kB,CAAe/kB,EAAM2M,GACvB,OAAQ1K,KAAK2iB,cACT,IAAK,WAQD,OAAOzD,GAAoBnhB,EAPX,CACZ2M,UACAsZ,mBAAmB,EACnB3e,MAAOrF,KAAKwjB,OACZzN,SAAU/V,KAAKyjB,UACf/E,WAAY,mBAE0B,iBAA6DwE,IAC3G,IAAK,YACD,OAlHhBlhB,eAA6CjE,EAAM+D,GAC/C,OAAOyC,EAAsBxG,EAAM,OAA8B,mCAA2E8D,EAAmB9D,EAAM+D,GACzK,CAgHuBoiB,CAA8BnmB,EAAM,CACvC2M,UACArF,MAAOrF,KAAKwjB,OACZM,QAAS9jB,KAAKyjB,YAEtB,QACIhmB,EAAMM,EAAM,kBAExB,CAEA,4BAAAilB,CAA6BjlB,GACzB,OAAOiC,KAAK4iB,oBAAoB7kB,EACpC,EAmBJiE,eAAemiB,GAAcpmB,EAAM+D,GAC/B,OAAOyC,EAAsBxG,EAAM,OAA8B,6BAA8D8D,EAAmB9D,EAAM+D,GAC5J,CA2BA,MAAMsiB,WAAwB1B,GAC1B,WAAA/jB,GACIglB,SAASU,WACTrkB,KAAKskB,aAAe,IACxB,CAEA,kBAAOC,CAAYjiB,GACf,MAAMkiB,EAAO,IAAIJ,GAAgB9hB,EAAO4I,WAAY5I,EAAOqgB,cAyB3D,OAxBIrgB,EAAOoI,SAAWpI,EAAOsK,aAErBtK,EAAOoI,UACP8Z,EAAK9Z,QAAUpI,EAAOoI,SAEtBpI,EAAOsK,cACP4X,EAAK5X,YAActK,EAAOsK,aAG1BtK,EAAOmiB,QAAUniB,EAAOgiB,eACxBE,EAAKC,MAAQniB,EAAOmiB,OAEpBniB,EAAOgiB,eACPE,EAAKF,aAAehiB,EAAOgiB,eAG1BhiB,EAAOoiB,YAAcpiB,EAAOqiB,kBAEjCH,EAAK5X,YAActK,EAAOoiB,WAC1BF,EAAKI,OAAStiB,EAAOqiB,kBAGrBlnB,EAAM,kBAEH+mB,CACX,CAEA,MAAAha,GACI,MAAO,CACHE,QAAS1K,KAAK0K,QACdkC,YAAa5M,KAAK4M,YAClBgY,OAAQ5kB,KAAK4kB,OACbH,MAAOzkB,KAAKykB,MACZH,aAActkB,KAAKskB,aACnBpZ,WAAYlL,KAAKkL,WACjByX,aAAc3iB,KAAK2iB,aAE3B,CAUA,eAAO9U,CAASnK,GACZ,MAAMqgB,EAAsB,iBAATrgB,EAAoBnB,KAAKoG,MAAMjF,GAAQA,GACpD,WAAEwH,EAAU,aAAEyX,GAAiBoB,EAAKpmB,EAAOnB,EAAM2O,OAAO4Y,EAAK,CAAC,aAAc,iBAClF,IAAK7Y,IAAeyX,EAChB,OAAO,KAEX,MAAM6B,EAAO,IAAIJ,GAAgBlZ,EAAYyX,GAM7C,OALA6B,EAAK9Z,QAAU/M,EAAK+M,cAAW/E,EAC/B6e,EAAK5X,YAAcjP,EAAKiP,kBAAejH,EACvC6e,EAAKI,OAASjnB,EAAKinB,OACnBJ,EAAKC,MAAQ9mB,EAAK8mB,MAClBD,EAAKF,aAAe3mB,EAAK2mB,cAAgB,KAClCE,CACX,CAEA,mBAAA5B,CAAoB7kB,GAEhB,OAAOomB,GAAcpmB,EADLiC,KAAK6kB,eAEzB,CAEA,cAAA/B,CAAe/kB,EAAM2M,GACjB,MAAM5I,EAAU9B,KAAK6kB,eAErB,OADA/iB,EAAQ4I,QAAUA,EACXyZ,GAAcpmB,EAAM+D,EAC/B,CAEA,4BAAAkhB,CAA6BjlB,GACzB,MAAM+D,EAAU9B,KAAK6kB,eAErB,OADA/iB,EAAQgjB,YAAa,EACdX,GAAcpmB,EAAM+D,EAC/B,CACA,YAAA+iB,GACI,MAAM/iB,EAAU,CACZijB,WAjGc,mBAkGdf,mBAAmB,GAEvB,GAAIhkB,KAAKskB,aACLxiB,EAAQwiB,aAAetkB,KAAKskB,iBAE3B,CACD,MAAMU,EAAW,CAAC,EACdhlB,KAAK0K,UACLsa,EAAmB,SAAIhlB,KAAK0K,SAE5B1K,KAAK4M,cACLoY,EAAuB,aAAIhlB,KAAK4M,aAEhC5M,KAAK4kB,SACLI,EAA6B,mBAAIhlB,KAAK4kB,QAE1CI,EAAqB,WAAIhlB,KAAKkL,WAC1BlL,KAAKykB,QAAUzkB,KAAKskB,eACpBU,EAAgB,MAAIhlB,KAAKykB,OAE7B3iB,EAAQkjB,SAAW3oB,EAAKqG,YAAYsiB,EACxC,CACA,OAAOljB,CACX,EAgCJ,MAAMmjB,GAA8C,CAChD,eAAqD,kBA4BzD,MAAMC,WAA4BxC,GAC9B,WAAA/jB,CAAY2D,GACRqhB,MAAM,QAAgC,SACtC3jB,KAAKsC,OAASA,CAClB,CAEA,wBAAO6iB,CAAkBC,EAAgBC,GACrC,OAAO,IAAIH,GAAoB,CAAEE,iBAAgBC,oBACrD,CAEA,yBAAOC,CAAmBhgB,EAAaigB,GACnC,OAAO,IAAIL,GAAoB,CAAE5f,cAAaigB,kBAClD,CAEA,mBAAA3C,CAAoB7kB,GAChB,OAtDRiE,eAAuCjE,EAAM+D,GACzC,OAAOyC,EAAsBxG,EAAM,OAA8B,qCAA+E8D,EAAmB9D,EAAM+D,GAC7K,CAoDe0jB,CAAwBznB,EAAMiC,KAAKylB,2BAC9C,CAEA,cAAA3C,CAAe/kB,EAAM2M,GACjB,OAvDR1I,eAAqCjE,EAAM+D,GACvC,MAAML,QAAiB8C,EAAsBxG,EAAM,OAA8B,qCAA+E8D,EAAmB9D,EAAM+D,IACzL,GAAIL,EAAS8jB,eACT,MAAM5hB,EAAiB5F,EAAM,2CAAkF0D,GAEnH,OAAOA,CACX,CAiDeikB,CAAsB3nB,EAAMI,OAAOC,OAAO,CAAEsM,WAAW1K,KAAKylB,4BACvE,CAEA,4BAAAzC,CAA6BjlB,GACzB,OAjDRiE,eAA4CjE,EAAM+D,GAE9C,OAAOyC,EAAsBxG,EAAM,OAA8B,qCAA+E8D,EAAmB9D,EADhJI,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAG0D,GAAU,CAAE6jB,UAAW,YAC4GV,GAC1L,CA8CeW,CAA6B7nB,EAAMiC,KAAKylB,2BACnD,CAEA,wBAAAA,GACI,MAAM,eAAEF,EAAc,YAAEjgB,EAAW,eAAE8f,EAAc,iBAAEC,GAAqBrlB,KAAKsC,OAC/E,OAAIijB,GAAkBjgB,EACX,CAAEigB,iBAAgBjgB,eAEtB,CACHugB,YAAaT,EACbpnB,KAAMqnB,EAEd,CAEA,MAAA7a,GACI,MAAMuZ,EAAM,CACR7Y,WAAYlL,KAAKkL,YAcrB,OAZIlL,KAAKsC,OAAOgD,cACZye,EAAIze,YAActF,KAAKsC,OAAOgD,aAE9BtF,KAAKsC,OAAOijB,iBACZxB,EAAIwB,eAAiBvlB,KAAKsC,OAAOijB,gBAEjCvlB,KAAKsC,OAAO+iB,mBACZtB,EAAIsB,iBAAmBrlB,KAAKsC,OAAO+iB,kBAEnCrlB,KAAKsC,OAAO8iB,iBACZrB,EAAIqB,eAAiBplB,KAAKsC,OAAO8iB,gBAE9BrB,CACX,CAEA,eAAOlW,CAASnK,GACQ,iBAATA,IACPA,EAAOnB,KAAKoG,MAAMjF,IAEtB,MAAM,eAAE0hB,EAAc,iBAAEC,EAAgB,YAAE/f,EAAW,eAAEigB,GAAmB7hB,EAC1E,OAAK2hB,GACAD,GACA9f,GACAigB,EAGE,IAAIL,GAAoB,CAC3BE,iBACAC,mBACA/f,cACAigB,mBANO,IAQf,EAkEJ,MAAMO,GAOF,WAAAnnB,CAAYonB,GACR,IAAIzmB,EAAI6P,EAAIC,EAAIC,EAAIC,EAAIC,EACxB,MAAMyW,EAAe3pB,EAAK4pB,kBAAkB5pB,EAAK6pB,mBAAmBH,IAC9DnjB,EAAoE,QAA1DtD,EAAK0mB,EAA8C,cAAsB,IAAP1mB,EAAgBA,EAAK,KACjGtB,EAAgE,QAAxDmR,EAAK6W,EAA4C,eAAsB,IAAP7W,EAAgBA,EAAK,KAC7FwW,EAtDd,SAAmBQ,GACf,OAAQA,GACJ,IAAK,eACD,MAAO,gBACX,IAAK,gBACD,MAAO,iBACX,IAAK,SACD,MAAO,eACX,IAAK,cACD,MAAO,eACX,IAAK,uBACD,MAAO,0BACX,IAAK,6BACD,MAAO,gCACX,QACI,OAAO,KAEnB,CAqC0BC,CAAgE,QAArDhX,EAAK4W,EAAyC,YAAsB,IAAP5W,EAAgBA,EAAK,MAE/GrQ,EAAQ6D,GAAU5E,GAAQ2nB,EAAW,kBACrC3lB,KAAK4C,OAASA,EACd5C,KAAK2lB,UAAYA,EACjB3lB,KAAKhC,KAAOA,EACZgC,KAAKqmB,YAAmF,QAApEhX,EAAK2W,EAAwD,mBAAsB,IAAP3W,EAAgBA,EAAK,KACrHrP,KAAK8C,aAAsF,QAAtEwM,EAAK0W,EAA0D,oBAAsB,IAAP1W,EAAgBA,EAAK,KACxHtP,KAAK+B,SAA0E,QAA9DwN,EAAKyW,EAAkD,gBAAsB,IAAPzW,EAAgBA,EAAK,IAChH,CAUA,gBAAO+W,CAAUC,GACb,MAAMR,EAnDd,SAAuBjlB,GACnB,MAAMylB,EAAOlqB,EAAK4pB,kBAAkB5pB,EAAK6pB,mBAAmBplB,IAAY,KAElE0lB,EAAiBD,EACjBlqB,EAAK4pB,kBAAkB5pB,EAAK6pB,mBAAmBK,IAAqB,aACpE,KAEAE,EAAcpqB,EAAK4pB,kBAAkB5pB,EAAK6pB,mBAAmBplB,IAAoB,aAIvF,OAH0B2lB,EACpBpqB,EAAK4pB,kBAAkB5pB,EAAK6pB,mBAAmBO,IAAoB,KACnE,OACsBA,GAAeD,GAAkBD,GAAQzlB,CACzE,CAuC2B4lB,CAAcH,GACjC,IACI,OAAO,IAAIT,GAAcC,EAC7B,CACA,MAAOzmB,GACH,OAAO,IACX,CACJ,EAiCJ,MAAMqnB,GACF,WAAAhoB,GAIIqB,KAAKkL,WAAayb,GAAkBC,WACxC,CAmBA,iBAAOC,CAAWxhB,EAAO0Q,GACrB,OAAOwN,GAAoBK,sBAAsBve,EAAO0Q,EAC5D,CAuBA,yBAAO+Q,CAAmBzhB,EAAO0hB,GAC7B,MAAMC,EAAgBlB,GAAcQ,UAAUS,GAE9C,OADAhoB,EAAQioB,EAAe,kBAChBzD,GAAoBM,kBAAkBxe,EAAO2hB,EAAchpB,KAAMgpB,EAAcjlB,SAC1F,EAKJ4kB,GAAkBC,YAAc,WAIhCD,GAAkBM,8BAAgC,WAIlDN,GAAkBO,0BAA4B,YAyB9C,MAAMC,GAMF,WAAAxoB,CAAYuM,GACRlL,KAAKkL,WAAaA,EAElBlL,KAAKonB,oBAAsB,KAE3BpnB,KAAKqnB,iBAAmB,CAAC,CAC7B,CAMA,kBAAAC,CAAmBxkB,GACf9C,KAAKonB,oBAAsBtkB,CAC/B,CAWA,mBAAAykB,CAAoBC,GAEhB,OADAxnB,KAAKqnB,iBAAmBG,EACjBxnB,IACX,CAIA,mBAAAynB,GACI,OAAOznB,KAAKqnB,gBAChB,EAyBJ,MAAMK,WAA0BP,GAC5B,WAAAxoB,GACIglB,SAASU,WAETrkB,KAAK2nB,OAAS,EAClB,CAMA,QAAAC,CAASC,GAKL,OAHK7nB,KAAK2nB,OAAO9U,SAASgV,IACtB7nB,KAAK2nB,OAAOnT,KAAKqT,GAEd7nB,IACX,CAIA,SAAA8nB,GACI,MAAO,IAAI9nB,KAAK2nB,OACpB,EA0CJ,MAAMI,WAAsBL,GAKxB,yBAAOM,CAAmBtkB,GACtB,MAAMqgB,EAAsB,iBAATrgB,EAAoBnB,KAAKoG,MAAMjF,GAAQA,EAE1D,OADA3E,EAAQ,eAAgBglB,GAAO,iBAAkBA,EAAK,kBAC/CK,GAAgBG,YAAYR,EACvC,CAsBA,UAAA8C,CAAWvkB,GACP,OAAOtC,KAAKioB,YAAY9pB,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAGkE,GAAS,CAAEmiB,MAAOniB,EAAO4lB,WACrF,CAEA,WAAAD,CAAY3lB,GAGR,OAFAvD,EAAQuD,EAAOoI,SAAWpI,EAAOsK,YAAa,kBAEvCwX,GAAgBG,YAAYpmB,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAGkE,GAAS,CAAE4I,WAAYlL,KAAKkL,WAAYyX,aAAc3iB,KAAKkL,aAClI,CAMA,2BAAOid,CAAqBC,GACxB,OAAOL,GAAcM,gCAAgCD,EACzD,CAOA,0BAAOE,CAAoB/qB,GACvB,OAAOwqB,GAAcM,gCAAiC9qB,EAAMgI,YAAc,CAAC,EAC/E,CACA,sCAAO8iB,EAAkC7iB,eAAgB+iB,IACrD,IAAKA,EACD,OAAO,KAEX,MAAM,aAAEC,EAAY,iBAAEC,EAAgB,iBAAE9D,EAAgB,aAAEL,EAAY,MAAEG,EAAK,WAAEvZ,GAAeqd,EAC9F,KAAKE,GACA9D,GACA6D,GACAlE,GACD,OAAO,KAEX,IAAKpZ,EACD,OAAO,KAEX,IACI,OAAO,IAAI6c,GAAc7c,GAAY+c,YAAY,CAC7Cvd,QAAS8d,EACT5b,YAAa6b,EACbhE,QACAH,gBAER,CACA,MAAOlgB,GACH,OAAO,IACX,CACJ,EA0DJ,MAAMskB,WAA6BhB,GAC/B,WAAA/oB,GACIglB,MAAM,eACV,CAaA,iBAAOkD,CAAWja,GACd,OAAOwX,GAAgBG,YAAY,CAC/BrZ,WAAYwd,GAAqB9B,YACjCjE,aAAc+F,GAAqBC,wBACnC/b,eAER,CAMA,2BAAOub,CAAqBC,GACxB,OAAOM,GAAqBE,2BAA2BR,EAC3D,CAOA,0BAAOE,CAAoB/qB,GACvB,OAAOmrB,GAAqBE,2BAA4BrrB,EAAMgI,YAAc,CAAC,EACjF,CACA,iCAAOqjB,EAA6BpjB,eAAgB+iB,IAChD,IAAKA,KAAmB,qBAAsBA,GAC1C,OAAO,KAEX,IAAKA,EAAcE,iBACf,OAAO,KAEX,IACI,OAAOC,GAAqB7B,WAAW0B,EAAcE,iBACzD,CACA,MAAOnpB,GACH,OAAO,IACX,CACJ,EAGJopB,GAAqBC,wBAA0B,eAE/CD,GAAqB9B,YAAc,eA2DnC,MAAMiC,WAA2BnB,GAC7B,WAAA/oB,GACIglB,MAAM,cACN3jB,KAAK4nB,SAAS,UAClB,CAcA,iBAAOf,CAAWnc,EAASkC,GACvB,OAAOwX,GAAgBG,YAAY,CAC/BrZ,WAAY2d,GAAmBjC,YAC/BjE,aAAckG,GAAmBC,sBACjCpe,UACAkC,eAER,CAMA,2BAAOub,CAAqBC,GACxB,OAAOS,GAAmBD,2BAA2BR,EACzD,CAOA,0BAAOE,CAAoB/qB,GACvB,OAAOsrB,GAAmBD,2BAA4BrrB,EAAMgI,YAAc,CAAC,EAC/E,CACA,iCAAOqjB,EAA6BpjB,eAAgB+iB,IAChD,IAAKA,EACD,OAAO,KAEX,MAAM,aAAEC,EAAY,iBAAEC,GAAqBF,EAC3C,IAAKC,IAAiBC,EAElB,OAAO,KAEX,IACI,OAAOI,GAAmBhC,WAAW2B,EAAcC,EACvD,CACA,MAAOnpB,GACH,OAAO,IACX,CACJ,EAGJupB,GAAmBC,sBAAwB,aAE3CD,GAAmBjC,YAAc,aA4DjC,MAAMmC,WAA2BrB,GAC7B,WAAA/oB,GACIglB,MAAM,aACV,CAMA,iBAAOkD,CAAWja,GACd,OAAOwX,GAAgBG,YAAY,CAC/BrZ,WAAY6d,GAAmBnC,YAC/BjE,aAAcoG,GAAmBC,sBACjCpc,eAER,CAMA,2BAAOub,CAAqBC,GACxB,OAAOW,GAAmBH,2BAA2BR,EACzD,CAOA,0BAAOE,CAAoB/qB,GACvB,OAAOwrB,GAAmBH,2BAA4BrrB,EAAMgI,YAAc,CAAC,EAC/E,CACA,iCAAOqjB,EAA6BpjB,eAAgB+iB,IAChD,IAAKA,KAAmB,qBAAsBA,GAC1C,OAAO,KAEX,IAAKA,EAAcE,iBACf,OAAO,KAEX,IACI,OAAOM,GAAmBlC,WAAW0B,EAAcE,iBACvD,CACA,MAAOnpB,GACH,OAAO,IACX,CACJ,EAGJypB,GAAmBC,sBAAwB,aAE3CD,GAAmBnC,YAAc,aAsBjC,MAAMqC,WAA2BvG,GAE7B,WAAA/jB,CAAYuM,EAAYoZ,GACpBX,MAAMzY,EAAYA,GAClBlL,KAAKskB,aAAeA,CACxB,CAEA,mBAAA1B,CAAoB7kB,GAEhB,OAAOomB,GAAcpmB,EADLiC,KAAK6kB,eAEzB,CAEA,cAAA/B,CAAe/kB,EAAM2M,GACjB,MAAM5I,EAAU9B,KAAK6kB,eAErB,OADA/iB,EAAQ4I,QAAUA,EACXyZ,GAAcpmB,EAAM+D,EAC/B,CAEA,4BAAAkhB,CAA6BjlB,GACzB,MAAM+D,EAAU9B,KAAK6kB,eAErB,OADA/iB,EAAQgjB,YAAa,EACdX,GAAcpmB,EAAM+D,EAC/B,CAEA,MAAA0I,GACI,MAAO,CACHmY,aAAc3iB,KAAK2iB,aACnBzX,WAAYlL,KAAKkL,WACjBoZ,aAActkB,KAAKskB,aAE3B,CAUA,eAAOzW,CAASnK,GACZ,MAAMqgB,EAAsB,iBAATrgB,EAAoBnB,KAAKoG,MAAMjF,GAAQA,GACpD,WAAEwH,EAAU,aAAEyX,EAAY,aAAE2B,GAAiBP,EACnD,OAAK7Y,GACAyX,GACA2B,GACDpZ,IAAeyX,EAGZ,IAAIsG,GAAmB/d,EAAYoZ,GAF/B,IAGf,CAMA,cAAO4E,CAAQhe,EAAYoZ,GACvB,OAAO,IAAI2E,GAAmB/d,EAAYoZ,EAC9C,CACA,YAAAO,GACI,MAAO,CACHE,WAjEY,mBAkEZf,mBAAmB,EACnBM,aAActkB,KAAKskB,aAE3B,EAyBJ,MAAM6E,WAAyBhC,GAK3B,WAAAxoB,CAAYuM,GACRnM,EAAQmM,EAAWnK,WAZE,SAYgC,kBACrD4iB,MAAMzY,EACV,CAiBA,2BAAOid,CAAqBC,GACxB,OAAOe,GAAiBC,+BAA+BhB,EAC3D,CAOA,0BAAOE,CAAoB/qB,GACvB,OAAO4rB,GAAiBC,+BAAgC7rB,EAAMgI,YAAc,CAAC,EACjF,CAKA,yBAAOyiB,CAAmBtkB,GACtB,MAAMmjB,EAAaoC,GAAmBpb,SAASnK,GAE/C,OADA3E,EAAQ8nB,EAAY,kBACbA,CACX,CACA,qCAAOuC,EAAiC5jB,eAAgB+iB,IACpD,IAAKA,EACD,OAAO,KAEX,MAAM,aAAEjE,EAAY,WAAEpZ,GAAeqd,EACrC,IAAKjE,IAAiBpZ,EAClB,OAAO,KAEX,IACI,OAAO+d,GAAmBC,QAAQhe,EAAYoZ,EAClD,CACA,MAAOlgB,GACH,OAAO,IACX,CACJ,EA0DJ,MAAMilB,WAA4B3B,GAC9B,WAAA/oB,GACIglB,MAAM,cACV,CAOA,iBAAOkD,CAAWtf,EAAOqd,GACrB,OAAOR,GAAgBG,YAAY,CAC/BrZ,WAAYme,GAAoBzC,YAChCjE,aAAc0G,GAAoBC,uBAClC5E,WAAYnd,EACZod,iBAAkBC,GAE1B,CAMA,2BAAOuD,CAAqBC,GACxB,OAAOiB,GAAoBT,2BAA2BR,EAC1D,CAOA,0BAAOE,CAAoB/qB,GACvB,OAAO8rB,GAAoBT,2BAA4BrrB,EAAMgI,YAAc,CAAC,EAChF,CACA,iCAAOqjB,EAA6BpjB,eAAgB+iB,IAChD,IAAKA,EACD,OAAO,KAEX,MAAM,iBAAEE,EAAgB,iBAAE9D,GAAqB4D,EAC/C,IAAKE,IAAqB9D,EACtB,OAAO,KAEX,IACI,OAAO0E,GAAoBxC,WAAW4B,EAAkB9D,EAC5D,CACA,MAAOrlB,GACH,OAAO,IACX,CACJ,EAuBJ0C,eAAeunB,GAAOxrB,EAAM+D,GACxB,OAAOyC,EAAsBxG,EAAM,OAA8B,sBAA8C8D,EAAmB9D,EAAM+D,GAC5I,CAtBAunB,GAAoBC,uBAAyB,cAE7CD,GAAoBzC,YAAc,cAsClC,MAAM4C,GACF,WAAA7qB,CAAY2D,GACRtC,KAAKmH,KAAO7E,EAAO6E,KACnBnH,KAAKkL,WAAa5I,EAAO4I,WACzBlL,KAAKwF,eAAiBlD,EAAOkD,eAC7BxF,KAAKypB,cAAgBnnB,EAAOmnB,aAChC,CACA,iCAAa5Z,CAAqB9R,EAAM0rB,EAAe3Z,EAAiB7D,GAAc,GAClF,MAAM9E,QAAagH,EAAS0B,qBAAqB9R,EAAM+R,EAAiB7D,GAClEf,EAAawe,GAAsB5Z,GAOzC,OANiB,IAAI0Z,GAAmB,CACpCriB,OACA+D,aACA1F,eAAgBsK,EAChB2Z,iBAGR,CACA,0BAAaE,CAAcxiB,EAAMsiB,EAAehoB,SACtC0F,EAAK2H,yBAAyBrN,GAAuB,GAC3D,MAAMyJ,EAAawe,GAAsBjoB,GACzC,OAAO,IAAI+nB,GAAmB,CAC1BriB,OACA+D,aACA1F,eAAgB/D,EAChBgoB,iBAER,EAEJ,SAASC,GAAsBjoB,GAC3B,OAAIA,EAASyJ,WACFzJ,EAASyJ,WAEhB,gBAAiBzJ,EACV,QAEJ,IACX,CAiEA,MAAMmoB,WAAyBvtB,EAAKgI,cAChC,WAAA1F,CAAYZ,EAAMR,EAAOksB,EAAetiB,GACpC,IAAI7H,EACJqkB,MAAMpmB,EAAMS,KAAMT,EAAMU,SACxB+B,KAAKypB,cAAgBA,EACrBzpB,KAAKmH,KAAOA,EAEZhJ,OAAO0rB,eAAe7pB,KAAM4pB,GAAiBE,WAC7C9pB,KAAKuF,WAAa,CACdjH,QAASP,EAAKQ,KACdwD,SAAmC,QAAxBzC,EAAKvB,EAAKgE,gBAA6B,IAAPzC,EAAgBA,OAAKqG,EAChElB,gBAAiBlH,EAAMgI,WAAWd,gBAClCglB,gBAER,CACA,6BAAOM,CAAuBhsB,EAAMR,EAAOksB,EAAetiB,GACtD,OAAO,IAAIyiB,GAAiB7rB,EAAMR,EAAOksB,EAAetiB,EAC5D,EAEJ,SAAS6iB,GAA8CjsB,EAAM0rB,EAAe5C,EAAY1f,GAIpF,OAH0C,mBAAlBsiB,EAClB5C,EAAW7D,6BAA6BjlB,GACxC8oB,EAAWjE,oBAAoB7kB,IACd0gB,OAAMlhB,IACzB,GAAmB,oCAAfA,EAAMS,KACN,MAAM4rB,GAAiBG,uBAAuBhsB,EAAMR,EAAOksB,EAAetiB,GAE9E,MAAM5J,CAAK,GAEnB,CAqBA,SAAS0sB,GAAoBxe,GACzB,OAAO,IAAIye,IAAIze,EACVR,KAAI,EAAGC,gBAAiBA,IACxBU,QAAOue,KAASA,IACzB,CAyCAnoB,eAAeooB,GAAQjjB,EAAM0f,EAAY/d,GAAkB,GACvD,MAAMrH,QAAiBoH,EAAqB1B,EAAM0f,EAAW/D,eAAe3b,EAAKpJ,WAAYoJ,EAAKK,cAAesB,GACjH,OAAO0gB,GAAmBG,cAAcxiB,EAAM,OAAiC1F,EACnF,CACAO,eAAeqoB,GAAoBC,EAAUnjB,EAAMb,SACzCmE,EAAqBtD,GAC3B,MACMnJ,GAAoB,IAAbssB,EACP,0BACA,mBACNvrB,EAJoBkrB,GAAoB9iB,EAAKsE,cAIzB8e,IAAIjkB,KAAcgkB,EAAUnjB,EAAKpJ,KAAMC,EAC/D,CAkBAgE,eAAewoB,GAAgBrjB,EAAM0f,EAAY/d,GAAkB,GAC/D,MAAM,KAAE/K,GAASoJ,EACXsiB,EAAgB,iBACtB,IACI,MAAMhoB,QAAiBoH,EAAqB1B,EAAM6iB,GAA8CjsB,EAAM0rB,EAAe5C,EAAY1f,GAAO2B,GACxI/J,EAAQ0C,EAASiJ,QAAS3M,EAAM,kBAChC,MAAM0sB,EAAS/iB,EAAYjG,EAASiJ,SACpC3L,EAAQ0rB,EAAQ1sB,EAAM,kBACtB,MAAQ2sB,IAAKre,GAAYoe,EAEzB,OADA1rB,EAAQoI,EAAKiE,MAAQiB,EAAStO,EAAM,iBAC7ByrB,GAAmBG,cAAcxiB,EAAMsiB,EAAehoB,EACjE,CACA,MAAO2C,GAKH,KAHuD,yBAAlDA,aAA6B,EAASA,EAAEpG,OACzCP,EAAMM,EAAM,iBAEVqG,CACV,CACJ,CAkBApC,eAAe2oB,GAAsB5sB,EAAM8oB,EAAY/d,GAAkB,GACrE,MAAM2gB,EAAgB,SAChBhoB,QAAiBuoB,GAA8CjsB,EAAM0rB,EAAe5C,GACpFuB,QAAuBoB,GAAmB3Z,qBAAqB9R,EAAM0rB,EAAehoB,GAI1F,OAHKqH,SACK/K,EAAK6a,mBAAmBwP,EAAejhB,MAE1CihB,CACX,CAYApmB,eAAe4oB,GAAqB7sB,EAAM8oB,GACtC,OAAO8D,GAAsBtN,GAAUtf,GAAO8oB,EAClD,CAYA7kB,eAAe6oB,GAAmB1jB,EAAM0f,GACpC,MAAMxf,EAAehL,EAAKiL,mBAAmBH,GAE7C,aADMkjB,IAAoB,EAAOhjB,EAAcwf,EAAW3b,YACnDkf,GAAQ/iB,EAAcwf,EACjC,CAcA7kB,eAAe8oB,GAA6B3jB,EAAM0f,GAC9C,OAAO2D,GAAgBnuB,EAAKiL,mBAAmBH,GAAO0f,EAC1D,CAiFA,MAAMkE,GACF,WAAApsB,CAAYqsB,EAAUvpB,GAClBzB,KAAKgrB,SAAWA,EAChBhrB,KAAKoL,IAAM3J,EAASwpB,gBACpBjrB,KAAKkrB,eAAiB,IAAIrkB,KAAKpF,EAAS0pB,YAAYlkB,cACpDjH,KAAKsL,YAAc7J,EAAS6J,WAChC,CACA,0BAAO8f,CAAoBrtB,EAAMstB,GAC7B,MAAI,cAAeA,EACRC,GAAyBF,oBAAoBrtB,EAAMstB,GAErD,aAAcA,EACZE,GAAwBH,oBAAoBrtB,EAAMstB,GAEtD5tB,EAAMM,EAAM,iBACvB,EAEJ,MAAMutB,WAAiCP,GACnC,WAAApsB,CAAY8C,GACRkiB,MAAM,QAA8BliB,GACpCzB,KAAKsF,YAAc7D,EAAS+pB,SAChC,CACA,0BAAOJ,CAAoBvI,EAAOwI,GAC9B,OAAO,IAAIC,GAAyBD,EACxC,EAEJ,MAAME,WAAgCR,GAClC,WAAApsB,CAAY8C,GACRkiB,MAAM,OAA4BliB,EACtC,CACA,0BAAO2pB,CAAoBvI,EAAOwI,GAC9B,OAAO,IAAIE,GAAwBF,EACvC,EAmBJ,SAASI,GAAgC1tB,EAAM+D,EAAS4pB,GACpD,IAAIpsB,EACJP,GAA2C,QAAjCO,EAAKosB,EAAmB5qB,WAAwB,IAAPxB,OAAgB,EAASA,EAAG+G,QAAU,EAAGtI,EAAM,wBAClGgB,OAAwD,IAAzC2sB,EAAmBC,mBAC9BD,EAAmBC,kBAAkBtlB,OAAS,EAAGtI,EAAM,+BAC3D+D,EAAQukB,YAAcqF,EAAmB5qB,IACzCgB,EAAQ6pB,kBAAoBD,EAAmBC,kBAC/C7pB,EAAQ8pB,mBAAqBF,EAAmBG,gBAC5CH,EAAmBI,MACnB/sB,EAAQ2sB,EAAmBI,IAAIC,SAAS1lB,OAAS,EAAGtI,EAAM,yBAC1D+D,EAAQkqB,YAAcN,EAAmBI,IAAIC,UAE7CL,EAAmBO,UACnBltB,EAAQ2sB,EAAmBO,QAAQC,YAAY7lB,OAAS,EAAGtI,EAAM,4BACjE+D,EAAQqqB,kBAAoBT,EAAmBO,QAAQG,WACvDtqB,EAAQuqB,0BACJX,EAAmBO,QAAQK,eAC/BxqB,EAAQyqB,mBAAqBb,EAAmBO,QAAQC,YAEhE,CA+BAlqB,eAAewqB,GAAsBzuB,GACjC,MAAMmiB,EAAe7C,GAAUtf,GAC3BmiB,EAAa1F,oCACP0F,EAAazF,uBAE3B,CA2FAzY,eAAeyqB,GAAgB1uB,EAAM+lB,GACjC,MAAM4I,EAAcrwB,EAAKiL,mBAAmBvJ,GACtC0D,QAAiBwhB,GAAcyJ,EAAa,CAAE5I,YAO9C6B,EAAYlkB,EAASkrB,YAE3B,OADA5tB,EAAQ4mB,EAAW+G,EAAa,kBACxB/G,GACJ,IAAK,eACD,MACJ,IAAK,0BACD5mB,EAAQ0C,EAASmrB,SAAUF,EAAa,kBACxC,MACJ,IAAK,gCACD3tB,EAAQ0C,EAASorB,QAASH,EAAa,kBAE3C,QACI3tB,EAAQ0C,EAAS4D,MAAOqnB,EAAa,kBAG7C,IAAII,EAAkB,KAItB,OAHIrrB,EAASorB,UACTC,EAAkB/B,GAAoBK,oBAAoB/N,GAAUqP,GAAcjrB,EAASorB,UAExF,CACHE,KAAM,CACF1nB,OAAiC,4BAAzB5D,EAASkrB,YACXlrB,EAASmrB,SACTnrB,EAAS4D,QAAU,KACzB2nB,eAAyC,4BAAzBvrB,EAASkrB,YACnBlrB,EAAS4D,MACT5D,EAASmrB,WAAa,KAC5BE,mBAEJnH,YAER,CA4dA3jB,eAAeirB,GAAsB9lB,EAAM9B,EAAO0Q,GAC9C,MAAM,KAAEhY,GAASoJ,EAEXrF,EAAU,CACZ4I,cAFkBvD,EAAKK,aAGvBwc,mBAAmB,GAEnB3e,IACAvD,EAAQuD,MAAQA,GAEhB0Q,IACAjU,EAAQiU,SAAWA,GAEvB,MAAMtU,QAAiBoH,EAAqB1B,EAnqFhDnF,eAAmCjE,EAAM+D,GACrC,OAAOG,EAAmBlE,EAAM,OAA8B,sBAAuD+D,EACzH,CAiqFsDorB,CAAoBnvB,EAAM+D,UACtEqF,EAAK2H,yBAAyBrN,GAAuB,EAC/D,CA+DA,MAAM0rB,GACF,WAAAxuB,CAAYyuB,EAAWliB,EAAYmiB,EAAU,CAAC,GAC1CrtB,KAAKotB,UAAYA,EACjBptB,KAAKkL,WAAaA,EAClBlL,KAAKqtB,QAAUA,CACnB,EAEJ,MAAMC,WAAgDH,GAClD,WAAAxuB,CAAYyuB,EAAWliB,EAAYmiB,EAASE,GACxC5J,MAAMyJ,EAAWliB,EAAYmiB,GAC7BrtB,KAAKutB,SAAWA,CACpB,EAEJ,MAAMC,WAAmCL,GACrC,WAAAxuB,CAAYyuB,EAAWC,GACnB1J,MAAMyJ,EAAW,eAA0CC,EAC/D,EAEJ,MAAMI,WAAiCH,GACnC,WAAA3uB,CAAYyuB,EAAWC,GACnB1J,MAAMyJ,EAAW,aAAsCC,EAAsF,iBAArEA,aAAyC,EAASA,EAAQK,OAAsBL,aAAyC,EAASA,EAAQK,MAAQ,KAC9N,EAEJ,MAAMC,WAAiCR,GACnC,WAAAxuB,CAAYyuB,EAAWC,GACnB1J,MAAMyJ,EAAW,aAAsCC,EAC3D,EAEJ,MAAMO,WAAkCN,GACpC,WAAA3uB,CAAYyuB,EAAWC,EAASQ,GAC5BlK,MAAMyJ,EAAW,cAAwCC,EAASQ,EACtE,EA2IJ,SAAS3S,GAAiBnd,EAAM+c,EAAgBvd,EAAOwd,GACnD,OAAO1e,EAAKiL,mBAAmBvJ,GAAMmd,iBAAiBJ,EAAgBvd,EAAOwd,EACjF,CAWA,SAASE,GAAuBld,EAAM4Q,EAAU0F,GAC5C,OAAOhY,EAAKiL,mBAAmBvJ,GAAMkd,uBAAuBtM,EAAU0F,EAC1E,CAwGA,MAAMyZ,GACF,WAAAnvB,CAAY2R,EAAMuW,EAAY1f,GAC1BnH,KAAKsQ,KAAOA,EACZtQ,KAAK6mB,WAAaA,EAClB7mB,KAAKmH,KAAOA,CAChB,CACA,mBAAO4mB,CAAarjB,EAASvD,GACzB,OAAO,IAAI2mB,GAAuB,SAA8CpjB,EAASvD,EAC7F,CACA,gCAAO6mB,CAA0BC,GAC7B,OAAO,IAAIH,GAAuB,SAA+CG,EACrF,CACA,MAAAzjB,GAII,MAAO,CACH0jB,mBAAoB,CAChB,CALkB,WAAdluB,KAAKsQ,KACX,UACA,qBAGStQ,KAAK6mB,YAGxB,CACA,eAAOhZ,CAASkW,GACZ,IAAIzkB,EAAI6P,EACR,GAAI4U,aAAiC,EAASA,EAAImK,mBAAoB,CAClE,GAAsC,QAAjC5uB,EAAKykB,EAAImK,0BAAuC,IAAP5uB,OAAgB,EAASA,EAAG6uB,kBACtE,OAAOL,GAAuBE,0BAA0BjK,EAAImK,mBAAmBC,mBAE9E,GAAsC,QAAjChf,EAAK4U,EAAImK,0BAAuC,IAAP/e,OAAgB,EAASA,EAAGzE,QAC3E,OAAOojB,GAAuBC,aAAahK,EAAImK,mBAAmBxjB,QAE1E,CACA,OAAO,IACX,EAmBJ,MAAM0jB,GACF,WAAAzvB,CAAY0vB,EAASC,EAAOC,GACxBvuB,KAAKquB,QAAUA,EACfruB,KAAKsuB,MAAQA,EACbtuB,KAAKuuB,eAAiBA,CAC1B,CAEA,iBAAOC,CAAWrQ,EAAY5gB,GAC1B,MAAMQ,EAAOsf,GAAUc,GACjB3Z,EAAiBjH,EAAMgI,WAAWd,gBAClC6pB,GAAS9pB,EAAeqoB,SAAW,IAAI5hB,KAAIogB,GAAcN,GAAoBK,oBAAoBrtB,EAAMstB,KAC7GtsB,EAAQyF,EAAeypB,qBAAsBlwB,EAAM,kBACnD,MAAMswB,EAAUP,GAAuBE,0BAA0BxpB,EAAeypB,sBAChF,OAAO,IAAIG,GAAwBC,EAASC,GAAOtsB,MAAOhD,IACtD,MAAMyvB,QAAoBzvB,EAAU0vB,SAAS3wB,EAAMswB,UAE5C7pB,EAAeqoB,eACfroB,EAAeypB,qBAEtB,MAAMne,EAAkB3R,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAGoG,GAAiB,CAAEkG,QAAS+jB,EAAY/jB,QAASiC,aAAc8hB,EAAY9hB,eAEnI,OAAQpP,EAAMksB,eACV,IAAK,SACD,MAAMrB,QAAuBoB,GAAmB3Z,qBAAqB9R,EAAMR,EAAMksB,cAAe3Z,GAEhG,aADM/R,EAAK6a,mBAAmBwP,EAAejhB,MACtCihB,EACX,IAAK,iBAED,OADArpB,EAAQxB,EAAM4J,KAAMpJ,EAAM,kBACnByrB,GAAmBG,cAAcpsB,EAAM4J,KAAM5J,EAAMksB,cAAe3Z,GAC7E,QACIrS,EAAMM,EAAM,kBACpB,GAER,CACA,mBAAM4wB,CAAcC,GAChB,MAAM5vB,EAAY4vB,EAClB,OAAO5uB,KAAKuuB,eAAevvB,EAC/B,EAqDJ,MAAM6vB,GACF,WAAAlwB,CAAYwI,GACRnH,KAAKmH,KAAOA,EACZnH,KAAK8uB,gBAAkB,GACvB3nB,EAAKuH,WAAUF,IACPA,EAASqe,UACT7sB,KAAK8uB,gBAAkBtgB,EAASqe,QAAQ5hB,KAAIogB,GAAcN,GAAoBK,oBAAoBjkB,EAAKpJ,KAAMstB,KACjH,GAER,CACA,gBAAO0D,CAAU5nB,GACb,OAAO,IAAI0nB,GAAoB1nB,EACnC,CACA,gBAAM6nB,GACF,OAAOlB,GAAuBC,mBAAmB/tB,KAAKmH,KAAKK,aAAcxH,KAAKmH,KAClF,CACA,YAAM8nB,CAAOL,EAAiBtjB,GAC1B,MAAMtM,EAAY4vB,EACZP,QAAiBruB,KAAKgvB,aACtBE,QAA4BrmB,EAAqB7I,KAAKmH,KAAMnI,EAAU0vB,SAAS1uB,KAAKmH,KAAKpJ,KAAMswB,EAAS/iB,IAO9G,aAJMtL,KAAKmH,KAAK2H,yBAAyBogB,GAIlClvB,KAAKmH,KAAKoF,QACrB,CACA,cAAM4iB,CAASC,GACX,MAAMnE,EAAuC,iBAAdmE,EAAyBA,EAAYA,EAAUhkB,IACxEV,QAAgB1K,KAAKmH,KAAKK,aAChC,IACI,MAAMsI,QAAwBjH,EAAqB7I,KAAKmH,MApC/CpJ,EAoCiEiC,KAAKmH,KAAKpJ,KApCrE+D,EAoC2E,CACtF4I,UACAugB,mBArCLhpB,EAAmBlE,EAAM,OAA8B,sCAAmE8D,EAAmB9D,EAAM+D,MAwClJ9B,KAAK8uB,gBAAkB9uB,KAAK8uB,gBAAgBljB,QAAO,EAAGR,SAAUA,IAAQ6f,UAKlEjrB,KAAKmH,KAAK2H,yBAAyBgB,SACnC9P,KAAKmH,KAAKoF,QACpB,CACA,MAAOnI,GACH,MAAMA,CACV,CAnDR,IAAqBrG,EAAM+D,CAoDvB,EAEJ,MAAMutB,GAAuB,IAAIC,QAmBjC,MAAMC,GAAwB,QAqB9B,MAAMC,GACF,WAAA7wB,CAAY8wB,EAAkBnf,GAC1BtQ,KAAKyvB,iBAAmBA,EACxBzvB,KAAKsQ,KAAOA,CAChB,CACA,YAAAE,GACI,IACI,OAAKxQ,KAAKuQ,SAGVvQ,KAAKuQ,QAAQmf,QAAQH,GAAuB,KAC5CvvB,KAAKuQ,QAAQof,WAAWJ,IACjBjsB,QAAQiR,SAAQ,IAJZjR,QAAQiR,SAAQ,EAK/B,CACA,MAAOjV,GACH,OAAOgE,QAAQiR,SAAQ,EAC3B,CACJ,CACA,IAAA9D,CAAK9N,EAAK+N,GAEN,OADA1Q,KAAKuQ,QAAQmf,QAAQ/sB,EAAKJ,KAAKC,UAAUkO,IAClCpN,QAAQiR,SACnB,CACA,IAAA5D,CAAKhO,GACD,MAAMe,EAAO1D,KAAKuQ,QAAQqf,QAAQjtB,GAClC,OAAOW,QAAQiR,QAAQ7Q,EAAOnB,KAAKoG,MAAMjF,GAAQ,KACrD,CACA,OAAAkN,CAAQjO,GAEJ,OADA3C,KAAKuQ,QAAQof,WAAWhtB,GACjBW,QAAQiR,SACnB,CACA,WAAIhE,GACA,OAAOvQ,KAAKyvB,kBAChB,EA2BJ,MAAMI,WAAgCL,GAClC,WAAA7wB,GACIglB,OAAM,IAAMrF,OAAOwR,cAAc,SACjC9vB,KAAKwR,kBAAoB,CAACue,EAAOC,IAAShwB,KAAKiwB,eAAeF,EAAOC,GACrEhwB,KAAKkwB,UAAY,CAAC,EAClBlwB,KAAKmwB,WAAa,CAAC,EAGnBnwB,KAAKowB,UAAY,KAEjBpwB,KAAKqwB,4BAlBb,WACI,MAAMzd,EAAKvW,EAAKmX,QAChB,OAAON,GAAUN,IAAOc,GAAOd,EACnC,CAe2C0d,IAznJ3C,WACI,IAGI,SAAUhS,QAAUA,SAAWA,OAAOiS,IAC1C,CACA,MAAOnsB,GACH,OAAO,CACX,CACJ,CAgnJ4EosB,GAEpExwB,KAAKywB,kBAAoB9c,KACzB3T,KAAKyS,uBAAwB,CACjC,CACA,iBAAAie,CAAkB1U,GAEd,IAAK,MAAMrZ,KAAOxE,OAAOwyB,KAAK3wB,KAAKkwB,WAAY,CAE3C,MAAMU,EAAW5wB,KAAKuQ,QAAQqf,QAAQjtB,GAChCkuB,EAAW7wB,KAAKmwB,WAAWxtB,GAG7BiuB,IAAaC,GACb7U,EAAGrZ,EAAKkuB,EAAUD,EAE1B,CACJ,CACA,cAAAX,CAAeF,EAAOC,GAAO,GAEzB,IAAKD,EAAMptB,IAIP,YAHA3C,KAAK0wB,mBAAkB,CAAC/tB,EAAKmuB,EAAWF,KACpC5wB,KAAK+wB,gBAAgBpuB,EAAKiuB,EAAS,IAI3C,MAAMjuB,EAAMotB,EAAMptB,IAelB,GAZIqtB,EAGAhwB,KAAKgxB,iBAKLhxB,KAAKixB,cAILjxB,KAAKqwB,4BAA6B,CAElC,MAAMa,EAAclxB,KAAKuQ,QAAQqf,QAAQjtB,GAEzC,GAAIotB,EAAMa,WAAaM,EACI,OAAnBnB,EAAMa,SAEN5wB,KAAKuQ,QAAQmf,QAAQ/sB,EAAKotB,EAAMa,UAIhC5wB,KAAKuQ,QAAQof,WAAWhtB,QAG3B,GAAI3C,KAAKmwB,WAAWxtB,KAASotB,EAAMa,WAAaZ,EAEjD,MAER,CACA,MAAMmB,EAAmB,KAGrB,MAAMD,EAAclxB,KAAKuQ,QAAQqf,QAAQjtB,IACpCqtB,GAAQhwB,KAAKmwB,WAAWxtB,KAASuuB,IAKtClxB,KAAK+wB,gBAAgBpuB,EAAKuuB,EAAY,EAEpCA,EAAclxB,KAAKuQ,QAAQqf,QAAQjtB,GA3sJtCtG,EAAK+0B,QAAoC,KAA1BlQ,SAASmQ,cA6sJvBH,IAAgBnB,EAAMa,UACtBb,EAAMa,WAAab,EAAMc,SAKzB3rB,WAAWisB,EA1Fe,IA6F1BA,GAER,CACA,eAAAJ,CAAgBpuB,EAAK+N,GACjB1Q,KAAKmwB,WAAWxtB,GAAO+N,EACvB,MAAMwf,EAAYlwB,KAAKkwB,UAAUvtB,GACjC,GAAIutB,EACA,IAAK,MAAMoB,KAAY3hB,MAAM4hB,KAAKrB,GAC9BoB,EAAS5gB,EAAQnO,KAAKoG,MAAM+H,GAASA,EAGjD,CACA,YAAA8gB,GACIxxB,KAAKixB,cACLjxB,KAAKowB,UAAYqB,aAAY,KACzBzxB,KAAK0wB,mBAAkB,CAAC/tB,EAAKkuB,EAAUD,KACnC5wB,KAAKiwB,eAAe,IAAIyB,aAAa,UAAW,CAC5C/uB,MACAkuB,WACAD,cAEO,EAAK,GAClB,GArHiB,IAuH3B,CACA,WAAAK,GACQjxB,KAAKowB,YACLuB,cAAc3xB,KAAKowB,WACnBpwB,KAAKowB,UAAY,KAEzB,CACA,cAAAwB,GACItT,OAAOgE,iBAAiB,UAAWtiB,KAAKwR,kBAC5C,CACA,cAAAwf,GACI1S,OAAOuT,oBAAoB,UAAW7xB,KAAKwR,kBAC/C,CACA,YAAAX,CAAalO,EAAK2uB,GAC6B,IAAvCnzB,OAAOwyB,KAAK3wB,KAAKkwB,WAAW7pB,SAKxBrG,KAAKywB,kBACLzwB,KAAKwxB,eAGLxxB,KAAK4xB,kBAGR5xB,KAAKkwB,UAAUvtB,KAChB3C,KAAKkwB,UAAUvtB,GAAO,IAAIunB,IAE1BlqB,KAAKmwB,WAAWxtB,GAAO3C,KAAKuQ,QAAQqf,QAAQjtB,IAEhD3C,KAAKkwB,UAAUvtB,GAAKuf,IAAIoP,EAC5B,CACA,eAAAtgB,CAAgBrO,EAAK2uB,GACbtxB,KAAKkwB,UAAUvtB,KACf3C,KAAKkwB,UAAUvtB,GAAKmvB,OAAOR,GACM,IAA7BtxB,KAAKkwB,UAAUvtB,GAAKovB,aACb/xB,KAAKkwB,UAAUvtB,IAGa,IAAvCxE,OAAOwyB,KAAK3wB,KAAKkwB,WAAW7pB,SAC5BrG,KAAKgxB,iBACLhxB,KAAKixB,cAEb,CAEA,UAAMxgB,CAAK9N,EAAK+N,SACNiT,MAAMlT,KAAK9N,EAAK+N,GACtB1Q,KAAKmwB,WAAWxtB,GAAOJ,KAAKC,UAAUkO,EAC1C,CACA,UAAMC,CAAKhO,GACP,MAAM+N,QAAciT,MAAMhT,KAAKhO,GAE/B,OADA3C,KAAKmwB,WAAWxtB,GAAOJ,KAAKC,UAAUkO,GAC/BA,CACX,CACA,aAAME,CAAQjO,SACJghB,MAAM/S,QAAQjO,UACb3C,KAAKmwB,WAAWxtB,EAC3B,EAEJktB,GAAwBvf,KAAO,QAO/B,MAAM0hB,GAA0BnC,GAkBhC,MAAMoC,WAAkCzC,GACpC,WAAA7wB,GACIglB,OAAM,IAAMrF,OAAO4T,gBAAgB,UACvC,CACA,YAAArhB,CAAaC,EAAMC,GAGnB,CACA,eAAAC,CAAgBF,EAAMC,GAGtB,EAEJkhB,GAA0B3hB,KAAO,UAOjC,MAAM6hB,GAA4BF,GA6DlC,MAAMG,GACF,WAAAzzB,CAAY0zB,GACRryB,KAAKqyB,YAAcA,EACnBryB,KAAKsyB,YAAc,CAAC,EACpBtyB,KAAKwR,kBAAoBxR,KAAKuyB,YAAY7gB,KAAK1R,KACnD,CAOA,mBAAOiQ,CAAaoiB,GAIhB,MAAMG,EAAmBxyB,KAAKyyB,UAAUC,MAAKC,GAAYA,EAASC,cAAcP,KAChF,GAAIG,EACA,OAAOA,EAEX,MAAMK,EAAc,IAAIT,GAASC,GAEjC,OADAryB,KAAKyyB,UAAUje,KAAKqe,GACbA,CACX,CACA,aAAAD,CAAcP,GACV,OAAOryB,KAAKqyB,cAAgBA,CAChC,CAWA,iBAAME,CAAYxC,GACd,MAAM+C,EAAe/C,GACf,QAAEgD,EAAO,UAAEC,EAAS,KAAEjG,GAAS+F,EAAa/F,KAC5CkG,EAAWjzB,KAAKsyB,YAAYU,GAClC,KAAMC,aAA2C,EAASA,EAASlB,MAC/D,OAEJe,EAAaI,MAAM,GAAGC,YAAY,CAC9Bnd,OAAQ,MACR+c,UACAC,cAEJ,MAAMI,EAAWzjB,MAAM4hB,KAAK0B,GAAUhoB,KAAIjJ,MAAOqxB,GAAYA,EAAQP,EAAaQ,OAAQvG,KACpFtrB,QAxFd,SAAqB2xB,GACjB,OAAO9vB,QAAQ8O,IAAIghB,EAASnoB,KAAIjJ,MAAOwB,IACnC,IAEI,MAAO,CACH+vB,WAAW,EACX7iB,YAHgBlN,EAKxB,CACA,MAAOgwB,GACH,MAAO,CACHD,WAAW,EACXC,SAER,KAER,CAwE+BC,CAAYL,GACnCN,EAAaI,MAAM,GAAGC,YAAY,CAC9Bnd,OAAQ,OACR+c,UACAC,YACAvxB,YAER,CAQA,UAAAiyB,CAAWV,EAAWW,GAC2B,IAAzCx1B,OAAOwyB,KAAK3wB,KAAKsyB,aAAajsB,QAC9BrG,KAAKqyB,YAAY/P,iBAAiB,UAAWtiB,KAAKwR,mBAEjDxR,KAAKsyB,YAAYU,KAClBhzB,KAAKsyB,YAAYU,GAAa,IAAI9I,KAEtClqB,KAAKsyB,YAAYU,GAAW9Q,IAAIyR,EACpC,CAQA,YAAAC,CAAaZ,EAAWW,GAChB3zB,KAAKsyB,YAAYU,IAAcW,GAC/B3zB,KAAKsyB,YAAYU,GAAWlB,OAAO6B,GAElCA,GAAqD,IAArC3zB,KAAKsyB,YAAYU,GAAWjB,aACtC/xB,KAAKsyB,YAAYU,GAEiB,IAAzC70B,OAAOwyB,KAAK3wB,KAAKsyB,aAAajsB,QAC9BrG,KAAKqyB,YAAYR,oBAAoB,UAAW7xB,KAAKwR,kBAE7D,EAoBJ,SAASqiB,GAAiB9V,EAAS,GAAI+V,EAAS,IAC5C,IAAI7V,EAAS,GACb,IAAK,IAAIxH,EAAI,EAAGA,EAAIqd,EAAQrd,IACxBwH,GAAUzd,KAAKwd,MAAsB,GAAhBxd,KAAKyd,UAE9B,OAAOF,EAASE,CACpB,CAxBAmU,GAASK,UAAY,GA8CrB,MAAMsB,GACF,WAAAp1B,CAAYq1B,GACRh0B,KAAKg0B,OAASA,EACdh0B,KAAKizB,SAAW,IAAI/I,GACxB,CAMA,oBAAA+J,CAAqBZ,GACbA,EAAQa,iBACRb,EAAQa,eAAeC,MAAMtC,oBAAoB,UAAWwB,EAAQe,WACpEf,EAAQa,eAAeC,MAAME,SAEjCr0B,KAAKizB,SAASnB,OAAOuB,EACzB,CAcA,WAAMiB,CAAMtB,EAAWjG,EAAMwH,EAAU,IACnC,MAAML,EAA2C,oBAAnBM,eAAiC,IAAIA,eAAmB,KACtF,IAAKN,EACD,MAAM,IAAI/0B,MAAM,0BAMpB,IAAIs1B,EACApB,EACJ,OAAO,IAAI/vB,SAAQ,CAACiR,EAAStP,KACzB,MAAM8tB,EAAUc,GAAiB,GAAI,IACrCK,EAAeC,MAAMO,QACrB,MAAMC,EAAWzvB,YAAW,KACxBD,EAAO,IAAI9F,MAAM,qBAA2D,GAC7Eo1B,GACHlB,EAAU,CACNa,iBACA,SAAAE,CAAUrE,GACN,MAAM+C,EAAe/C,EACrB,GAAI+C,EAAa/F,KAAKgG,UAAYA,EAGlC,OAAQD,EAAa/F,KAAK/W,QACtB,IAAK,MAED7Q,aAAawvB,GACbF,EAAkBvvB,YAAW,KACzBD,EAAO,IAAI9F,MAAM,WAAuC,GACzD,KACH,MACJ,IAAK,OAEDgG,aAAasvB,GACblgB,EAAQue,EAAa/F,KAAKtrB,UAC1B,MACJ,QACI0D,aAAawvB,GACbxvB,aAAasvB,GACbxvB,EAAO,IAAI9F,MAAM,qBAG7B,GAEJa,KAAKizB,SAAS/Q,IAAImR,GAClBa,EAAeC,MAAM7R,iBAAiB,UAAW+Q,EAAQe,WACzDp0B,KAAKg0B,OAAOb,YAAY,CACpBH,YACAD,UACAhG,QACD,CAACmH,EAAeU,OAAO,IAC3BC,SAAQ,KACHxB,GACArzB,KAAKi0B,qBAAqBZ,EAC9B,GAER,EAuBJ,SAASyB,KACL,OAAOxW,MACX,CAqBA,SAASyW,KACL,YAAkD,IAAnCD,KAA6B,mBACF,mBAA/BA,KAAyB,aACxC,CAqCA,MAAME,GAAU,yBAEVC,GAAsB,uBACtBC,GAAkB,YAOxB,MAAMC,GACF,WAAAx2B,CAAYmD,GACR9B,KAAK8B,QAAUA,CACnB,CACA,SAAAszB,GACI,OAAO,IAAI9xB,SAAQ,CAACiR,EAAStP,KACzBjF,KAAK8B,QAAQwgB,iBAAiB,WAAW,KACrC/N,EAAQvU,KAAK8B,QAAQsX,OAAO,IAEhCpZ,KAAK8B,QAAQwgB,iBAAiB,SAAS,KACnCrd,EAAOjF,KAAK8B,QAAQvE,MAAM,GAC5B,GAEV,EAEJ,SAAS83B,GAAeC,EAAIC,GACxB,OAAOD,EACFE,YAAY,CAACP,IAAsBM,EAAc,YAAc,YAC/DE,YAAYR,GACrB,CAKA,SAASS,KACL,MAAM5zB,EAAU6zB,UAAUC,KAAKZ,GAlChB,GAmCf,OAAO,IAAI1xB,SAAQ,CAACiR,EAAStP,KACzBnD,EAAQwgB,iBAAiB,SAAS,KAC9Brd,EAAOnD,EAAQvE,MAAM,IAEzBuE,EAAQwgB,iBAAiB,iBAAiB,KACtC,MAAMgT,EAAKxzB,EAAQsX,OACnB,IACIkc,EAAGO,kBAAkBZ,GAAqB,CAAEa,QAASZ,IACzD,CACA,MAAO9wB,GACHa,EAAOb,EACX,KAEJtC,EAAQwgB,iBAAiB,WAAWtgB,UAChC,MAAMszB,EAAKxzB,EAAQsX,OAKdkc,EAAGS,iBAAiBC,SAASf,IAO9B1gB,EAAQ+gB,IALRA,EAAGjB,cA3BnB,WACI,MAAMvyB,EAAU6zB,UAAUM,eAAejB,IACzC,OAAO,IAAIG,GAAUrzB,GAASszB,WAClC,CAyBsBc,GACN3hB,QAAcmhB,MAIlB,GACF,GAEV,CACA1zB,eAAem0B,GAAWb,EAAI3yB,EAAK+N,GAC/B,MAAM5O,EAAUuzB,GAAeC,GAAI,GAAMc,IAAI,CACzC,CAAClB,IAAkBvyB,EACnB+N,UAEJ,OAAO,IAAIykB,GAAUrzB,GAASszB,WAClC,CAMA,SAASiB,GAAcf,EAAI3yB,GACvB,MAAMb,EAAUuzB,GAAeC,GAAI,GAAMxD,OAAOnvB,GAChD,OAAO,IAAIwyB,GAAUrzB,GAASszB,WAClC,CAGA,MAAMkB,GACF,WAAA33B,GACIqB,KAAKsQ,KAAO,QACZtQ,KAAKyS,uBAAwB,EAC7BzS,KAAKkwB,UAAY,CAAC,EAClBlwB,KAAKmwB,WAAa,CAAC,EAGnBnwB,KAAKowB,UAAY,KACjBpwB,KAAKu2B,cAAgB,EACrBv2B,KAAK2yB,SAAW,KAChB3yB,KAAKw2B,OAAS,KACdx2B,KAAKy2B,gCAAiC,EACtCz2B,KAAK02B,oBAAsB,KAE3B12B,KAAK22B,6BACD32B,KAAK42B,mCAAmC1a,MAAK,SAAW,QAChE,CACA,aAAM2a,GACF,OAAI72B,KAAKs1B,KAGTt1B,KAAKs1B,SAAWI,MAFL11B,KAAKs1B,EAIpB,CACA,kBAAMwB,CAAaC,GACf,IAAIC,EAAc,EAClB,OACI,IACI,MAAM1B,QAAWt1B,KAAK62B,UACtB,aAAaE,EAAGzB,EACpB,CACA,MAAOlxB,GACH,GAAI4yB,IAlCa,EAmCb,MAAM5yB,EAENpE,KAAKs1B,KACLt1B,KAAKs1B,GAAGjB,QACRr0B,KAAKs1B,QAAK3vB,EAGlB,CAER,CAKA,sCAAMixB,GACF,OAAO7B,KAAc/0B,KAAKi3B,qBAAuBj3B,KAAKk3B,kBAC1D,CAIA,wBAAMD,GACFj3B,KAAK2yB,SAAWP,GAASniB,aA/JtB8kB,KAAcx1B,KAAO,MAiKxBS,KAAK2yB,SAASe,WAAW,cAA2C1xB,MAAOm1B,EAASpK,KAEzE,CACHqK,oBAFep3B,KAAKq3B,SAEDxkB,SAASka,EAAKpqB,SAIzC3C,KAAK2yB,SAASe,WAAW,QAA8B1xB,MAAOm1B,EAASG,IAC5D,CAAC,eAEhB,CAQA,sBAAMJ,GACF,IAAI53B,EAAI6P,EAGR,GADAnP,KAAK02B,0BAvMb10B,iBACI,KAAoB,OAAd3B,gBAAoC,IAAdA,eAAuB,EAASA,UAAUk3B,eAClE,OAAO,KAEX,IAEI,aAD2Bl3B,UAAUk3B,cAAchZ,OAC/BiZ,MACxB,CACA,MAAOl4B,GACH,OAAO,IACX,CACJ,CA4LyCm4B,IAC5Bz3B,KAAK02B,oBACN,OAEJ12B,KAAKw2B,OAAS,IAAIzC,GAAO/zB,KAAK02B,qBAE9B,MAAMgB,QAAgB13B,KAAKw2B,OAAOlC,MAAM,OAA8B,CAAC,EAAG,KACrEoD,IAGsB,QAArBp4B,EAAKo4B,EAAQ,UAAuB,IAAPp4B,OAAgB,EAASA,EAAGi0B,aACpC,QAArBpkB,EAAKuoB,EAAQ,UAAuB,IAAPvoB,OAAgB,EAASA,EAAGuB,MAAMmC,SAAS,iBAC1E7S,KAAKy2B,gCAAiC,EAE9C,CAUA,yBAAMkB,CAAoBh1B,GAnN9B,IACQrD,EAmNA,GAAKU,KAAKw2B,QACLx2B,KAAK02B,uBAnNmF,QAAxFp3B,EAAmB,OAAde,gBAAoC,IAAdA,eAAuB,EAASA,UAAUk3B,qBAAkC,IAAPj4B,OAAgB,EAASA,EAAGs4B,aAAe,QAoN1G53B,KAAK02B,oBAG3C,UACU12B,KAAKw2B,OAAOlC,MAAM,aAA2C,CAAE3xB,OAErE3C,KAAKy2B,+BACC,IACA,GACV,CACA,MAAOn3B,GAEP,CACJ,CACA,kBAAMkR,GACF,IACI,IAAKmlB,UACD,OAAO,EAEX,MAAML,QAAWI,KAGjB,aAFMS,GAAWb,EAAI/F,GAAuB,WACtC8G,GAAcf,EAAI/F,KACjB,CACX,CACA,MAAOjwB,GAAM,CACb,OAAO,CACX,CACA,uBAAMu4B,CAAkBC,GACpB93B,KAAKu2B,gBACL,UACUuB,GACV,CACA,QACI93B,KAAKu2B,eACT,CACJ,CACA,UAAM9lB,CAAK9N,EAAK+N,GACZ,OAAO1Q,KAAK63B,mBAAkB71B,gBACpBhC,KAAK82B,cAAcxB,GAAOa,GAAWb,EAAI3yB,EAAK+N,KACpD1Q,KAAKmwB,WAAWxtB,GAAO+N,EAChB1Q,KAAK23B,oBAAoBh1B,KAExC,CACA,UAAMgO,CAAKhO,GACP,MAAMohB,QAAa/jB,KAAK82B,cAAcxB,GAhK9CtzB,eAAyBszB,EAAI3yB,GACzB,MAAMb,EAAUuzB,GAAeC,GAAI,GAAOl1B,IAAIuC,GACxCoqB,QAAa,IAAIoI,GAAUrzB,GAASszB,YAC1C,YAAgBzvB,IAATonB,EAAqB,KAAOA,EAAKrc,KAC5C,CA4JqDqnB,CAAUzC,EAAI3yB,KAE3D,OADA3C,KAAKmwB,WAAWxtB,GAAOohB,EAChBA,CACX,CACA,aAAMnT,CAAQjO,GACV,OAAO3C,KAAK63B,mBAAkB71B,gBACpBhC,KAAK82B,cAAcxB,GAAOe,GAAcf,EAAI3yB,YAC3C3C,KAAKmwB,WAAWxtB,GAChB3C,KAAK23B,oBAAoBh1B,KAExC,CACA,WAAM00B,GAEF,MAAMje,QAAepZ,KAAK82B,cAAcxB,IACpC,MAAM0C,EAAgB3C,GAAeC,GAAI,GAAO2C,SAChD,OAAO,IAAI9C,GAAU6C,GAAe5C,WAAW,IAEnD,IAAKhc,EACD,MAAO,GAGX,GAA2B,IAAvBpZ,KAAKu2B,cACL,MAAO,GAEX,MAAM5F,EAAO,GACPuH,EAAe,IAAIhO,IACzB,GAAsB,IAAlB9Q,EAAO/S,OACP,IAAK,MAAQ8xB,UAAWx1B,EAAG,MAAE+N,KAAW0I,EACpC8e,EAAahW,IAAIvf,GACbJ,KAAKC,UAAUxC,KAAKmwB,WAAWxtB,MAAUJ,KAAKC,UAAUkO,KACxD1Q,KAAK+wB,gBAAgBpuB,EAAK+N,GAC1BigB,EAAKnc,KAAK7R,IAItB,IAAK,MAAMy1B,KAAYj6B,OAAOwyB,KAAK3wB,KAAKmwB,YAChCnwB,KAAKmwB,WAAWiI,KAAcF,EAAa3N,IAAI6N,KAE/Cp4B,KAAK+wB,gBAAgBqH,EAAU,MAC/BzH,EAAKnc,KAAK4jB,IAGlB,OAAOzH,CACX,CACA,eAAAI,CAAgBpuB,EAAKiuB,GACjB5wB,KAAKmwB,WAAWxtB,GAAOiuB,EACvB,MAAMV,EAAYlwB,KAAKkwB,UAAUvtB,GACjC,GAAIutB,EACA,IAAK,MAAMoB,KAAY3hB,MAAM4hB,KAAKrB,GAC9BoB,EAASV,EAGrB,CACA,YAAAY,GACIxxB,KAAKixB,cACLjxB,KAAKowB,UAAYqB,aAAYzvB,SAAYhC,KAAKq3B,SA9MzB,IA+MzB,CACA,WAAApG,GACQjxB,KAAKowB,YACLuB,cAAc3xB,KAAKowB,WACnBpwB,KAAKowB,UAAY,KAEzB,CACA,YAAAvf,CAAalO,EAAK2uB,GAC6B,IAAvCnzB,OAAOwyB,KAAK3wB,KAAKkwB,WAAW7pB,QAC5BrG,KAAKwxB,eAEJxxB,KAAKkwB,UAAUvtB,KAChB3C,KAAKkwB,UAAUvtB,GAAO,IAAIunB,IAErBlqB,KAAK2Q,KAAKhO,IAEnB3C,KAAKkwB,UAAUvtB,GAAKuf,IAAIoP,EAC5B,CACA,eAAAtgB,CAAgBrO,EAAK2uB,GACbtxB,KAAKkwB,UAAUvtB,KACf3C,KAAKkwB,UAAUvtB,GAAKmvB,OAAOR,GACM,IAA7BtxB,KAAKkwB,UAAUvtB,GAAKovB,aACb/xB,KAAKkwB,UAAUvtB,IAGa,IAAvCxE,OAAOwyB,KAAK3wB,KAAKkwB,WAAW7pB,QAC5BrG,KAAKixB,aAEb,EAEJqF,GAA0BhmB,KAAO,QAOjC,MAAM+nB,GAA4B/B,GA4ClC,MAEMgC,GAAmB,KACzB,MAAMC,GACF,WAAA55B,CAAYZ,GACRiC,KAAKjC,KAAOA,EACZiC,KAAKw4B,QAAUF,GACft4B,KAAKy4B,SAAW,IAAIzoB,GACxB,CACA,MAAA0oB,CAAOC,EAAWC,GACd,MAAMhd,EAAK5b,KAAKw4B,QAGhB,OAFAx4B,KAAKy4B,SAASroB,IAAIwL,EAAI,IAAIid,GAAWF,EAAW34B,KAAKjC,KAAKQ,KAAMq6B,GAAc,CAAC,IAC/E54B,KAAKw4B,UACE5c,CACX,CACA,KAAAkd,CAAMC,GACF,IAAIz5B,EACJ,MAAMsc,EAAKmd,GAAeT,GACa,QAAhCh5B,EAAKU,KAAKy4B,SAASr4B,IAAIwb,UAAwB,IAAPtc,GAAyBA,EAAGwyB,SAC3E9xB,KAAKy4B,SAAS3G,OAAOlW,EACzB,CACA,WAAAhW,CAAYmzB,GACR,IAAIz5B,EACJ,MAAMsc,EAAKmd,GAAeT,GAC1B,OAAyC,QAAhCh5B,EAAKU,KAAKy4B,SAASr4B,IAAIwb,UAAwB,IAAPtc,OAAgB,EAASA,EAAGsG,gBAAkB,EACnG,CACA,aAAM4Y,CAAQua,GACV,IAAIz5B,EACJ,MAAMsc,EAAKmd,GAAeT,GAE1B,OADuC,QAAhCh5B,EAAKU,KAAKy4B,SAASr4B,IAAIwb,UAAwB,IAAPtc,GAAyBA,EAAGkf,UACpE,EACX,EAEJ,MAAMqa,GACF,WAAAl6B,CAAYq6B,EAAe16B,EAASgE,GAChCtC,KAAKsC,OAASA,EACdtC,KAAKoJ,QAAU,KACfpJ,KAAKi5B,SAAU,EACfj5B,KAAKk5B,cAAgB,KACrBl5B,KAAKm5B,aAAe,KAChBn5B,KAAKwe,SAAS,EAElB,MAAMma,EAAqC,iBAAlBK,EACnB9X,SAASkY,eAAeJ,GACxBA,EACNj6B,EAAQ45B,EAAW,iBAAqD,CAAEr6B,YAC1E0B,KAAK24B,UAAYA,EACjB34B,KAAKq5B,UAAiC,cAArBr5B,KAAKsC,OAAOyvB,KACzB/xB,KAAKq5B,UACLr5B,KAAKwe,UAGLxe,KAAK24B,UAAUrW,iBAAiB,QAAStiB,KAAKm5B,aAEtD,CACA,WAAAvzB,GAEI,OADA5F,KAAKs5B,iBACEt5B,KAAKk5B,aAChB,CACA,SACIl5B,KAAKs5B,iBACLt5B,KAAKi5B,SAAU,EACXj5B,KAAKoJ,UACLjE,aAAanF,KAAKoJ,SAClBpJ,KAAKoJ,QAAU,MAEnBpJ,KAAK24B,UAAU9G,oBAAoB,QAAS7xB,KAAKm5B,aACrD,CACA,OAAA3a,GACIxe,KAAKs5B,iBACDt5B,KAAKoJ,UAGTpJ,KAAKoJ,QAAUkV,OAAOpZ,YAAW,KAC7BlF,KAAKk5B,cA6BjB,SAA0CK,GACtC,MAAMC,EAAQ,GACRC,EAAe,iEACrB,IAAK,IAAIhjB,EAAI,EAAGA,EAAI8iB,EAAK9iB,IACrB+iB,EAAMhlB,KAAKilB,EAAa/iB,OAAOlW,KAAKwd,MAAMxd,KAAKyd,SAAWwb,EAAapzB,UAE3E,OAAOmzB,EAAMvlB,KAAK,GACtB,CApCiCylB,CAAiC,IACtD,MAAM,SAAE/qB,EAAU,mBAAoBgrB,GAAoB35B,KAAKsC,OAC/D,GAAIqM,EACA,IACIA,EAAS3O,KAAKk5B,cAClB,CACA,MAAO90B,GAAK,CAEhBpE,KAAKoJ,QAAUkV,OAAOpZ,YAAW,KAG7B,GAFAlF,KAAKoJ,QAAU,KACfpJ,KAAKk5B,cAAgB,KACjBS,EACA,IACIA,GACJ,CACA,MAAOv1B,GAAK,CAEZpE,KAAKq5B,WACLr5B,KAAKwe,SACT,GA5FY,IA6FO,GA9FZ,KAgGnB,CACA,cAAA8a,GACI,GAAIt5B,KAAKi5B,QACL,MAAM,IAAI95B,MAAM,sCAExB,EA6BJ,MAAMy6B,GAAmB9b,GAAsB,OACzC+b,GAAwB,IAAIh6B,EAAM,IAAO,KAI/C,MAAMi6B,GACF,WAAAn7B,GACI,IAAIW,EACJU,KAAK+5B,aAAe,GACpB/5B,KAAKw4B,QAAU,EAMfx4B,KAAKg6B,2BAA6D,QAA/B16B,EAAKw1B,KAAUpvB,kBAA+B,IAAPpG,OAAgB,EAASA,EAAGo5B,OAC1G,CACA,IAAAuB,CAAKl8B,EAAMm8B,EAAK,IAEZ,OADAn7B,EAwDR,SAA6Bm7B,GACzB,OAAOA,EAAG7zB,QAAU,GAAK,yBAAyBoN,KAAKymB,EAC3D,CA1DgBC,CAAoBD,GAAKn8B,EAAM,kBACnCiC,KAAKo6B,yBAAyBF,IAAOz0B,EAAKqvB,KAAUpvB,YAC7CpC,QAAQiR,QAAQugB,KAAUpvB,YAE9B,IAAIpC,SAAQ,CAACiR,EAAStP,KACzB,MAAM7B,EAAiB0xB,KAAU5vB,YAAW,KACxCD,EAAOpH,EAAaE,EAAM,0BAAqE,GAChG87B,GAAsBz5B,OACzB00B,KAAU8E,IAAoB,KAC1B9E,KAAU3vB,aAAa/B,UAChB0xB,KAAU8E,IACjB,MAAMS,EAAYvF,KAAUpvB,WAC5B,IAAK20B,IAAc50B,EAAK40B,GAEpB,YADAp1B,EAAOpH,EAAaE,EAAM,mBAK9B,MAAM26B,EAAS2B,EAAU3B,OACzB2B,EAAU3B,OAAS,CAACC,EAAWr2B,KAC3B,MAAMg4B,EAAW5B,EAAOC,EAAWr2B,GAEnC,OADAtC,KAAKw4B,UACE8B,CAAQ,EAEnBt6B,KAAK+5B,aAAeG,EACpB3lB,EAAQ8lB,EAAU,EAOtBxc,GALY,GAr1JbL,GAAmBE,qBAq1JwBrhB,EAAKqG,YAAY,CACvD63B,OAAQX,GACRlB,OAAQ,WACRwB,UAESzb,OAAM,KACftZ,aAAa/B,GACb6B,EAAOpH,EAAaE,EAAM,kBAAqD,GACjF,GAEV,CACA,kBAAAy8B,GACIx6B,KAAKw4B,SACT,CACA,wBAAA4B,CAAyBF,GACrB,IAAI56B,EAQJ,SAA2C,QAA/BA,EAAKw1B,KAAUpvB,kBAA+B,IAAPpG,OAAgB,EAASA,EAAGo5B,UAC1EwB,IAAOl6B,KAAK+5B,cACT/5B,KAAKw4B,QAAU,GACfx4B,KAAKg6B,wBACjB,EAKJ,MAAMS,GACF,UAAMR,CAAKl8B,GACP,OAAO,IAAIw6B,GAAcx6B,EAC7B,CACA,kBAAAy8B,GAAuB,EAmB3B,MAAME,GAA0B,YAC1BC,GAAiB,CACnBC,MAAO,QACPtqB,KAAM,SAsNV,MAAMuqB,GACF,WAAAl8B,CAAYymB,EAAgB0V,GACxB96B,KAAKolB,eAAiBA,EACtBplB,KAAK86B,eAAiBA,CAC1B,CACA,OAAAC,CAAQ1V,GACJ,MAAM2V,EAAiB9V,GAAoBC,kBAAkBnlB,KAAKolB,eAAgBC,GAClF,OAAOrlB,KAAK86B,eAAeE,EAC/B,EAgFJh5B,eAAei5B,GAAmBl9B,EAAM0e,EAASsC,GAC7C,IAAIzf,EACJ,MAAM47B,QAAuBnc,EAASX,SACtC,IAGI,IAAI+c,EASJ,GAXAp8B,EAAkC,iBAAnBm8B,EAA6Bn9B,EAAM,kBAClDgB,EAAQggB,EAASzO,OAASoqB,GAAyB38B,EAAM,kBAGrDo9B,EADmB,iBAAZ1e,EACY,CACfnX,YAAamX,GAIEA,EAEnB,YAAa0e,EAAkB,CAC/B,MAAM9M,EAAU8M,EAAiB9M,QACjC,GAAI,gBAAiB8M,EAAkB,CACnCp8B,EAAyB,WAAjBsvB,EAAQ/d,KAAuDvS,EAAM,kBAC7E,MAAM0D,QAppDtB,SAA6B1D,EAAM+D,GAC/B,OAAOG,EAAmBlE,EAAM,OAA8B,mCAAwE8D,EAAmB9D,EAAM+D,GACnK,CAkpDuCs5B,CAAoBr9B,EAAM,CAC7C2M,QAAS2jB,EAAQxH,WACjBwU,oBAAqB,CACjB/1B,YAAa61B,EAAiB71B,YAC9B41B,oBAGR,OAAOz5B,EAAS65B,iBAAiBzV,WACrC,CACK,CACD9mB,EAAyB,WAAjBsvB,EAAQ/d,KAAwDvS,EAAM,kBAC9E,MAAMktB,GAA+D,QAA3C3rB,EAAK67B,EAAiBI,uBAAoC,IAAPj8B,OAAgB,EAASA,EAAG8L,MACrG+vB,EAAiBK,eACrBz8B,EAAQksB,EAAiBltB,EAAM,6BAC/B,MAAM0D,QAllBtB,SAA6B1D,EAAM+D,GAC/B,OAAOG,EAAmBlE,EAAM,OAA8B,+BAAiE8D,EAAmB9D,EAAM+D,GAC5J,CAglBuC25B,CAAoB19B,EAAM,CAC7CkwB,qBAAsBI,EAAQxH,WAC9BoE,kBACAyQ,gBAAiB,CACbR,oBAGR,OAAOz5B,EAASk6B,kBAAkB9V,WACtC,CACJ,CACK,CACD,MAAM,YAAEA,SA77IpB7jB,eAAyCjE,EAAM+D,GAC3C,OAAOG,EAAmBlE,EAAM,OAA8B,oCAA2E8D,EAAmB9D,EAAM+D,GACtK,CA27I0C85B,CAA0B79B,EAAM,CAC1DuH,YAAa61B,EAAiB71B,YAC9B41B,mBAEJ,OAAOrV,CACX,CACJ,CACA,QACI9G,EAAS8c,QACb,CACJ,CA8DA,MAAMC,GAKF,WAAAn9B,CAAYZ,GAERiC,KAAKkL,WAAa4wB,GAAkBlV,YACpC5mB,KAAKjC,KAAOsf,GAAUtf,EAC1B,CAgCA,iBAAAg+B,CAAkBC,EAAcC,GAC5B,OAAOhB,GAAmBj7B,KAAKjC,KAAMi+B,EAAc3/B,EAAKiL,mBAAmB20B,GAC/E,CA4BA,iBAAOpV,CAAWzB,EAAgBC,GAC9B,OAAOH,GAAoBC,kBAAkBC,EAAgBC,EACjE,CAKA,2BAAO8C,CAAqBC,GACxB,MAAMvB,EAAauB,EACnB,OAAO0T,GAAkBlT,2BAA2B/B,EACxD,CAiCA,0BAAOyB,CAAoB/qB,GACvB,OAAOu+B,GAAkBlT,2BAA4BrrB,EAAMgI,YAAc,CAAC,EAC9E,CACA,iCAAOqjB,EAA6BpjB,eAAgB+iB,IAChD,IAAKA,EACD,OAAO,KAEX,MAAM,YAAEjjB,EAAW,eAAEigB,GAAmBgD,EACxC,OAAIjjB,GAAeigB,EACRL,GAAoBI,mBAAmBhgB,EAAaigB,GAExD,IACX,EA4BJ,SAAS2W,GAAqBn+B,EAAMo+B,GAChC,OAAIA,EACOlsB,GAAaksB,IAExBp9B,EAAQhB,EAAK2Z,uBAAwB3Z,EAAM,kBACpCA,EAAK2Z,uBAChB,CA/BAokB,GAAkBlV,YAAc,QAEhCkV,GAAkBM,qBAAuB,QA+CzC,MAAMC,WAAsB3Z,GACxB,WAAA/jB,CAAY2D,GACRqhB,MAAM,SAAkC,UACxC3jB,KAAKsC,OAASA,CAClB,CACA,mBAAAsgB,CAAoB7kB,GAChB,OAAOomB,GAAcpmB,EAAMiC,KAAKs8B,mBACpC,CACA,cAAAxZ,CAAe/kB,EAAM2M,GACjB,OAAOyZ,GAAcpmB,EAAMiC,KAAKs8B,iBAAiB5xB,GACrD,CACA,4BAAAsY,CAA6BjlB,GACzB,OAAOomB,GAAcpmB,EAAMiC,KAAKs8B,mBACpC,CACA,gBAAAA,CAAiB5xB,GACb,MAAM5I,EAAU,CACZijB,WAAY/kB,KAAKsC,OAAOyiB,WACxBwX,UAAWv8B,KAAKsC,OAAOi6B,UACvBvX,SAAUhlB,KAAKsC,OAAO0iB,SACtBjjB,SAAU/B,KAAKsC,OAAOP,SACtBuiB,aAActkB,KAAKsC,OAAOgiB,aAC1BN,mBAAmB,EACnBwY,qBAAqB,GAKzB,OAHI9xB,IACA5I,EAAQ4I,QAAUA,GAEf5I,CACX,EAEJ,SAAS26B,GAAQn6B,GACb,OAAOqoB,GAAsBroB,EAAOvE,KAAM,IAAIs+B,GAAc/5B,GAASA,EAAOwG,gBAChF,CACA,SAAS4zB,GAAQp6B,GACb,MAAM,KAAEvE,EAAI,KAAEoJ,GAAS7E,EAEvB,OADAvD,EAAQoI,EAAMpJ,EAAM,kBACbysB,GAAgBrjB,EAAM,IAAIk1B,GAAc/5B,GAASA,EAAOwG,gBACnE,CACA9G,eAAe26B,GAAMr6B,GACjB,MAAM,KAAEvE,EAAI,KAAEoJ,GAAS7E,EAEvB,OADAvD,EAAQoI,EAAMpJ,EAAM,kBACbqsB,GAAQjjB,EAAM,IAAIk1B,GAAc/5B,GAASA,EAAOwG,gBAC3D,CAsBA,MAAM8zB,GACF,WAAAj+B,CAAYZ,EAAM6N,EAAQ6P,EAAUtU,EAAM2B,GAAkB,GACxD9I,KAAKjC,KAAOA,EACZiC,KAAKyb,SAAWA,EAChBzb,KAAKmH,KAAOA,EACZnH,KAAK8I,gBAAkBA,EACvB9I,KAAK68B,eAAiB,KACtB78B,KAAK88B,aAAe,KACpB98B,KAAK4L,OAAS+D,MAAMC,QAAQhE,GAAUA,EAAS,CAACA,EACpD,CACA,OAAA4S,GACI,OAAO,IAAIlb,SAAQtB,MAAOuS,EAAStP,KAC/BjF,KAAK68B,eAAiB,CAAEtoB,UAAStP,UACjC,IACIjF,KAAK88B,mBAAqB98B,KAAKyb,SAASjD,YAAYxY,KAAKjC,YACnDiC,KAAK+8B,cACX/8B,KAAK88B,aAAaE,iBAAiBh9B,KACvC,CACA,MAAOoE,GACHpE,KAAKiF,OAAOb,EAChB,IAER,CACA,iBAAM64B,CAAYlN,GACd,MAAM,YAAEmN,EAAW,UAAEX,EAAS,SAAEvX,EAAQ,SAAEjjB,EAAQ,MAAExE,EAAK,KAAE+S,GAASyf,EACpE,GAAIxyB,EAEA,YADAyC,KAAKiF,OAAO1H,GAGhB,MAAM+E,EAAS,CACXvE,KAAMiC,KAAKjC,KACXgnB,WAAYmY,EACZX,UAAWA,EACXx6B,SAAUA,QAAY4D,EACtBqf,SAAUA,QAAYrf,EACtBwB,KAAMnH,KAAKmH,KACX2B,gBAAiB9I,KAAK8I,iBAE1B,IACI9I,KAAKuU,cAAcvU,KAAKm9B,WAAW7sB,EAAhBtQ,CAAsBsC,GAC7C,CACA,MAAO8B,GACHpE,KAAKiF,OAAOb,EAChB,CACJ,CACA,OAAAg5B,CAAQ7/B,GACJyC,KAAKiF,OAAO1H,EAChB,CACA,UAAA4/B,CAAW7sB,GACP,OAAQA,GACJ,IAAK,iBACL,IAAK,oBACD,OAAOmsB,GACX,IAAK,eACL,IAAK,kBACD,OAAOE,GACX,IAAK,iBACL,IAAK,oBACD,OAAOD,GACX,QACIj/B,EAAMuC,KAAKjC,KAAM,kBAE7B,CACA,OAAAwW,CAAQiQ,GACJplB,EAAYY,KAAK68B,eAAgB,iCACjC78B,KAAK68B,eAAetoB,QAAQiQ,GAC5BxkB,KAAKq9B,sBACT,CACA,MAAAp4B,CAAO1H,GACH6B,EAAYY,KAAK68B,eAAgB,iCACjC78B,KAAK68B,eAAe53B,OAAO1H,GAC3ByC,KAAKq9B,sBACT,CACA,oBAAAA,GACQr9B,KAAK88B,cACL98B,KAAK88B,aAAaQ,mBAAmBt9B,MAEzCA,KAAK68B,eAAiB,KACtB78B,KAAKu9B,SACT,EAmBJ,MAAMC,GAA6B,IAAI39B,EAAM,IAAM,KA6GnD,MAAM49B,WAAuBb,GACzB,WAAAj+B,CAAYZ,EAAM6N,EAAQtF,EAAUmV,EAAUtU,GAC1Cwc,MAAM5lB,EAAM6N,EAAQ6P,EAAUtU,GAC9BnH,KAAKsG,SAAWA,EAChBtG,KAAK09B,WAAa,KAClB19B,KAAK29B,OAAS,KACVF,GAAeG,oBACfH,GAAeG,mBAAmBC,SAEtCJ,GAAeG,mBAAqB59B,IACxC,CACA,oBAAM89B,GACF,MAAM1kB,QAAepZ,KAAKwe,UAE1B,OADAzf,EAAQqa,EAAQpZ,KAAKjC,KAAM,kBACpBqb,CACX,CACA,iBAAM2jB,GACF39B,EAAmC,IAAvBY,KAAK4L,OAAOvF,OAAc,0CACtC,MAAM0sB,EAAUc,KAChB7zB,KAAK09B,iBAAmB19B,KAAKyb,SAASsiB,WAAW/9B,KAAKjC,KAAMiC,KAAKsG,SAAUtG,KAAK4L,OAAO,GACvFmnB,GACA/yB,KAAK09B,WAAWM,gBAAkBjL,EAQlC/yB,KAAKyb,SAASwiB,kBAAkBj+B,KAAKjC,MAAM0gB,OAAMra,IAC7CpE,KAAKiF,OAAOb,EAAE,IAElBpE,KAAKyb,SAASyiB,6BAA6Bl+B,KAAKjC,MAAMogC,IAC7CA,GACDn+B,KAAKiF,OAAOpH,EAAamC,KAAKjC,KAAM,2BACxC,IAGJiC,KAAKo+B,sBACT,CACA,WAAIrL,GACA,IAAIzzB,EACJ,OAAmC,QAA1BA,EAAKU,KAAK09B,kBAA+B,IAAPp+B,OAAgB,EAASA,EAAG0+B,kBAAoB,IAC/F,CACA,MAAAH,GACI79B,KAAKiF,OAAOpH,EAAamC,KAAKjC,KAAM,2BACxC,CACA,OAAAw/B,GACQv9B,KAAK09B,YACL19B,KAAK09B,WAAWrJ,QAEhBr0B,KAAK29B,QACLrf,OAAOnZ,aAAanF,KAAK29B,QAE7B39B,KAAK09B,WAAa,KAClB19B,KAAK29B,OAAS,KACdF,GAAeG,mBAAqB,IACxC,CACA,oBAAAQ,GACI,MAAMpO,EAAO,KACT,IAAI1wB,EAAI6P,GAC6E,QAAhFA,EAAgC,QAA1B7P,EAAKU,KAAK09B,kBAA+B,IAAPp+B,OAAgB,EAASA,EAAGgf,cAA2B,IAAPnP,OAAgB,EAASA,EAAGkvB,QAMrHr+B,KAAK29B,OAASrf,OAAOpZ,YAAW,KAC5BlF,KAAK29B,OAAS,KACd39B,KAAKiF,OAAOpH,EAAamC,KAAKjC,KAAM,wBAAiE,GACtG,KAGPiC,KAAK29B,OAASrf,OAAOpZ,WAAW8qB,EAAMwN,GAA2Bp9B,MAAM,EAE3E4vB,GACJ,EAIJyN,GAAeG,mBAAqB,KAkBpC,MAAMU,GAAuB,kBAGvBC,GAAqB,IAAIvuB,IAC/B,MAAMwuB,WAAuB5B,GACzB,WAAAj+B,CAAYZ,EAAM0d,EAAU3S,GAAkB,GAC1C6a,MAAM5lB,EAAM,CACR,oBACA,kBACA,oBACA,WACD0d,OAAU9V,EAAWmD,GACxB9I,KAAK+yB,QAAU,IACnB,CAKA,aAAMvU,GACF,IAAIigB,EAAeF,GAAmBn+B,IAAIJ,KAAKjC,KAAK+S,QACpD,IAAK2tB,EAAc,CACf,IACI,MACMrlB,QAsCtBpX,eAAiDyZ,EAAU1d,GACvD,MAAM4E,EAAM+7B,GAAmB3gC,GACzBqT,EAAcutB,GAAoBljB,GACxC,UAAYrK,EAAYZ,eACpB,OAAO,EAEX,MAAMouB,EAAuD,eAA3BxtB,EAAYT,KAAKhO,GAEnD,aADMyO,EAAYR,QAAQjO,GACnBi8B,CACX,CAhDiDC,CAAkC7+B,KAAKyb,SAAUzb,KAAKjC,YAC7C4lB,MAAMnF,UAAY,KAC5DigB,EAAe,IAAMn7B,QAAQiR,QAAQ6E,EACzC,CACA,MAAOhV,GACHq6B,EAAe,IAAMn7B,QAAQ2B,OAAOb,EACxC,CACAm6B,GAAmBnuB,IAAIpQ,KAAKjC,KAAK+S,OAAQ2tB,EAC7C,CAMA,OAHKz+B,KAAK8I,iBACNy1B,GAAmBnuB,IAAIpQ,KAAKjC,KAAK+S,QAAQ,IAAMxN,QAAQiR,QAAQ,QAE5DkqB,GACX,CACA,iBAAMxB,CAAYlN,GACd,GAAmB,sBAAfA,EAAMzf,KACN,OAAOqT,MAAMsZ,YAAYlN,GAExB,GAAmB,YAAfA,EAAMzf,MAKf,GAAIyf,EAAMgD,QAAS,CACf,MAAM5rB,QAAanH,KAAKjC,KAAK4d,mBAAmBoU,EAAMgD,SACtD,GAAI5rB,EAEA,OADAnH,KAAKmH,KAAOA,EACLwc,MAAMsZ,YAAYlN,GAGzB/vB,KAAKuU,QAAQ,KAErB,OAZIvU,KAAKuU,QAAQ,KAarB,CACA,iBAAMwoB,GAAgB,CACtB,OAAAQ,GAAY,EAYhBv7B,eAAe88B,GAA0BrjB,EAAU1d,GAC/C,OAAO4gC,GAAoBljB,GAAUhL,KAAKiuB,GAAmB3gC,GAAO,OACxE,CAIA,SAASwb,GAAwBxb,EAAMqb,GACnCmlB,GAAmBnuB,IAAIrS,EAAK+S,OAAQsI,EACxC,CACA,SAASulB,GAAoBljB,GACzB,OAAOxL,GAAawL,EAASC,qBACjC,CACA,SAASgjB,GAAmB3gC,GACxB,OAAOmT,GAAoBotB,GAAsBvgC,EAAK4C,OAAOiC,OAAQ7E,EAAKQ,KAC9E,CAwNAyD,eAAe+8B,GAAmBhhC,EAAMihC,EAAgBl2B,GAAkB,GACtE,MAAMoX,EAAe7C,GAAUtf,GACzB0d,EAAWygB,GAAqBhc,EAAc8e,GAC9C5iB,EAAS,IAAIoiB,GAAete,EAAczE,EAAU3S,GACpDsQ,QAAegD,EAAOoC,UAM5B,OALIpF,IAAWtQ,WACJsQ,EAAOjS,KAAK8H,uBACbiR,EAAa1T,sBAAsB4M,EAAOjS,YAC1C+Y,EAAavG,iBAAiB,KAAMqlB,IAEvC5lB,CACX,CACApX,eAAei9B,GAAuB93B,GAClC,MAAM4rB,EAAUc,GAAiB,GAAG1sB,EAAKiE,UAIzC,OAHAjE,EAAK8H,iBAAmB8jB,QAClB5rB,EAAKpJ,KAAK4b,iBAAiBxS,SAC3BA,EAAKpJ,KAAKyO,sBAAsBrF,GAC/B4rB,CACX,CAqBA,MAAMmM,GACF,WAAAvgC,CAAYZ,GACRiC,KAAKjC,KAAOA,EACZiC,KAAKm/B,gBAAkB,IAAIjV,IAC3BlqB,KAAKo/B,UAAY,IAAIlV,IACrBlqB,KAAKq/B,oBAAsB,KAC3Br/B,KAAKs/B,6BAA8B,EACnCt/B,KAAKu/B,uBAAyB14B,KAAKgD,KACvC,CACA,gBAAAmzB,CAAiBwC,GACbx/B,KAAKo/B,UAAUld,IAAIsd,GACfx/B,KAAKq/B,qBACLr/B,KAAKy/B,mBAAmBz/B,KAAKq/B,oBAAqBG,KAClDx/B,KAAK0/B,eAAe1/B,KAAKq/B,oBAAqBG,GAC9Cx/B,KAAK2/B,iBAAiB3/B,KAAKq/B,qBAC3Br/B,KAAKq/B,oBAAsB,KAEnC,CACA,kBAAA/B,CAAmBkC,GACfx/B,KAAKo/B,UAAUtN,OAAO0N,EAC1B,CACA,OAAAI,CAAQ7P,GAEJ,GAAI/vB,KAAK6/B,oBAAoB9P,GACzB,OAAO,EAEX,IAAI+P,GAAU,EAQd,OAPA9/B,KAAKo/B,UAAUW,SAAQC,IACfhgC,KAAKy/B,mBAAmB1P,EAAOiQ,KAC/BF,GAAU,EACV9/B,KAAK0/B,eAAe3P,EAAOiQ,GAC3BhgC,KAAK2/B,iBAAiB5P,GAC1B,IAEA/vB,KAAKs/B,8BAgDjB,SAAyBvP,GACrB,OAAQA,EAAMzf,MACV,IAAK,oBACL,IAAK,kBACL,IAAK,oBACD,OAAO,EACX,IAAK,UACD,OAAO2vB,GAAoBlQ,GAC/B,QACI,OAAO,EAEnB,CA3DiDmQ,CAAgBnQ,KAKzD/vB,KAAKs/B,6BAA8B,EAE9BQ,IACD9/B,KAAKq/B,oBAAsBtP,EAC3B+P,GAAU,IANHA,CASf,CACA,cAAAJ,CAAe3P,EAAOiQ,GAClB,IAAI1gC,EACJ,GAAIywB,EAAMxyB,QAAU0iC,GAAoBlQ,GAAQ,CAC5C,MAAM/xB,GAAoC,QAA3BsB,EAAKywB,EAAMxyB,MAAMS,YAAyB,IAAPsB,OAAgB,EAASA,EAAG0E,MAAM,SAAS,KACzF,iBACJg8B,EAAS5C,QAAQv/B,EAAamC,KAAKjC,KAAMC,GAC7C,MAEIgiC,EAAS/C,YAAYlN,EAE7B,CACA,kBAAA0P,CAAmB1P,EAAOiQ,GACtB,MAAMG,EAAsC,OAArBH,EAASjN,WACzBhD,EAAMgD,SAAWhD,EAAMgD,UAAYiN,EAASjN,QACnD,OAAOiN,EAASp0B,OAAOiH,SAASkd,EAAMzf,OAAS6vB,CACnD,CACA,mBAAAN,CAAoB9P,GAKhB,OAJIlpB,KAAKgD,MAAQ7J,KAAKu/B,wBAjEc,KAmEhCv/B,KAAKm/B,gBAAgBiB,QAElBpgC,KAAKm/B,gBAAgB5U,IAAI8V,GAAStQ,GAC7C,CACA,gBAAA4P,CAAiB5P,GACb/vB,KAAKm/B,gBAAgBjd,IAAIme,GAAStQ,IAClC/vB,KAAKu/B,uBAAyB14B,KAAKgD,KACvC,EAEJ,SAASw2B,GAASj8B,GACd,MAAO,CAACA,EAAEkM,KAAMlM,EAAE2uB,QAAS3uB,EAAEm4B,UAAWn4B,EAAErC,UAAU6J,QAAO00B,GAAKA,IAAGrsB,KAAK,IAC5E,CACA,SAASgsB,IAAoB,KAAE3vB,EAAI,MAAE/S,IACjC,MAAiB,YAAT+S,GAC2D,wBAA9D/S,aAAqC,EAASA,EAAMS,KAC7D,CA8BAgE,eAAeu+B,GAAkBxiC,EAAM+D,EAAU,CAAC,GAC9C,OAAOG,EAAmBlE,EAAM,MAA4B,eAAkD+D,EAClH,CAkBA,MAAM0+B,GAAmB,uCACnBC,GAAa,UAoBnB,SAASC,GAAYpW,GACjB,MAAMqW,EAAathC,KACb,SAAEO,EAAQ,SAAEghC,GAAa,IAAIC,IAAIF,GACvC,GAAIrW,EAASvpB,WAAW,uBAAwB,CAC5C,MAAM+/B,EAAQ,IAAID,IAAIvW,GACtB,MAAuB,KAAnBwW,EAAMF,UAAgC,KAAbA,EAEJ,sBAAbhhC,GACJ0qB,EAASnmB,QAAQ,sBAAuB,MACpCw8B,EAAWx8B,QAAQ,sBAAuB,IAElC,sBAAbvE,GAAoCkhC,EAAMF,WAAaA,CAClE,CACA,IAAKH,GAAWhtB,KAAK7T,GACjB,OAAO,EAEX,GAAI4gC,GAAiB/sB,KAAK6W,GAGtB,OAAOsW,IAAatW,EAGxB,MAAMyW,EAAuBzW,EAASnmB,QAAQ,MAAO,OAIrD,OADW,IAAI68B,OAAO,UAAYD,EAAuB,IAAMA,EAAuB,KAAM,KAClFttB,KAAKmtB,EACnB,CAkBA,MAAMK,GAAkB,IAAIphC,EAAM,IAAO,KAKzC,SAASqhC,KAIL,MAAMC,EAASrM,KAAUsM,OAEzB,GAAID,aAAuC,EAASA,EAAOE,EAEvD,IAAK,MAAMC,KAAQnjC,OAAOwyB,KAAKwQ,EAAOE,GAQlC,GANAF,EAAOE,EAAEC,GAAMC,EAAIJ,EAAOE,EAAEC,GAAMC,GAAK,GAEvCJ,EAAOE,EAAEC,GAAME,EAAIL,EAAOE,EAAEC,GAAME,GAAK,GAEvCL,EAAOE,EAAEC,GAAMC,EAAI,IAAIJ,EAAOE,EAAEC,GAAME,GAElCL,EAAOM,GACP,IAAK,IAAIhrB,EAAI,EAAGA,EAAI0qB,EAAOM,GAAGp7B,OAAQoQ,IAElC0qB,EAAOM,GAAGhrB,GAAK,IAKnC,CACA,SAASirB,GAAS3jC,GACd,OAAO,IAAIuF,SAAQ,CAACiR,EAAStP,KACzB,IAAI3F,EAAI6P,EAAIC,EAEZ,SAASuyB,IAGLT,KACAU,KAAK3H,KAAK,eAAgB,CACtBtrB,SAAU,KACN4F,EAAQqtB,KAAKC,QAAQC,aAAa,EAEtCC,UAAW,KAOPb,KACAj8B,EAAOpH,EAAaE,EAAM,0BAAqE,EAEnGw2B,QAAS0M,GAAgB7gC,OAEjC,CACA,GAAqF,QAAhF+O,EAA+B,QAAzB7P,EAAKw1B,KAAU8M,YAAyB,IAAPtiC,OAAgB,EAASA,EAAGuiC,eAA4B,IAAP1yB,OAAgB,EAASA,EAAG6yB,OAErHztB,EAAQqtB,KAAKC,QAAQC,kBAEpB,MAAiC,QAAzB1yB,EAAK0lB,KAAU8M,YAAyB,IAAPxyB,OAAgB,EAASA,EAAG6qB,MAIrE,CAMD,MAAMgI,EAASnkB,GAAsB,aAarC,OAXAgX,KAAUmN,GAAU,KAEVL,KAAK3H,KACP0H,IAIA18B,EAAOpH,EAAaE,EAAM,0BAC9B,EAGG8f,GAAQ,GAz7MhBL,GAAmBI,qBAy7M2BqkB,KACxCxjB,OAAMra,GAAKa,EAAOb,IAC3B,CAvBIu9B,GAuBJ,KACDljB,OAAMlhB,IAGL,MADA2kC,GAAmB,KACb3kC,CAAK,GAEnB,CACA,IAAI2kC,GAAmB,KAsBvB,MAAMC,GAAe,IAAItiC,EAAM,IAAM,MAC/BuiC,GAAc,iBACdC,GAAuB,uBACvBC,GAAoB,CACtBjhB,MAAO,CACHE,SAAU,WACVgP,IAAK,SACL/O,MAAO,MACP+gB,OAAQ,OAEZ,cAAe,OACfC,SAAU,MAIRC,GAAmB,IAAIzyB,IAAI,CAC7B,CAAC,iCAA+D,KAChE,CAAC,iDAAkD,KACnD,CAAC,8CAA+C,OAEpD,SAAS0yB,GAAa3kC,GAClB,MAAM4C,EAAS5C,EAAK4C,OACpB5B,EAAQ4B,EAAOqY,WAAYjb,EAAM,+BACjC,MAAM+C,EAAMH,EAAOE,SACbH,EAAaC,EAAQ0hC,IACrB,WAAWtkC,EAAK4C,OAAOqY,cAAcopB,KACrC9/B,EAAS,CACXM,OAAQjC,EAAOiC,OACftE,QAASP,EAAKQ,KACd+hC,EAAGhkC,EAAIkB,aAELmlC,EAAMF,GAAiBriC,IAAIrC,EAAK4C,OAAOqC,SACzC2/B,IACArgC,EAAOqgC,IAAMA,GAEjB,MAAM7uB,EAAa/V,EAAKye,iBAIxB,OAHI1I,EAAWzN,SACX/D,EAAOsgC,GAAK9uB,EAAWG,KAAK,MAEzB,GAAGnT,KAAOzE,EAAKqG,YAAYJ,GAAQzD,MAAM,IACpD,CACAmD,eAAe6gC,GAAY9kC,GACvB,MAAM+kC,QA/DV,SAAmB/kC,GAEf,OADAmkC,GAAmBA,IAAoBR,GAAS3jC,GACzCmkC,EACX,CA4D0Ba,CAAUhlC,GAC1B6jC,EAAO9M,KAAU8M,KAEvB,OADA7iC,EAAQ6iC,EAAM7jC,EAAM,kBACb+kC,EAAQlN,KAAK,CAChBoN,MAAO9hB,SAAS7e,KAChBvB,IAAK4hC,GAAa3kC,GAClBklC,sBAAuBrB,EAAKC,QAAQqB,4BACpCC,WAAYb,GACZc,WAAW,IACXC,GAAW,IAAI//B,SAAQtB,MAAOuS,EAAStP,WACjCo+B,EAAOC,QAAQ,CAEjBC,gBAAgB,IAEpB,MAAMC,EAAe3lC,EAAaE,EAAM,0BAGlC0lC,EAAoB3O,KAAU5vB,YAAW,KAC3CD,EAAOu+B,EAAa,GACrBrB,GAAa/hC,OAEhB,SAASsjC,IACL5O,KAAU3vB,aAAas+B,GACvBlvB,EAAQ8uB,EACZ,CAGAA,EAAOM,KAAKD,GAAsBxnB,KAAKwnB,GAAsB,KACzDz+B,EAAOu+B,EAAa,GACtB,KAEV,CAkBA,MAAMI,GAAqB,CACvBpkC,SAAU,MACVqkC,UAAW,MACXC,UAAW,MACXC,QAAS,MAMb,MAAMC,GACF,WAAArlC,CAAY2f,GACRte,KAAKse,OAASA,EACdte,KAAKg+B,gBAAkB,IAC3B,CACA,KAAA3J,GACI,GAAIr0B,KAAKse,OACL,IACIte,KAAKse,OAAO+V,OAChB,CACA,MAAOjwB,GAAK,CAEpB,EAEJ,SAAS6/B,GAAMlmC,EAAM+C,EAAKvC,EAAMijB,EAlBV,IAkBiC+gB,EAjBhC,KAkBnB,MAAMhS,EAAM/vB,KAAKsJ,KAAKwU,OAAO4lB,OAAOC,YAAc5B,GAAU,EAAG,GAAG35B,WAC5DiZ,EAAOrhB,KAAKsJ,KAAKwU,OAAO4lB,OAAOE,WAAa5iB,GAAS,EAAG,GAAG5Y,WACjE,IAAIorB,EAAS,GACb,MAAMvX,EAAUte,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAGwlC,IAAqB,CAAEpiB,MAAOA,EAAM5Y,WAAY25B,OAAQA,EAAO35B,WAAY2nB,MACvH1O,SAGEjP,EAAKvW,EAAKmX,QAAQtP,cACpB3F,IACAy1B,EAAS7gB,GAAaP,GA1BT,SA0B8BrU,GAE3CwU,GAAWH,KAEX9R,EAAMA,GA7BY,mBAgClB2b,EAAQ4nB,WAAa,OAEzB,MAAMC,EAAgBnmC,OAAOomC,QAAQ9nB,GAAS+nB,QAAO,CAACC,GAAQ9hC,EAAK+N,KAAW,GAAG+zB,IAAQ9hC,KAAO+N,MAAU,IAC1G,GAngPJ,SAA0BkC,EAAKvW,EAAKmX,SAChC,IAAIlU,EACJ,OAAOoU,GAAOd,OAAsC,QAA3BtT,EAAKgf,OAAOje,iBAA8B,IAAPf,OAAgB,EAASA,EAAGolC,WAC5F,CAggPQC,CAAiB/xB,IAAkB,UAAXohB,EAExB,OAaR,SAA4BlzB,EAAKkzB,GAC7B,MAAM/S,EAAKC,SAASC,cAAc,KAClCF,EAAGxhB,KAAOqB,EACVmgB,EAAG+S,OAASA,EACZ,MAAM4Q,EAAQ1jB,SAAS2jB,YAAY,cACnCD,EAAME,eAAe,SAAS,GAAM,EAAMxmB,OAAQ,EAAG,EAAG,EAAG,EAAG,GAAG,GAAO,GAAO,GAAO,EAAO,EAAG,MAChG2C,EAAG8jB,cAAcH,EACrB,CArBQI,CAAmBlkC,GAAO,GAAIkzB,GACvB,IAAIgQ,GAAU,MAIzB,MAAMiB,EAAS3mB,OAAOsX,KAAK90B,GAAO,GAAIkzB,EAAQsQ,GAC9CvlC,EAAQkmC,EAAQlnC,EAAM,iBAEtB,IACIknC,EAAOC,OACX,CACA,MAAO9gC,GAAK,CACZ,OAAO,IAAI4/B,GAAUiB,EACzB,CA+BA,MAAME,GAAc,kBAMdC,GAAuB,wBAMvBC,GAAiCC,mBAAmB,OAC1DtjC,eAAeujC,GAAgBxnC,EAAMuI,EAAUk/B,EAAUC,EAAa1S,EAAS2S,GAC3E3mC,EAAQhB,EAAK4C,OAAOqY,WAAYjb,EAAM,+BACtCgB,EAAQhB,EAAK4C,OAAOiC,OAAQ7E,EAAM,mBAClC,MAAMuE,EAAS,CACXM,OAAQ7E,EAAK4C,OAAOiC,OACpBtE,QAASP,EAAKQ,KACdinC,WACAC,cACAnF,EAAGhkC,EAAIkB,YACPu1B,WAEJ,GAAIzsB,aAAoB6gB,GAAuB,CAC3C7gB,EAASghB,mBAAmBvpB,EAAK+E,cACjCR,EAAO4I,WAAa5E,EAAS4E,YAAc,GACtC7O,EAAKspC,QAAQr/B,EAASmhB,yBACvBnlB,EAAO+kB,iBAAmB9kB,KAAKC,UAAU8D,EAASmhB,wBAGtD,IAAK,MAAO9kB,EAAK+N,KAAUvS,OAAOomC,QAAQmB,GAAoB,CAAC,GAC3DpjC,EAAOK,GAAO+N,CAEtB,CACA,GAAIpK,aAAoBohB,GAAmB,CACvC,MAAMC,EAASrhB,EAASwhB,YAAYlc,QAAOic,GAAmB,KAAVA,IAChDF,EAAOthB,OAAS,IAChB/D,EAAOqlB,OAASA,EAAO1T,KAAK,KAEpC,CACIlW,EAAKgE,WACLO,EAAOsjC,IAAM7nC,EAAKgE,UAItB,MAAM8jC,EAAavjC,EACnB,IAAK,MAAMK,KAAOxE,OAAOwyB,KAAKkV,QACFlgC,IAApBkgC,EAAWljC,WACJkjC,EAAWljC,GAI1B,MAAMoa,QAAsBhf,EAAKif,oBAC3B8oB,EAAwB/oB,EACxB,IAAIsoB,MAAkCC,mBAAmBvoB,KACzD,GAEN,MAAO,GAEX,UAAwB,OAAEpc,IACtB,IAAKA,EAAOE,SACR,MAAO,WAAWF,EAAOqY,cAAcmsB,KAE3C,OAAOzkC,EAAaC,EAAQykC,GAChC,CAPcW,CAAehoC,MAAS1B,EAAKqG,YAAYmjC,GAAYhnC,MAAM,KAAKinC,GAC9E,CA4BA,MAAME,GAA0B,oBA0FhC,MAAMC,GAzFN,MACI,WAAAtnC,GACIqB,KAAKkmC,cAAgB,CAAC,EACtBlmC,KAAK6hC,QAAU,CAAC,EAChB7hC,KAAKmmC,yBAA2B,CAAC,EACjCnmC,KAAK0b,qBAAuByW,GAC5BnyB,KAAK0Z,oBAAsBqlB,GAC3B/+B,KAAKuZ,wBAA0BA,EACnC,CAGA,gBAAMwkB,CAAWhgC,EAAMuI,EAAUk/B,EAAUzS,GACvC,IAAIzzB,EACJF,EAAuD,QAA1CE,EAAKU,KAAKkmC,cAAcnoC,EAAK+S,eAA4B,IAAPxR,OAAgB,EAASA,EAAGwO,QAAS,gDAEpG,OAAOm2B,GAAMlmC,QADKwnC,GAAgBxnC,EAAMuI,EAAUk/B,EAAUnmC,IAAkB0zB,GACtDc,KAC5B,CACA,mBAAMuS,CAAcroC,EAAMuI,EAAUk/B,EAAUzS,SACpC/yB,KAAKi+B,kBAAkBlgC,GAG7B,OAxgFR,SAA4B+C,GACxBg0B,KAAUt1B,SAASC,KAAOqB,CAC9B,CAqgFQulC,OADkBd,GAAgBxnC,EAAMuI,EAAUk/B,EAAUnmC,IAAkB0zB,IAEvE,IAAIzvB,SAAQ,QACvB,CACA,WAAAkV,CAAYza,GACR,MAAM4E,EAAM5E,EAAK+S,OACjB,GAAI9Q,KAAKkmC,cAAcvjC,GAAM,CACzB,MAAM,QAAEmL,EAAO,QAAEtK,GAAYxD,KAAKkmC,cAAcvjC,GAChD,OAAImL,EACOxK,QAAQiR,QAAQzG,IAGvB1O,EAAYoE,EAAS,4CACdA,EAEf,CACA,MAAMA,EAAUxD,KAAKsmC,kBAAkBvoC,GAOvC,OANAiC,KAAKkmC,cAAcvjC,GAAO,CAAEa,WAG5BA,EAAQib,OAAM,YACHze,KAAKkmC,cAAcvjC,EAAI,IAE3Ba,CACX,CACA,uBAAM8iC,CAAkBvoC,GACpB,MAAMslC,QAAeR,GAAY9kC,GAC3B+P,EAAU,IAAIoxB,GAAiBnhC,GASrC,OARAslC,EAAOkD,SAAS,aAAcC,IAC1BznC,EAAQynC,aAAiD,EAASA,EAAYC,UAAW1oC,EAAM,sBAG/F,MAAO,CAAEiY,OADOlI,EAAQ8xB,QAAQ4G,EAAYC,WACjB,MAA8B,QAAiC,GAC3F7E,KAAKC,QAAQqB,6BAChBljC,KAAKkmC,cAAcnoC,EAAK+S,QAAU,CAAEhD,WACpC9N,KAAK6hC,QAAQ9jC,EAAK+S,QAAUuyB,EACrBv1B,CACX,CACA,4BAAAowB,CAA6BngC,EAAMie,GAChBhc,KAAK6hC,QAAQ9jC,EAAK+S,QAC1B41B,KAAKV,GAAyB,CAAE11B,KAAM01B,KAA2B5sB,IACpE,IAAI9Z,EACJ,MAAM6+B,EAAmF,QAApE7+B,EAAK8Z,aAAuC,EAASA,EAAO,UAAuB,IAAP9Z,OAAgB,EAASA,EAAG0mC,SACzGrgC,IAAhBw4B,GACAniB,IAAKmiB,GAET1gC,EAAMM,EAAM,iBAAoD,GACjE6jC,KAAKC,QAAQqB,4BACpB,CACA,iBAAAjF,CAAkBlgC,GACd,MAAM4E,EAAM5E,EAAK+S,OAIjB,OAHK9Q,KAAKmmC,yBAAyBxjC,KAC/B3C,KAAKmmC,yBAAyBxjC,GApgB1CX,eAA+BjE,GAE3B,GAAIA,EAAK4C,OAAOE,SACZ,OAEJ,MAAM,kBAAE8lC,SAA4BpG,GAAkBxiC,GACtD,IAAK,MAAM6oC,KAAUD,EACjB,IACI,GAAIjG,GAAYkG,GACZ,MAER,CACA,MAAOtnC,GAEP,CAGJ7B,EAAMM,EAAM,sBAChB,CAkfiD8oC,CAAgB9oC,IAElDiC,KAAKmmC,yBAAyBxjC,EACzC,CACA,0BAAI4V,GAEA,OAAO5E,MAAsBT,MAAeQ,IAChD,GAaJ,MAAMozB,GACF,WAAAnoC,CAAYqsB,GACRhrB,KAAKgrB,SAAWA,CACpB,CACA,QAAA0D,CAAS3wB,EAAMswB,EAAS/iB,GACpB,OAAQ+iB,EAAQ/d,MACZ,IAAK,SACD,OAAOtQ,KAAK+mC,gBAAgBhpC,EAAMswB,EAAQxH,WAAYvb,GAC1D,IAAK,SACD,OAAOtL,KAAKgnC,gBAAgBjpC,EAAMswB,EAAQxH,YAC9C,QACI,OAAO5nB,EAAU,qCAE7B,EAQJ,MAAMgoC,WAAsCH,GACxC,WAAAnoC,CAAYkoB,GACRlD,MAAM,SACN3jB,KAAK6mB,WAAaA,CACtB,CAEA,sBAAOqgB,CAAgBrgB,GACnB,OAAO,IAAIogB,GAA8BpgB,EAC7C,CAEA,eAAAkgB,CAAgBhpC,EAAM2M,EAASY,GAC3B,OAtyGR,SAAgCvN,EAAM+D,GAClC,OAAOG,EAAmBlE,EAAM,OAA8B,sCAA8E8D,EAAmB9D,EAAM+D,GACzK,CAoyGeqlC,CAAuBppC,EAAM,CAChC2M,UACAY,cACA87B,sBAAuBpnC,KAAK6mB,WAAWpB,4BAE/C,CAEA,eAAAuhB,CAAgBjpC,EAAMkwB,GAClB,OA9tER,SAAgClwB,EAAM+D,GAClC,OAAOG,EAAmBlE,EAAM,OAA8B,kCAAuE8D,EAAmB9D,EAAM+D,GAClK,CA4tEeulC,CAAuBtpC,EAAM,CAChCkwB,uBACAmZ,sBAAuBpnC,KAAK6mB,WAAWpB,4BAE/C,EAOJ,MAAM6hB,GACF,WAAA3oC,GAAgB,CAWhB,gBAAOK,CAAU6nB,GACb,OAAOogB,GAA8BC,gBAAgBrgB,EACzD,EAKJygB,GAA0BC,UAAY,QAOtC,MAAMC,GAWF,6BAAOC,CAAuB7iB,EAAQ8iB,GAClC,OAAOC,GAA6BC,YAAYhjB,EAAQ8iB,EAC5D,CAUA,yBAAOG,CAAmBC,EAAcJ,GACpC,OAAOC,GAA6BI,kBAAkBD,EAAcJ,EACxE,CAUA,2BAAaM,CAAe3Z,GACxB,IAAI/uB,EACJ,MAAM2oC,EAAa5Z,EACnBtvB,OAAyF,KAA9C,QAA1BO,EAAK2oC,EAAW9gC,YAAyB,IAAP7H,OAAgB,EAASA,EAAGvB,MAAuB,kBACtG,MAAM0D,QAv3Gc1D,EAu3GsBkqC,EAAW9gC,KAAKpJ,KAv3GhC+D,EAu3GsC,CAC5D4I,QAASu9B,EAAWphB,WACpBqhB,mBAAoB,CAAC,GAx3GtBjmC,EAAmBlE,EAAM,OAA8B,mCAAwE8D,EAAmB9D,EAAM+D,KADnK,IAA4B/D,EAAM+D,EA23G1B,OAAOqmC,GAAWC,oCAAoC3mC,EAAUwmC,EAAW9gC,KAAKpJ,KACpF,EAKJypC,GAAyBD,UAAY,OACrC,MAAMI,WAAqCb,GACvC,WAAAnoC,CAAY0pC,EAAKP,EAAcljB,GAC3BjB,MAAM,QACN3jB,KAAKqoC,IAAMA,EACXroC,KAAK8nC,aAAeA,EACpB9nC,KAAK4kB,OAASA,CAClB,CAEA,kBAAOgjB,CAAYhjB,EAAQyjB,GACvB,OAAO,IAAIV,GAA6BU,OAAK1iC,EAAWif,EAC5D,CAEA,wBAAOmjB,CAAkBD,EAAcO,GACnC,OAAO,IAAIV,GAA6BU,EAAKP,EACjD,CAEA,qBAAMf,CAAgBhpC,EAAM2M,EAASY,GAEjC,OADAvM,OAA+B,IAAhBiB,KAAK4kB,OAAwB7mB,EAAM,kBAh5G1D,SAA+BA,EAAM+D,GACjC,OAAOG,EAAmBlE,EAAM,OAA8B,sCAA8E8D,EAAmB9D,EAAM+D,GACzK,CA+4GewmC,CAAsBvqC,EAAM,CAC/B2M,UACAY,cACAi9B,qBAAsBvoC,KAAK4kB,OAAO4jB,0BAA0BxoC,KAAKqoC,MAEzE,CAEA,qBAAMrB,CAAgBjpC,EAAMkwB,GACxBlvB,OAA8B4G,IAAtB3F,KAAK8nC,mBAA2CniC,IAAb3F,KAAKqoC,IAAmBtqC,EAAM,kBACzE,MAAMwqC,EAAuB,CAAEljB,iBAAkBrlB,KAAKqoC,KACtD,OA90ER,SAA+BtqC,EAAM+D,GACjC,OAAOG,EAAmBlE,EAAM,OAA8B,kCAAuE8D,EAAmB9D,EAAM+D,GAClK,CA40Ee2mC,CAAsB1qC,EAAM,CAC/BkwB,uBACAhD,gBAAiBjrB,KAAK8nC,aACtBS,wBAER,EASJ,MAAMJ,GAEF,WAAAxpC,CAAY+pC,EAAWC,EAAkBC,EAAYC,EAAqBC,EAA8BjjB,EAAa9nB,GACjHiC,KAAK6lB,YAAcA,EACnB7lB,KAAKjC,KAAOA,EACZiC,KAAK0oC,UAAYA,EACjB1oC,KAAK2oC,iBAAmBA,EACxB3oC,KAAK4oC,WAAaA,EAClB5oC,KAAK6oC,oBAAsBA,EAC3B7oC,KAAK8oC,6BAA+BA,CACxC,CAEA,0CAAOV,CAAoC3mC,EAAU1D,GACjD,OAAO,IAAIoqC,GAAW1mC,EAASsnC,gBAAgBC,gBAAiBvnC,EAASsnC,gBAAgBJ,iBAAkBlnC,EAASsnC,gBAAgBE,uBAAwBxnC,EAASsnC,gBAAgBG,UAAW,IAAIriC,KAAKpF,EAASsnC,gBAAgBI,wBAAwBliC,cAAexF,EAASsnC,gBAAgBljB,YAAa9nB,EACnT,CAEA,yBAAAyqC,CAA0BH,GACtB,MAAO,CAAExiB,YAAa7lB,KAAK6lB,YAAaR,iBAAkBgjB,EAC9D,CAWA,iBAAAe,CAAkBC,EAAaC,GAC3B,IAAIhqC,EACJ,IAAIiqC,GAAc,EAYlB,OAXIC,GAAeH,IAAgBG,GAAeF,MAC9CC,GAAc,GAEdA,IACIC,GAAeH,KACfA,GAAgD,QAAhC/pC,EAAKU,KAAKjC,KAAKiL,mBAAgC,IAAP1J,OAAgB,EAASA,EAAG+F,QAAU,eAE9FmkC,GAAeF,KACfA,EAAStpC,KAAKjC,KAAKQ,OAGpB,kBAAkB+qC,KAAUD,YAAsBrpC,KAAK0oC,oBAAoBY,eAAoBtpC,KAAK2oC,2BAA2B3oC,KAAK4oC,YAC/I,EAGJ,SAASY,GAAeC,GACpB,YAAwB,IAAVA,GAA0F,KAAhEA,aAAqC,EAASA,EAAMpjC,OAChG,CAEA,IAAI9H,GAAO,iBACPogB,GAAU,QAkBd,MAAM+qB,GACF,WAAA/qC,CAAYZ,GACRiC,KAAKjC,KAAOA,EACZiC,KAAK2pC,kBAAoB,IAAI35B,GACjC,CACA,MAAA45B,GACI,IAAItqC,EAEJ,OADAU,KAAK6pC,wBACoC,QAAhCvqC,EAAKU,KAAKjC,KAAKiL,mBAAgC,IAAP1J,OAAgB,EAASA,EAAG8L,MAAQ,IACzF,CACA,cAAM+B,CAAS/F,GAGX,GAFApH,KAAK6pC,6BACC7pC,KAAKjC,KAAK0Z,wBACXzX,KAAKjC,KAAKiL,YACX,OAAO,KAGX,MAAO,CAAE4D,kBADiB5M,KAAKjC,KAAKiL,YAAYxB,WAAWJ,GAE/D,CACA,oBAAA0iC,CAAqBxY,GAEjB,GADAtxB,KAAK6pC,uBACD7pC,KAAK2pC,kBAAkBpf,IAAI+G,GAC3B,OAEJ,MAAMlW,EAAcpb,KAAKjC,KAAKmd,kBAAiB/T,IAC3CmqB,GAAUnqB,aAAmC,EAASA,EAAKyC,gBAAgBgD,cAAgB,KAAK,IAEpG5M,KAAK2pC,kBAAkBv5B,IAAIkhB,EAAUlW,GACrCpb,KAAK+pC,wBACT,CACA,uBAAAC,CAAwB1Y,GACpBtxB,KAAK6pC,uBACL,MAAMzuB,EAAcpb,KAAK2pC,kBAAkBvpC,IAAIkxB,GAC1ClW,IAGLpb,KAAK2pC,kBAAkB7X,OAAOR,GAC9BlW,IACApb,KAAK+pC,yBACT,CACA,oBAAAF,GACI9qC,EAAQiB,KAAKjC,KAAK0Z,uBAAwB,wCAC9C,CACA,sBAAAsyB,GACQ/pC,KAAK2pC,kBAAkB5X,KAAO,EAC9B/xB,KAAKjC,KAAK6Q,yBAGV5O,KAAKjC,KAAK8Q,uBAElB,EA8FJ,MACMo7B,GAAoB5tC,EAAK6tC,uBAAuB,sBADrB,IAEjC,IAAIC,GAAoB,KA7sOxB,IAipOsBt2B,GAhpOlB2J,GAwwOmB,CACnB,MAAAC,CAAO3c,GAEH,OAAO,IAAIwC,SAAQ,CAACiR,EAAStP,KACzB,MAAMgc,EAAKC,SAASC,cAAc,UAR9C,IACQ7hB,EAAI6P,EAQA8R,EAAGmpB,aAAa,MAAOtpC,GACvBmgB,EAAGsZ,OAAShmB,EACZ0M,EAAGopB,QAAUjmC,IACT,MAAM7G,EAAQM,EAAa,kBAC3BN,EAAMgI,WAAanB,EACnBa,EAAO1H,EAAM,EAEjB0jB,EAAG3Q,KAAO,kBACV2Q,EAAGqpB,QAAU,SAfqF,QAAlGn7B,EAAsD,QAAhD7P,EAAK4hB,SAASqpB,qBAAqB,eAA4B,IAAPjrC,OAAgB,EAASA,EAAG,UAAuB,IAAP6P,EAAgBA,EAAK+R,UAgBtGiB,YAAYlB,EAAG,GAEhD,EACArD,WAAY,oCACZF,kBAAmB,0CACnBC,0BAA2B,0DA3IT9J,GA6IT,UA5ITvX,EAAIkuC,mBAAmB,IAAI/tC,EAAUguC,UAAU,QAAkC,CAAC9R,GAAalc,QAASkD,MACpG,MAAMrjB,EAAMq8B,EAAU+R,YAAY,OAAO9tB,eACnChG,EAA2B+hB,EAAU+R,YAAY,aACjD7zB,EAA0B8hB,EAAU+R,YAAY,uBAChD,OAAE9nC,EAAM,WAAEoW,GAAe1c,EAAImgB,QACnC1d,EAAQ6D,IAAWA,EAAOiQ,SAAS,KAAM,kBAAuD,CAAEvU,QAAShC,EAAIiC,OAC/G,MAAMoC,EAAS,CACXiC,SACAoW,aACAnF,kBACA7Q,QAAS,iCACTuK,aAAc,6BACd3I,UAAW,QACXuT,iBAAkBvE,GAAkBC,KAElCsL,EAAe,IAAIxI,GAASra,EAAKsa,EAA0BC,EAAyBlW,GAE1F,OAl7NR,SAAiC5C,EAAM4hB,GACnC,MAAMvO,GAAeuO,aAAmC,EAASA,EAAKvO,cAAgB,GAChFu5B,GAAah7B,MAAMC,QAAQwB,GAAeA,EAAc,CAACA,IAAcnG,IAAIgF,KAC7E0P,aAAmC,EAASA,EAAKzhB,WACjDH,EAAK6c,gBAAgB+E,EAAKzhB,UAK9BH,EAAKqa,2BAA2BuyB,EAAWhrB,aAAmC,EAASA,EAAKtH,sBAChG,CAu6NQuyB,CAAwBzrB,EAAcQ,GAC/BR,CAAY,GACpB,UAKE0rB,qBAAqB,YAKrBC,4BAA2B,CAACnS,EAAWoS,EAAqBC,KAChCrS,EAAU+R,YAAY,iBAC9BzpC,YAAY,KAErC3E,EAAIkuC,mBAAmB,IAAI/tC,EAAUguC,UAAU,iBAAoD9R,GAExF,CAAC56B,GAAQ,IAAI2rC,GAAY3rC,GAAzB,CADMsf,GAAUsb,EAAU+R,YAAY,QAAkC9tB,kBAEhF,WAAuCiuB,qBAAqB,aAC/DvuC,EAAI2uC,gBAAgB1sC,GAAMogB,GAtD9B,SAA+B9K,GAC3B,OAAQA,GACJ,IAAK,OACD,MAAO,OACX,IAAK,cACD,MAAO,KACX,IAAK,SACD,MAAO,YACX,IAAK,UACD,MAAO,UACX,IAAK,eACD,MAAO,gBACX,QACI,OAEZ,CAuCuCq3B,CAAsBr3B,KAEzDvX,EAAI2uC,gBAAgB1sC,GAAMogB,GAAS,WAwGvCwsB,EAAQC,2CA1+T2C,CAC/CC,qBAAsB,kCACtBC,eAAgB,sBAChBC,mBAAoB,0BACpBC,kBAAmB,yBACnBC,qBAAsB,4BACtBC,aAAc,oBACdC,kBAAmB,yBACnBC,iBAAkB,wBAClBC,0BAA2B,iCAC3BC,oBAAqB,6BACrBC,+BAAgC,6BAChCC,+BAAgC,6CAChCC,2BAA4B,kCAC5BC,gCAAiC,uCACjCC,aAAc,4BACdC,uBAAwB,8BACxBC,iBAAkB,2BAClBC,sBAAuB,+BACvBC,eAAgB,sBAChBC,gBAAiB,uBACjBC,uBAAwB,8BACxBC,eAAgB,sBAChBC,aAAc,0BACdC,mBAAoB,0BACpBC,kBAAmB,yBACnBC,aAAc,iCACdC,qBAAsB,4BACtBC,8BAA+B,qCAC/BC,qBAAsB,4BACtBC,4BAA6B,mCAC7BC,cAAe,qBACfC,wBAAyB,+BACzBC,qBAAsB,0BACtBC,0BAA2B,0BAC3BC,wBAAyB,+BACzBC,oBAAqB,oCACrBC,wBAAyB,+BACzBC,uBAAwB,8BACxBC,iBAAkB,2BAClBC,eAAgB,2BAChBC,iBAAkB,sBAClBC,oBAAqB,gCACrBC,qBAAsB,4BACtBC,oBAAqB,2BACrBC,wBAAyB,+BACzBC,eAAgB,sBAChBC,qBAAsB,+BACtBC,kBAAmB,yBACnBC,mBAAoB,mCACpBC,aAAc,kCACdC,6BAA8B,gCAC9BC,uBAAwB,8BACxBC,oBAAqB,mCACrBC,aAAc,iCACdC,qBAAsB,4BACtBC,qBAAsB,4BACtBC,sBAAuB,6BACvBC,yBAA0B,gCAC1BC,iBAAkB,iCAClBC,oBAAqB,oCACrBC,qBAAsB,4BACtBC,qBAAsB,+BACtBC,iBAAkB,mBAClBC,kBAAmB,gDACnBC,uBAAwB,8BACxBC,UAAW,iBACXC,cAAe,qBACfC,iBAAkB,wBAClBC,sBAAuB,6BACvBC,wBAAyB,mDACzBC,cAAe,qBACfC,qBAAsB,4BACtBC,wBAAyB,+BACzBC,eAAgB,sBAChBC,2BAA4B,kCAC5BC,2BAA4B,kCAC5BC,oBAAqB,2BACrBC,+BAAgC,oCAChCC,6BAA8B,4CAC9BC,mBAAoB,0BACpBC,QAAS,eACTC,cAAe,0BACfC,4BAA6B,yBAC7BC,oBAAqB,iCACrBC,yBAA0B,gCAC1BC,wBAAyB,oCACzBC,6BAA8B,oCAC9BC,iBAAkB,wBAClBC,eAAgB,sBAChBC,aAAc,sBACdC,cAAe,qBACfC,cAAe,qBACfC,gBAAiB,uBACjBC,cAAe,qBACfC,wBAAyB,+BACzBC,oBAAqB,2BACrBC,sBAAuB,6BACvBC,wBAAyB,+BACzBC,wBAAyB,+BACzBC,yBAA0B,gCAC1BC,oBAAqB,2BACrBC,0BAA2B,iCAC3BC,0BAA2B,iCAC3BC,iBAAkB,yBAm4TtBzG,EAAQ0G,oBA/sUoB,CAExBC,aAAc,eAEdC,eAAgB,iBAEhBC,cAAe,gBAEfC,8BAA+B,gCAE/BC,wBAAyB,0BAEzBC,aAAc,gBAosUlBhH,EAAQrlB,cAAgBA,GACxBqlB,EAAQzoB,eAAiBA,GACzByoB,EAAQjM,iBAAmBA,GAC3BiM,EAAQx0B,SAAWA,GACnBw0B,EAAQnH,UAAYA,GACpBmH,EAAQ5nB,oBAAsBA,GAC9B4nB,EAAQxkB,kBAAoBA,GAC5BwkB,EAAQziB,qBAAuBA,GAC/ByiB,EAAQiH,SAvxUS,CAEbC,MAAO,QACPC,KAAM,QAqxUVnH,EAAQnqC,cAAgBA,EACxBmqC,EAAQpiB,mBAAqBA,GAC7BoiB,EAAQtiB,mBAAqBA,GAC7BsiB,EAAQ/mB,gBAAkBA,GAC1B+mB,EAAQpjB,cAAgBA,GACxBojB,EAAQoH,cA3uUc,CAElBC,KAAM,OAENC,eAAgB,iBAEhBC,QAAS,UAsuUbvH,EAAQjmB,oBAAsBA,GAC9BimB,EAAQrP,kBAAoBA,GAC5BqP,EAAQ7D,0BAA4BA,GACpC6D,EAAQwH,WAvxUW,CAEfC,SAAU,eAEVC,OAAQ,aAERC,OAAQ,aAERC,SAAU,WAEVV,MAAO,QAEPW,QAAS,eA4wUb7H,EAAQ8H,kBAr5ER,MAoBI,WAAAt0C,CAAYwf,EAAY6a,EAAeJ,EAAaz6B,OAAOC,OAAO,CAAC,EAAGu8B,KAClE36B,KAAK44B,WAAaA,EAOlB54B,KAAKsQ,KAAOoqB,GACZ16B,KAAKkzC,WAAY,EACjBlzC,KAAKs6B,SAAW,KAChBt6B,KAAKmzC,qBAAuB,IAAIjpB,IAChClqB,KAAKozC,cAAgB,KACrBpzC,KAAKq6B,UAAY,KACjBr6B,KAAKjC,KAAOsf,GAAUc,GACtBne,KAAKqzC,YAAuC,cAAzBrzC,KAAK44B,WAAW7G,KACnChzB,EAA4B,oBAAbmiB,SAA0BlhB,KAAKjC,KAAM,+CACpD,MAAM46B,EAAqC,iBAAlBK,EACnB9X,SAASkY,eAAeJ,GACxBA,EACNj6B,EAAQ45B,EAAW34B,KAAKjC,KAAM,kBAC9BiC,KAAK24B,UAAYA,EACjB34B,KAAK44B,WAAWjqB,SAAW3O,KAAKszC,kBAAkBtzC,KAAK44B,WAAWjqB,UAClE3O,KAAKuzC,iBAAmBvzC,KAAKjC,KAAKia,SAASC,kCACrC,IAAIwiB,GACJ,IAAIX,GACV95B,KAAKwzC,uBAET,CAMA,YAAMp1B,GACFpe,KAAKyzC,qBACL,MAAM73B,QAAW5b,KAAK04B,SAChB2B,EAAYr6B,KAAK0zC,uBACjBjyC,EAAW44B,EAAUz0B,YAAYgW,GACvC,OAAIna,GAGG,IAAI6B,SAAQiR,IACf,MAAMo/B,EAAepsC,IACZA,IAGLvH,KAAKmzC,qBAAqBrhB,OAAO6hB,GACjCp/B,EAAQhN,GAAM,EAElBvH,KAAKmzC,qBAAqBjxB,IAAIyxB,GAC1B3zC,KAAKqzC,aACLhZ,EAAU7b,QAAQ5C,EACtB,GAER,CAMA,MAAA8c,GACI,IACI14B,KAAKyzC,oBACT,CACA,MAAOrvC,GAIH,OAAOd,QAAQ2B,OAAOb,EAC1B,CACA,OAAIpE,KAAKozC,gBAGTpzC,KAAKozC,cAAgBpzC,KAAK4zC,oBAAoBn1B,OAAMra,IAEhD,MADApE,KAAKozC,cAAgB,KACfhvC,CAAC,KAJApE,KAAKozC,aAOpB,CAEA,MAAAvX,GACI77B,KAAKyzC,qBACiB,OAAlBzzC,KAAKs6B,UACLt6B,KAAK0zC,uBAAuB5a,MAAM94B,KAAKs6B,SAE/C,CAIA,KAAA8F,GACIpgC,KAAKyzC,qBACLzzC,KAAKkzC,WAAY,EACjBlzC,KAAKuzC,iBAAiB/Y,qBACjBx6B,KAAKqzC,aACNrzC,KAAK24B,UAAUkb,WAAW9T,SAAQ+T,IAC9B9zC,KAAK24B,UAAUob,YAAYD,EAAK,GAG5C,CACA,qBAAAN,GACIz0C,GAASiB,KAAK44B,WAAWob,QAASh0C,KAAKjC,KAAM,kBAC7CgB,EAAQiB,KAAKqzC,cAAgBrzC,KAAK24B,UAAUsb,gBAAiBj0C,KAAKjC,KAAM,kBACxEgB,EAA4B,oBAAbmiB,SAA0BlhB,KAAKjC,KAAM,8CACxD,CACA,iBAAAu1C,CAAkBY,GACd,OAAO3sC,IAEH,GADAvH,KAAKmzC,qBAAqBpT,SAAQzO,GAAYA,EAAS/pB,KAC/B,mBAAb2sC,EACPA,EAAS3sC,QAER,GAAwB,iBAAb2sC,EAAuB,CACnC,MAAMC,EAAarf,KAAUof,GACH,mBAAfC,GACPA,EAAW5sC,EAEnB,EAER,CACA,kBAAAksC,GACI10C,GAASiB,KAAKkzC,UAAWlzC,KAAKjC,KAAM,iBACxC,CACA,uBAAM61C,GAEF,SADM5zC,KAAKo0C,QACNp0C,KAAKs6B,SAAU,CAChB,IAAI3B,EAAY34B,KAAK24B,UACrB,IAAK34B,KAAKqzC,YAAa,CACnB,MAAMgB,EAAkBnzB,SAASC,cAAc,OAC/CwX,EAAUxW,YAAYkyB,GACtB1b,EAAY0b,CAChB,CACAr0C,KAAKs6B,SAAWt6B,KAAK0zC,uBAAuBhb,OAAOC,EAAW34B,KAAK44B,WACvE,CACA,OAAO54B,KAAKs6B,QAChB,CACA,UAAM8Z,GACFr1C,EAAQW,MAAqBq1B,KAAa/0B,KAAKjC,KAAM,wBAY7D,WACI,IAAI0d,EAAW,KACf,OAAO,IAAInY,SAAQiR,IACa,aAAxB2M,SAASmB,YAOb5G,EAAW,IAAMlH,IACjB+J,OAAOgE,iBAAiB,OAAQ7G,IAP5BlH,GAOqC,IAC1CkK,OAAMra,IAIL,MAHIqX,GACA6C,OAAOuT,oBAAoB,OAAQpW,GAEjCrX,CAAC,GAEf,CA7BckwC,GACNt0C,KAAKq6B,gBAAkBr6B,KAAKuzC,iBAAiBtZ,KAAKj6B,KAAKjC,KAAMiC,KAAKjC,KAAK+E,mBAAgB6C,GACvF,MAAMK,QA5/NdhE,eAAkCjE,GAC9B,aAAekE,EAAmBlE,EAAM,MAA4B,wBAA2Dw2C,kBAAoB,EACvJ,CA0/N8BC,CAAmBx0C,KAAKjC,MAC9CgB,EAAQiH,EAAShG,KAAKjC,KAAM,kBAC5BiC,KAAK44B,WAAWob,QAAUhuC,CAC9B,CACA,oBAAA0tC,GAEI,OADA30C,EAAQiB,KAAKq6B,UAAWr6B,KAAKjC,KAAM,kBAC5BiC,KAAKq6B,SAChB,GAgvEJ8Q,EAAQliB,mBAAqBA,GAC7BkiB,EAAQhiB,iBAAmBA,GAC3BgiB,EAAQsJ,aAxwUa,CAEjBC,WAAY,YAEZC,eAAgB,WAEhB/B,SAAU,eAEVC,OAAQ,aAERC,OAAQ,aAERT,MAAO,QAEPW,QAAS,eA2vUb7H,EAAQ3D,yBAA2BA,GACnC2D,EAAQhD,WAAaA,GACrBgD,EAAQ9hB,oBAAsBA,GAC9B8hB,EAAQh9B,SAAWA,EACnBg9B,EAAQpsC,QAAUA,EAClBosC,EAAQ9tB,UAAYA,GACpB8tB,EAAQyJ,uBA15CR,WACIrW,GAAmB6B,OACvB,EAy5CA+K,EAAQttC,aAAeA,EACvBstC,EAAQ1tC,MAAQA,EAChB0tC,EAAQtX,iBAAmBA,GAC3BsX,EAAQv3B,kBAAoBA,GAC5Bu3B,EAAQl7B,aAAeA,GACvBk7B,EAAQ5K,kBAAoBA,GAC5B4K,EAAQpM,mBAAqBA,GAC7BoM,EAAQ5F,gBAAkBA,GAC1B4F,EAAQ/3B,WAAaA,GACrB+3B,EAAQz3B,OAASA,GACjBy3B,EAAQ0J,WAruQR,SAAoBjiC,EAAKvW,EAAKmX,SAC1B,MAAQ,+BAA+BC,KAAKb,IACxC,+BAA+Ba,KAAKb,EAC5C,EAmuQAu4B,EAAQ5xB,wBAA0BA,GAClC4xB,EAAQj6B,oBAAsBA,GAC9Bi6B,EAAQ2J,gBAxwJR9yC,eAA+BjE,EAAM+lB,SA7nErC9hB,eAAiCjE,EAAM+D,GACnC,OAAOG,EAAmBlE,EAAM,OAA8B,sBAAuD8D,EAAmB9D,EAAM+D,GAClJ,CA4nEUizC,CAAkB14C,EAAKiL,mBAAmBvJ,GAAO,CAAE+lB,WAC7D,EAuwJAqnB,EAAQlwB,uBAAyBA,GACjCkwB,EAAQnZ,wBAA0BA,GAClCmZ,EAAQlF,6BAA+BA,GACvCkF,EAAQhZ,0BAA4BA,GACpCgZ,EAAQ1e,gBAAkBA,GAC1B0e,EAAQ6J,qBApyJRhzC,eAAoCjE,EAAM+lB,EAASmxB,SACzChyB,GAAc5mB,EAAKiL,mBAAmBvJ,GAAO,CAC/C+lB,UACAmxB,gBAECx2B,OAAMzc,MAAOzE,IAKd,KAHI,6CADAA,EAAMS,MAEDwuB,GAAsBzuB,GAEzBR,CAAK,GAGnB,EAwxJA4tC,EAAQlrB,oBAAsBA,GAC9BkrB,EAAQ+J,+BA1rJRlzC,eAA8CjE,EAAMsH,EAAO0Q,GACvD,MAAMmK,EAAe7C,GAAUtf,GAOzBo3C,EAAiBj2B,GAAoBgB,EAN3B,CACZ8D,mBAAmB,EACnB3e,QACA0Q,WACA2I,WAAY,mBAEkD,iBAA6D6K,IACzH9nB,QAAiB0zC,EAAe12B,OAAMlhB,IAIxC,KAHmB,6CAAfA,EAAMS,MACDwuB,GAAsBzuB,GAEzBR,CAAK,IAET6qB,QAAuBoB,GAAmB3Z,qBAAqBqQ,EAAc,SAAsCze,GAEzH,aADMye,EAAatH,mBAAmBwP,EAAejhB,MAC9CihB,CACX,EAyqJA+iB,EAAQ/rC,YAAcA,EACtB+rC,EAAQxuC,cAAgBA,EACxBwuC,EAAQiK,WAv6HRpzC,eAA0BmF,GACtB,OAAO9K,EAAKiL,mBAAmBH,GAAM2qB,QACzC,EAs6HAqZ,EAAQkK,2BA19IRrzC,eAA0CjE,EAAMsH,GAI5C,MACMvD,EAAU,CACZwzC,WAAYjwC,EACZkwC,YAHgB71C,IAAmBL,IAAmB,qBAKpD,cAAEm2C,SA/CZxzC,eAA6BjE,EAAM+D,GAC/B,OAAOG,EAAmBlE,EAAM,OAA8B,6BAA6D8D,EAAmB9D,EAAM+D,GACxJ,CA6CoC2zC,CAAcp5C,EAAKiL,mBAAmBvJ,GAAO+D,GAC7E,OAAO0zC,GAAiB,EAC5B,EAg9IArK,EAAQuK,sBA9oIR,SAA+BttB,GAC3B,MAAM,KAAEjhB,EAAI,eAAE3B,GAAmB4iB,EACjC,OAAIjhB,EAAK8E,cAAgBzG,EAGd,CACH0F,WAAY,KACZkiB,WAAW,EACXC,QAAS,MAzFrB,SAA8Bvd,GAC1B,IAAIxQ,EAAI6P,EACR,IAAKW,EACD,OAAO,KAEX,MAAM,WAAE5E,GAAe4E,EACjBud,EAAUvd,EAAgB6lC,YAC1BpzC,KAAKoG,MAAMmH,EAAgB6lC,aAC3B,CAAC,EACDvoB,EAAYtd,EAAgBsd,WACL,0CAAzBtd,EAAgB8lC,KACpB,IAAK1qC,IAAe4E,aAAyD,EAASA,EAAgBpF,SAAU,CAC5G,MAAM3C,EAAyH,QAAvGoH,EAAqD,QAA/C7P,EAAKoI,EAAYoI,EAAgBpF,gBAA6B,IAAPpL,OAAgB,EAASA,EAAGwI,gBAA6B,IAAPqH,OAAgB,EAASA,EAAqB,iBACrL,GAAIpH,EAMA,OAAO,IAAIolB,GAA0BC,EALS,cAAnBrlB,GACJ,WAAnBA,EACEA,EACA,KAId,CACA,IAAKmD,EACD,OAAO,KAEX,OAAQA,GACJ,IAAK,eACD,OAAO,IAAIsiB,GAA2BJ,EAAWC,GACrD,IAAK,aACD,OAAO,IAAII,GAAyBL,EAAWC,GACnD,IAAK,aACD,OAAO,IAAIM,GAAyBP,EAAWC,GACnD,IAAK,cACD,OAAO,IAAIO,GAA0BR,EAAWC,EAASvd,EAAgB+d,YAAc,MAC3F,IAAK,SACL,IAAK,YACD,OAAO,IAAIV,GAA0BC,EAAW,MACpD,QACI,OAAO,IAAID,GAA0BC,EAAWliB,EAAYmiB,GAExE,CAoDWxd,CAAqBrK,EAChC,EAmoIA2lC,EAAQ0K,QA/GR,SAAiBn2B,EAAQpjB,EAAIw5C,UACzB,MAAMxvC,EAAWhK,EAAIsjB,aAAaF,EAAO,QACzC,GAAIpZ,EAASuZ,gBACT,OAAOvZ,EAASsW,eAEpB,MAAM7e,EAAO0hB,GAAeC,EAAO,CAC/BrH,sBAAuB4tB,GACvB70B,YAAa,CACTinB,GACArG,GACAG,MAGF4jB,EAAmB15C,EAAK6tC,uBAAuB,oBACrD,GAAI6L,EAAkB,CAClB,MAAMC,GA7Cal1C,EA6CkBi1C,EA7CV/zC,MAAOmF,IACtC,MAAM8uC,EAAgB9uC,SAAeA,EAAKD,mBACpCgvC,EAAaD,KACd,IAAIpvC,MAAOG,UAAYH,KAAK8B,MAAMstC,EAAc/tC,eAAiB,IACtE,GAAIguC,GAAcA,EAAajM,GAC3B,OAGJ,MAAMv/B,EAAUurC,aAAqD,EAASA,EAAc1uC,MACxF4iC,KAAsBz/B,IAG1By/B,GAAoBz/B,QACdrJ,MAAMP,EAAK,CACboB,OAAQwI,EAAU,OAAS,SAC3BnJ,QAASmJ,EACH,CACE,cAAiB,UAAUA,KAE7B,CAAC,IACT,GA0BEuQ,GAAuBld,EAAMi4C,GAAY,IAAMA,EAAWj4C,EAAKiL,eAC/DkS,GAAiBnd,GAAMoJ,GAAQ6uC,EAAW7uC,IAC9C,CAhDsB,IAACrG,EAiDvB,MAAMq1C,EAAmB95C,EAAK+5C,uBAAuB,QAIrD,OAHID,GACAl2B,GAAoBliB,EAAM,UAAUo4C,KAEjCp4C,CACX,EAwFAotC,EAAQ3jC,WAzrSR,SAAoBL,EAAMC,GAAe,GACrC,OAAO/K,EAAKiL,mBAAmBH,GAAMK,WAAWJ,EACpD,EAwrSA+jC,EAAQjkC,iBAAmBA,EAC3BikC,EAAQkL,uBApzHR,SAAgCt4C,EAAMR,GAClC,IAAI+B,EACJ,MAAMotB,EAAcrwB,EAAKiL,mBAAmBvJ,GACtCu4C,EAAgB/4C,EAGtB,OAFAwB,EAAQxB,EAAMgI,WAAWkkB,cAAeiD,EAAa,kBACrD3tB,EAA4D,QAAnDO,EAAKg3C,EAAc/wC,WAAWd,uBAAoC,IAAPnF,OAAgB,EAASA,EAAG2uB,qBAAsBvB,EAAa,kBAC5H0B,GAAwBI,WAAW9B,EAAa4pB,EAC3D,EA8yHAnL,EAAQoL,kBA3tCRv0C,eAAiCjE,EAAM0d,GAEnC,aADM4B,GAAUtf,GAAM0Z,uBACfsnB,GAAmBhhC,EAAM0d,GAAU,EAC9C,EAytCA0vB,EAAQl6B,oBAAsBA,GAC9Bk6B,EAAQ9S,0BAA4BA,GACpC8S,EAAQ1rB,eAAiBA,GACzB0rB,EAAQqL,0BAnkIR,SAAmCz4C,GAC/B,OA3nGJiE,eAA0CjE,GACtC,MAAMmiB,EAAe7C,GAAUtf,GACzB0D,QAAiBgF,EAAmByZ,EAAc,CACpDxB,WAAY,kBACZC,QAAS,yBAEPhe,EAAS,IAAIoF,EAAgBtE,GACN,MAAzBye,EAAane,SACbme,EAAavI,sBAAwBhX,EAGrCuf,EAAatI,wBAAwBsI,EAAane,UAAYpB,EAE9DA,EAAO6F,kBAAkB,4BACR,IAAI0X,GAA4BgC,GACnC9B,QAEtB,CA0mGWq4B,CAA2B14C,EACtC,EAkkIAotC,EAAQuL,sBA7kJR,SAA+B34C,EAAMgpB,GACjC,MAAMC,EAAgBlB,GAAcQ,UAAUS,GAC9C,MAAmG,kBAA3FC,aAAqD,EAASA,EAAcrB,UACxF,EA2kJAwlB,EAAQtgB,mBAAqBA,GAC7BsgB,EAAQwL,oBA/rER30C,eAAmCmF,EAAM7B,EAAasxC,GAClD,MAAMvvC,EAAehL,EAAKiL,mBAAmBH,SACvCkjB,IAAoB,EAAOhjB,EAAc,SAC/C,MAAM+d,QAAuB6V,GAAmB5zB,EAAatJ,KAAMuH,EAAajJ,EAAKiL,mBAAmBsvC,IACxG,OAAO,IAAI/b,GAAuBzV,GAAgBZ,GAAQqG,GAAmBxjB,EAAcmd,IAC/F,EA2rEA2mB,EAAQ0L,cA1nDR70C,eAA6BmF,EAAMb,EAAUmV,GACzC,MAAMpU,EAAehL,EAAKiL,mBAAmBH,GAC7C3I,EAAkB6I,EAAatJ,KAAMuI,EAAU6gB,IAC/C,MAAM2vB,EAAmB5a,GAAqB70B,EAAatJ,KAAM0d,GAEjE,OADe,IAAIgiB,GAAep2B,EAAatJ,KAAM,eAAmDuI,EAAUwwC,EAAkBzvC,GACtHy2B,gBAClB,EAqnDAqN,EAAQ4L,iBA7xCR,SAA0B5vC,EAAMb,EAAUmV,GACtC,OAEJzZ,eAAiCmF,EAAMb,EAAUmV,GAC7C,MAAMpU,EAAehL,EAAKiL,mBAAmBH,GAC7C3I,EAAkB6I,EAAatJ,KAAMuI,EAAU6gB,UAIzC9f,EAAatJ,KAAK0Z,uBAExB,MAAMq/B,EAAmB5a,GAAqB70B,EAAatJ,KAAM0d,SAC3D4O,IAAoB,EAAOhjB,EAAcf,EAAS4E,kBAClD4zB,GAA0BgY,EAAkBzvC,EAAatJ,MAC/D,MAAMg1B,QAAgBkM,GAAuB53B,GAC7C,OAAOyvC,EAAiB1Q,cAAc/+B,EAAatJ,KAAMuI,EAAU,kBAAyDysB,EAChI,CAfWikB,CAAkB7vC,EAAMb,EAAUmV,EAC7C,EA4xCA0vB,EAAQ8L,YAztHR,SAAqB9vC,GACjB,MAAM+vC,EAAc76C,EAAKiL,mBAAmBH,GAI5C,OAHKkoB,GAAqB9E,IAAI2sB,IAC1B7nB,GAAqBjf,IAAI8mC,EAAaroB,GAAoBE,UAAUmoB,IAEjE7nB,GAAqBjvB,IAAI82C,EACpC,EAotHA/L,EAAQtwB,mBA7/HR,SAA4B9c,EAAM+c,EAAgBvd,EAAOwd,GACrD,OAAO1e,EAAKiL,mBAAmBvJ,GAAM8c,mBAAmBC,EAAgBvd,EAAOwd,EACnF,EA4/HAowB,EAAQjwB,iBAAmBA,GAC3BiwB,EAAQgM,mBAr1MR,SAA4B5wB,GACxB,OAAOT,GAAcQ,UAAUC,EACnC,EAo1MA4kB,EAAQvuC,aAAeA,EACvBuuC,EAAQrgB,6BAA+BA,GACvCqgB,EAAQiM,8BAprERp1C,eAA6CmF,EAAM7B,EAAasxC,GAC5D,MAAMvvC,EAAehL,EAAKiL,mBAAmBH,GACvCie,QAAuB6V,GAAmB5zB,EAAatJ,KAAMuH,EAAajJ,EAAKiL,mBAAmBsvC,IACxG,OAAO,IAAI/b,GAAuBzV,GAAgBZ,GAAQsG,GAA6BzjB,EAAcmd,IACzG,EAirEA2mB,EAAQkM,wBAnqDRr1C,eAAuCmF,EAAMb,EAAUmV,GACnD,MAAMpU,EAAehL,EAAKiL,mBAAmBH,GAC7C3I,EAAkB6I,EAAatJ,KAAMuI,EAAU6gB,IAC/C,MAAM2vB,EAAmB5a,GAAqB70B,EAAatJ,KAAM0d,GAEjE,OADe,IAAIgiB,GAAep2B,EAAatJ,KAAM,iBAAuDuI,EAAUwwC,EAAkBzvC,GAC1Hy2B,gBAClB,EA8pDAqN,EAAQmM,2BAp1CR,SAAoCnwC,EAAMb,EAAUmV,GAChD,OAEJzZ,eAA2CmF,EAAMb,EAAUmV,GACvD,MAAMpU,EAAehL,EAAKiL,mBAAmBH,GAC7C3I,EAAkB6I,EAAatJ,KAAMuI,EAAU6gB,UAIzC9f,EAAatJ,KAAK0Z,uBAExB,MAAMq/B,EAAmB5a,GAAqB70B,EAAatJ,KAAM0d,SAC3DqjB,GAA0BgY,EAAkBzvC,EAAatJ,MAC/D,MAAMg1B,QAAgBkM,GAAuB53B,GAC7C,OAAOyvC,EAAiB1Q,cAAc/+B,EAAatJ,KAAMuI,EAAU,oBAA6DysB,EACpI,CAdWwkB,CAA4BpwC,EAAMb,EAAUmV,EACvD,EAm1CA0vB,EAAQ5+B,OAASA,EACjB4+B,EAAQ9vB,kBAl9HR,SAA2Btd,EAAMwJ,GAE7B,OADqB8V,GAAUtf,GACXsd,kBAAkB9T,EAC1C,EAg9HA4jC,EAAQqM,sBA38IRx1C,eAAqCmF,EAAMukB,GACvC,MAAMrkB,EAAehL,EAAKiL,mBAAmBH,GAEvCrF,EAAU,CACZ6qB,YAAa,eACbjiB,cAHkBvD,EAAKK,cAKvBkkB,GACAD,GAAgCpkB,EAAatJ,KAAM+D,EAAS4pB,GAEhE,MAAM,MAAErmB,SAj9EZrD,eAAuCjE,EAAM+D,GACzC,OAAOshB,GAAYrlB,EAAM+D,EAC7B,CA+8E4B21C,CAAwBpwC,EAAatJ,KAAM+D,GAC/DuD,IAAU8B,EAAK9B,aACT8B,EAAKoF,QAEnB,EA87IA4+B,EAAQuM,uBA31JR11C,eAAsCjE,EAAMsH,EAAOqmB,GAC/C,MAAMxL,EAAe7C,GAAUtf,GACzB+D,EAAU,CACZ6qB,YAAa,iBACbtnB,QACAqZ,WAAY,mBAEZgN,GACAD,GAAgCvL,EAAcpe,EAAS4pB,SAErDxM,GAAoBgB,EAAcpe,EAAS,aAAqDuhB,GAC1G,EAi1JA8nB,EAAQwM,sBAvnJR31C,eAAqCjE,EAAMsH,EAAOqmB,GAC9C,MAAMxL,EAAe7C,GAAUtf,GACzB+D,EAAU,CACZ6qB,YAAa,eACbtnB,QACAqZ,WAAY,oBAEhB,SAA+B5c,EAAS4pB,GACpC3sB,EAAQ2sB,EAAmBG,gBAAiB3L,EAAc,kBACtDwL,GACAD,GAAgCvL,EAAcpe,EAAS4pB,EAE/D,CACAksB,CAAsB91C,EAAS4pB,SACzBxM,GAAoBgB,EAAcpe,EAAS,aAAqDwhB,GAC1G,EAymJA6nB,EAAQn5B,eArnIR,SAAwBjU,EAAMqT,GAC1B,OAAO/U,EAAKiL,mBAAmBvJ,GAAMiU,eAAeZ,EACxD,EAonIA+5B,EAAQ0M,kBAvzKR71C,eAAiCjE,GAC7B,IAAIuB,EACJ,MAAM4gB,EAAe7C,GAAUtf,GAE/B,SADMmiB,EAAazI,uBACqB,QAAnCnY,EAAK4gB,EAAalX,mBAAgC,IAAP1J,OAAgB,EAASA,EAAG2M,YAExE,OAAO,IAAIud,GAAmB,CAC1BriB,KAAM+Y,EAAalX,YACnBkC,WAAY,KACZue,cAAe,WAGvB,MAAMhoB,QAAiB8nB,GAAOrJ,EAAc,CACxC8D,mBAAmB,IAEjBoE,QAAuBoB,GAAmB3Z,qBAAqBqQ,EAAc,SAAsCze,GAAU,GAEnI,aADMye,EAAatH,mBAAmBwP,EAAejhB,MAC9CihB,CACX,EAsyKA+iB,EAAQvgB,qBAAuBA,GAC/BugB,EAAQ2M,sBAxgKR91C,eAAqCjE,EAAMg6C,GACvC,MAAM73B,EAAe7C,GAAUtf,GACzB0D,QAtCVO,eAAuCjE,EAAM+D,GACzC,OAAOyC,EAAsBxG,EAAM,OAA8B,qCAA+E8D,EAAmB9D,EAAM+D,GAC7K,CAoC2Bk2C,CAAwB93B,EAAc,CACzD3Y,MAAOwwC,EACP/zB,mBAAmB,IAEjBQ,QAAagF,GAAmB3Z,qBAAqBqQ,EAAc,SAAsCze,GAE/G,aADMye,EAAatH,mBAAmB4L,EAAKrd,MACpCqd,CACX,EAggKA2mB,EAAQ8M,2BA3rJR,SAAoCl6C,EAAMsH,EAAO0Q,GAC7C,OAAO6U,GAAqBvuB,EAAKiL,mBAAmBvJ,GAAO4oB,GAAkBE,WAAWxhB,EAAO0Q,IAAW0I,OAAMzc,MAAOzE,IAInH,KAHmB,6CAAfA,EAAMS,MACDwuB,GAAsBzuB,GAEzBR,CAAK,GAEnB,EAqrJA4tC,EAAQ+M,oBA5jJRl2C,eAAmCjE,EAAMsH,EAAO0hB,GAC5C,MAAM2F,EAAcrwB,EAAKiL,mBAAmBvJ,GACtC8oB,EAAaF,GAAkBG,mBAAmBzhB,EAAO0hB,GAAa1nB,KAI5E,OADAN,EAAQ8nB,EAAWnD,aAAegJ,EAAY3qB,UAAY,MAAO2qB,EAAa,sBACvE9B,GAAqB8B,EAAa7F,EAC7C,EAsjJAskB,EAAQgN,sBAvuERn2C,eAAqCjE,EAAMuH,EAAasxC,GACpD,MAAM12B,EAAe7C,GAAUtf,GACzBqnB,QAAuB6V,GAAmB/a,EAAc5a,EAAajJ,EAAKiL,mBAAmBsvC,IACnG,OAAO,IAAI/b,GAAuBzV,GAAgBZ,GAAQoG,GAAqB1K,EAAcsE,IACjG,EAouEA2mB,EAAQiN,gBAntDRp2C,eAA+BjE,EAAMuI,EAAUmV,GAC3C,MAAMyE,EAAe7C,GAAUtf,GAC/BS,EAAkBT,EAAMuI,EAAU6gB,IAClC,MAAM2vB,EAAmB5a,GAAqBhc,EAAczE,GAE5D,OADe,IAAIgiB,GAAevd,EAAc,iBAAwD5Z,EAAUwwC,GACpGhZ,gBAClB,EA8sDAqN,EAAQkN,mBAl5CR,SAA4Bt6C,EAAMuI,EAAUmV,GACxC,OAEJzZ,eAAmCjE,EAAMuI,EAAUmV,GAC/C,MAAMyE,EAAe7C,GAAUtf,GAC/BS,EAAkBT,EAAMuI,EAAU6gB,UAI5BjH,EAAazI,uBACnB,MAAMq/B,EAAmB5a,GAAqBhc,EAAczE,GAE5D,aADMqjB,GAA0BgY,EAAkB52B,GAC3C42B,EAAiB1Q,cAAclmB,EAAc5Z,EAAU,oBAClE,CAZWgyC,CAAoBv6C,EAAMuI,EAAUmV,EAC/C,EAi5CA0vB,EAAQliC,QA1+HR,SAAiBlL,GACb,OAAO1B,EAAKiL,mBAAmBvJ,GAAMkL,SACzC,EAy+HAkiC,EAAQoN,OA5sKRv2C,eAAsBmF,EAAM+D,GACxB,MAAM7D,EAAehL,EAAKiL,mBAAmBH,SACvCkjB,IAAoB,EAAMhjB,EAAc6D,GAC9C,MAAM,iBAAEF,SA3lIZhJ,eAAoCjE,EAAM+D,GACtC,OAAOG,EAAmBlE,EAAM,OAA8B,sBAAuD+D,EACzH,CAylIuC02C,CAAqBnxC,EAAatJ,KAAM,CACvE2M,cAAerD,EAAaG,aAC5BixC,eAAgB,CAACvtC,KAEfwtC,EAAgBzuB,GAAoBjf,GAAoB,IAM9D,OALA3D,EAAaoE,aAAepE,EAAaoE,aAAaG,QAAO+sC,GAAMD,EAAcnuB,IAAIouB,EAAGztC,cACnFwtC,EAAcnuB,IAAI,WACnBljB,EAAa/B,YAAc,YAEzB+B,EAAatJ,KAAKyO,sBAAsBnF,GACvCA,CACX,EA+rKA8jC,EAAQjxB,kBAt/HR,SAA2Bnc,EAAMoJ,GAC7B,OAAO9K,EAAKiL,mBAAmBvJ,GAAMmc,kBAAkB/S,EAC3D,EAq/HAgkC,EAAQyN,YAh0IR,SAAqBzxC,EAAMylB,GACvB,OAAOK,GAAsB5wB,EAAKiL,mBAAmBH,GAAOylB,EAAU,KAC1E,EA+zIAue,EAAQ0N,eAjzIR,SAAwB1xC,EAAM8tC,GAC1B,OAAOhoB,GAAsB5wB,EAAKiL,mBAAmBH,GAAO,KAAM8tC,EACtE,EAgzIA9J,EAAQ2N,kBApnER92C,eAAiCmF,EAAM0f,SAC7BuD,GAAQ/tB,EAAKiL,mBAAmBH,GAAO0f,EACjD,EAmnEAskB,EAAQ4N,cA72IR/2C,eAA6BmF,GAAM,YAAEmE,EAAaC,SAAUC,IACxD,QAAoB7F,IAAhB2F,QAA0C3F,IAAb6F,EAC7B,OAEJ,MAAMnE,EAAehL,EAAKiL,mBAAmBH,GAEvC6xC,EAAiB,CACnBtuC,cAFkBrD,EAAaG,aAG/B8D,cACAE,WACAwY,mBAAmB,GAEjBviB,QAAiBoH,EAAqBxB,EAxChDrF,eAA+BjE,EAAM+D,GACjC,OAAOG,EAAmBlE,EAAM,OAA8B,sBAAuD+D,EACzH,CAsC8Dm3C,CAAgB5xC,EAAatJ,KAAMi7C,IAC7F3xC,EAAaiE,YAAc7J,EAAS6J,aAAe,KACnDjE,EAAakE,SAAW9J,EAAS+J,UAAY,KAE7C,MAAM0tC,EAAmB7xC,EAAaoE,aAAainB,MAAK,EAAGxnB,gBAAgC,aAAfA,IACxEguC,IACAA,EAAiB5tC,YAAcjE,EAAaiE,YAC5C4tC,EAAiB3tC,SAAWlE,EAAakE,gBAEvClE,EAAayH,yBAAyBrN,EAChD,EAw1IA0pC,EAAQvxB,kBAhhIR,SAA2B7b,GACvB1B,EAAKiL,mBAAmBvJ,GAAM6b,mBAClC,EA+gIAuxB,EAAQr1B,iBA9kIR9T,eAAgCjE,EAAMgY,GAElC,OADqBsH,GAAUtf,GACX+X,iBAAiBC,EACzC,EA4kIAo1B,EAAQgO,wBA/6IRn3C,eAAuCmF,EAAMylB,EAAUlB,GACnD,MAAMrkB,EAAehL,EAAKiL,mBAAmBH,GAEvCrF,EAAU,CACZ6qB,YAAa,0BACbjiB,cAHkBvD,EAAKK,aAIvBolB,YAEAlB,GACAD,GAAgCpkB,EAAatJ,KAAM+D,EAAS4pB,GAEhE,MAAM,MAAErmB,SA1/EZrD,eAAoCjE,EAAM+D,GACtC,OAAOshB,GAAYrlB,EAAM+D,EAC7B,CAw/E4Bs3C,CAAqB/xC,EAAatJ,KAAM+D,GAC5DuD,IAAU8B,EAAK9B,aAGT8B,EAAKoF,QAEnB,EA+5IA4+B,EAAQkO,wBArwJRr3C,eAAuCjE,EAAMC,GACzC,MAAM,KAAE+uB,SAAeN,GAAgBpwB,EAAKiL,mBAAmBvJ,GAAOC,GAEtE,OAAO+uB,EAAK1nB,KAChB","sources":["webpack://gopals-over-full-stack-v2/./node_modules/@firebase/auth/dist/browser-cjs/index-ae17685c.js"],"sourcesContent":["'use strict';\n\nvar util = require('@firebase/util');\nvar app = require('@firebase/app');\nvar logger = require('@firebase/logger');\nvar tslib = require('tslib');\nvar component = require('@firebase/component');\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An enum of factors that may be used for multifactor authentication.\r\n *\r\n * @public\r\n */\r\nconst FactorId = {\r\n    /** Phone as second factor */\r\n    PHONE: 'phone',\r\n    TOTP: 'totp'\r\n};\r\n/**\r\n * Enumeration of supported providers.\r\n *\r\n * @public\r\n */\r\nconst ProviderId = {\r\n    /** Facebook provider ID */\r\n    FACEBOOK: 'facebook.com',\r\n    /** GitHub provider ID */\r\n    GITHUB: 'github.com',\r\n    /** Google provider ID */\r\n    GOOGLE: 'google.com',\r\n    /** Password provider */\r\n    PASSWORD: 'password',\r\n    /** Phone provider */\r\n    PHONE: 'phone',\r\n    /** Twitter provider ID */\r\n    TWITTER: 'twitter.com'\r\n};\r\n/**\r\n * Enumeration of supported sign-in methods.\r\n *\r\n * @public\r\n */\r\nconst SignInMethod = {\r\n    /** Email link sign in method */\r\n    EMAIL_LINK: 'emailLink',\r\n    /** Email/password sign in method */\r\n    EMAIL_PASSWORD: 'password',\r\n    /** Facebook sign in method */\r\n    FACEBOOK: 'facebook.com',\r\n    /** GitHub sign in method */\r\n    GITHUB: 'github.com',\r\n    /** Google sign in method */\r\n    GOOGLE: 'google.com',\r\n    /** Phone sign in method */\r\n    PHONE: 'phone',\r\n    /** Twitter sign in method */\r\n    TWITTER: 'twitter.com'\r\n};\r\n/**\r\n * Enumeration of supported operation types.\r\n *\r\n * @public\r\n */\r\nconst OperationType = {\r\n    /** Operation involving linking an additional provider to an already signed-in user. */\r\n    LINK: 'link',\r\n    /** Operation involving using a provider to reauthenticate an already signed-in user. */\r\n    REAUTHENTICATE: 'reauthenticate',\r\n    /** Operation involving signing in a user. */\r\n    SIGN_IN: 'signIn'\r\n};\r\n/**\r\n * An enumeration of the possible email action types.\r\n *\r\n * @public\r\n */\r\nconst ActionCodeOperation = {\r\n    /** The email link sign-in action. */\r\n    EMAIL_SIGNIN: 'EMAIL_SIGNIN',\r\n    /** The password reset action. */\r\n    PASSWORD_RESET: 'PASSWORD_RESET',\r\n    /** The email revocation action. */\r\n    RECOVER_EMAIL: 'RECOVER_EMAIL',\r\n    /** The revert second factor addition email action. */\r\n    REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',\r\n    /** The revert second factor addition email action. */\r\n    VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',\r\n    /** The email verification action. */\r\n    VERIFY_EMAIL: 'VERIFY_EMAIL'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction _debugErrorMap() {\r\n    return {\r\n        [\"admin-restricted-operation\" /* AuthErrorCode.ADMIN_ONLY_OPERATION */]: 'This operation is restricted to administrators only.',\r\n        [\"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */]: '',\r\n        [\"app-not-authorized\" /* AuthErrorCode.APP_NOT_AUTHORIZED */]: \"This app, identified by the domain where it's hosted, is not \" +\r\n            'authorized to use Firebase Authentication with the provided API key. ' +\r\n            'Review your key configuration in the Google API console.',\r\n        [\"app-not-installed\" /* AuthErrorCode.APP_NOT_INSTALLED */]: 'The requested mobile application corresponding to the identifier (' +\r\n            'Android package name or iOS bundle ID) provided is not installed on ' +\r\n            'this device.',\r\n        [\"captcha-check-failed\" /* AuthErrorCode.CAPTCHA_CHECK_FAILED */]: 'The reCAPTCHA response token provided is either invalid, expired, ' +\r\n            'already used or the domain associated with it does not match the list ' +\r\n            'of whitelisted domains.',\r\n        [\"code-expired\" /* AuthErrorCode.CODE_EXPIRED */]: 'The SMS code has expired. Please re-send the verification code to try ' +\r\n            'again.',\r\n        [\"cordova-not-ready\" /* AuthErrorCode.CORDOVA_NOT_READY */]: 'Cordova framework is not ready.',\r\n        [\"cors-unsupported\" /* AuthErrorCode.CORS_UNSUPPORTED */]: 'This browser is not supported.',\r\n        [\"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */]: 'This credential is already associated with a different user account.',\r\n        [\"custom-token-mismatch\" /* AuthErrorCode.CREDENTIAL_MISMATCH */]: 'The custom token corresponds to a different audience.',\r\n        [\"requires-recent-login\" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: 'This operation is sensitive and requires recent authentication. Log in ' +\r\n            'again before retrying this request.',\r\n        [\"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +\r\n            'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +\r\n            'starting any other Firebase SDK.',\r\n        [\"dynamic-link-not-activated\" /* AuthErrorCode.DYNAMIC_LINK_NOT_ACTIVATED */]: 'Please activate Dynamic Links in the Firebase Console and agree to the terms and ' +\r\n            'conditions.',\r\n        [\"email-change-needs-verification\" /* AuthErrorCode.EMAIL_CHANGE_NEEDS_VERIFICATION */]: 'Multi-factor users must always have a verified email.',\r\n        [\"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */]: 'The email address is already in use by another account.',\r\n        [\"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */]: 'Auth instance has already been used to make a network call. Auth can ' +\r\n            'no longer be configured to use the emulator. Try calling ' +\r\n            '\"connectAuthEmulator()\" sooner.',\r\n        [\"expired-action-code\" /* AuthErrorCode.EXPIRED_OOB_CODE */]: 'The action code has expired.',\r\n        [\"cancelled-popup-request\" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */]: 'This operation has been cancelled due to another conflicting popup being opened.',\r\n        [\"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */]: 'An internal AuthError has occurred.',\r\n        [\"invalid-app-credential\" /* AuthErrorCode.INVALID_APP_CREDENTIAL */]: 'The phone verification request contains an invalid application verifier.' +\r\n            ' The reCAPTCHA token response is either invalid or expired.',\r\n        [\"invalid-app-id\" /* AuthErrorCode.INVALID_APP_ID */]: 'The mobile app identifier is not registed for the current project.',\r\n        [\"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */]: \"This user's credential isn't valid for this project. This can happen \" +\r\n            \"if the user's token has been tampered with, or if the user isn't for \" +\r\n            'the project associated with this API key.',\r\n        [\"invalid-auth-event\" /* AuthErrorCode.INVALID_AUTH_EVENT */]: 'An internal AuthError has occurred.',\r\n        [\"invalid-verification-code\" /* AuthErrorCode.INVALID_CODE */]: 'The SMS verification code used to create the phone auth credential is ' +\r\n            'invalid. Please resend the verification code sms and be sure to use the ' +\r\n            'verification code provided by the user.',\r\n        [\"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */]: 'The continue URL provided in the request is invalid.',\r\n        [\"invalid-cordova-configuration\" /* AuthErrorCode.INVALID_CORDOVA_CONFIGURATION */]: 'The following Cordova plugins must be installed to enable OAuth sign-in: ' +\r\n            'cordova-plugin-buildinfo, cordova-universal-links-plugin, ' +\r\n            'cordova-plugin-browsertab, cordova-plugin-inappbrowser and ' +\r\n            'cordova-plugin-customurlscheme.',\r\n        [\"invalid-custom-token\" /* AuthErrorCode.INVALID_CUSTOM_TOKEN */]: 'The custom token format is incorrect. Please check the documentation.',\r\n        [\"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */]: 'The provided dynamic link domain is not configured or authorized for the current project.',\r\n        [\"invalid-email\" /* AuthErrorCode.INVALID_EMAIL */]: 'The email address is badly formatted.',\r\n        [\"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */]: 'Emulator URL must start with a valid scheme (http:// or https://).',\r\n        [\"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */]: 'Your API key is invalid, please check you have copied it correctly.',\r\n        [\"invalid-cert-hash\" /* AuthErrorCode.INVALID_CERT_HASH */]: 'The SHA-1 certificate hash provided is invalid.',\r\n        [\"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */]: 'The supplied auth credential is incorrect, malformed or has expired.',\r\n        [\"invalid-message-payload\" /* AuthErrorCode.INVALID_MESSAGE_PAYLOAD */]: 'The email template corresponding to this action contains invalid characters in its message. ' +\r\n            'Please fix by going to the Auth email templates section in the Firebase Console.',\r\n        [\"invalid-multi-factor-session\" /* AuthErrorCode.INVALID_MFA_SESSION */]: 'The request does not contain a valid proof of first factor successful sign-in.',\r\n        [\"invalid-oauth-provider\" /* AuthErrorCode.INVALID_OAUTH_PROVIDER */]: 'EmailAuthProvider is not supported for this operation. This operation ' +\r\n            'only supports OAuth providers.',\r\n        [\"invalid-oauth-client-id\" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */]: 'The OAuth client ID provided is either invalid or does not match the ' +\r\n            'specified API key.',\r\n        [\"unauthorized-domain\" /* AuthErrorCode.INVALID_ORIGIN */]: 'This domain is not authorized for OAuth operations for your Firebase ' +\r\n            'project. Edit the list of authorized domains from the Firebase console.',\r\n        [\"invalid-action-code\" /* AuthErrorCode.INVALID_OOB_CODE */]: 'The action code is invalid. This can happen if the code is malformed, ' +\r\n            'expired, or has already been used.',\r\n        [\"wrong-password\" /* AuthErrorCode.INVALID_PASSWORD */]: 'The password is invalid or the user does not have a password.',\r\n        [\"invalid-persistence-type\" /* AuthErrorCode.INVALID_PERSISTENCE */]: 'The specified persistence type is invalid. It can only be local, session or none.',\r\n        [\"invalid-phone-number\" /* AuthErrorCode.INVALID_PHONE_NUMBER */]: 'The format of the phone number provided is incorrect. Please enter the ' +\r\n            'phone number in a format that can be parsed into E.164 format. E.164 ' +\r\n            'phone numbers are written in the format [+][country code][subscriber ' +\r\n            'number including area code].',\r\n        [\"invalid-provider-id\" /* AuthErrorCode.INVALID_PROVIDER_ID */]: 'The specified provider ID is invalid.',\r\n        [\"invalid-recipient-email\" /* AuthErrorCode.INVALID_RECIPIENT_EMAIL */]: 'The email corresponding to this action failed to send as the provided ' +\r\n            'recipient email address is invalid.',\r\n        [\"invalid-sender\" /* AuthErrorCode.INVALID_SENDER */]: 'The email template corresponding to this action contains an invalid sender email or name. ' +\r\n            'Please fix by going to the Auth email templates section in the Firebase Console.',\r\n        [\"invalid-verification-id\" /* AuthErrorCode.INVALID_SESSION_INFO */]: 'The verification ID used to create the phone auth credential is invalid.',\r\n        [\"invalid-tenant-id\" /* AuthErrorCode.INVALID_TENANT_ID */]: \"The Auth instance's tenant ID is invalid.\",\r\n        [\"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */]: 'Login blocked by user-provided method: {$originalMessage}',\r\n        [\"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */]: 'An Android Package Name must be provided if the Android App is required to be installed.',\r\n        [\"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */]: 'Be sure to include authDomain when calling firebase.initializeApp(), ' +\r\n            'by following the instructions in the Firebase console.',\r\n        [\"missing-app-credential\" /* AuthErrorCode.MISSING_APP_CREDENTIAL */]: 'The phone verification request is missing an application verifier ' +\r\n            'assertion. A reCAPTCHA response token needs to be provided.',\r\n        [\"missing-verification-code\" /* AuthErrorCode.MISSING_CODE */]: 'The phone auth credential was created with an empty SMS verification code.',\r\n        [\"missing-continue-uri\" /* AuthErrorCode.MISSING_CONTINUE_URI */]: 'A continue URL must be provided in the request.',\r\n        [\"missing-iframe-start\" /* AuthErrorCode.MISSING_IFRAME_START */]: 'An internal AuthError has occurred.',\r\n        [\"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */]: 'An iOS Bundle ID must be provided if an App Store ID is provided.',\r\n        [\"missing-or-invalid-nonce\" /* AuthErrorCode.MISSING_OR_INVALID_NONCE */]: 'The request does not contain a valid nonce. This can occur if the ' +\r\n            'SHA-256 hash of the provided raw nonce does not match the hashed nonce ' +\r\n            'in the ID token payload.',\r\n        [\"missing-password\" /* AuthErrorCode.MISSING_PASSWORD */]: 'A non-empty password must be provided',\r\n        [\"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */]: 'No second factor identifier is provided.',\r\n        [\"missing-multi-factor-session\" /* AuthErrorCode.MISSING_MFA_SESSION */]: 'The request is missing proof of first factor successful sign-in.',\r\n        [\"missing-phone-number\" /* AuthErrorCode.MISSING_PHONE_NUMBER */]: 'To send verification codes, provide a phone number for the recipient.',\r\n        [\"missing-verification-id\" /* AuthErrorCode.MISSING_SESSION_INFO */]: 'The phone auth credential was created with an empty verification ID.',\r\n        [\"app-deleted\" /* AuthErrorCode.MODULE_DESTROYED */]: 'This instance of FirebaseApp has been deleted.',\r\n        [\"multi-factor-info-not-found\" /* AuthErrorCode.MFA_INFO_NOT_FOUND */]: 'The user does not have a second factor matching the identifier provided.',\r\n        [\"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */]: 'Proof of ownership of a second factor is required to complete sign-in.',\r\n        [\"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */]: 'An account already exists with the same email address but different ' +\r\n            'sign-in credentials. Sign in using a provider associated with this ' +\r\n            'email address.',\r\n        [\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */]: 'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',\r\n        [\"no-auth-event\" /* AuthErrorCode.NO_AUTH_EVENT */]: 'An internal AuthError has occurred.',\r\n        [\"no-such-provider\" /* AuthErrorCode.NO_SUCH_PROVIDER */]: 'User was not linked to an account with the given provider.',\r\n        [\"null-user\" /* AuthErrorCode.NULL_USER */]: 'A null user object was provided as the argument for an operation which ' +\r\n            'requires a non-null user object.',\r\n        [\"operation-not-allowed\" /* AuthErrorCode.OPERATION_NOT_ALLOWED */]: 'The given sign-in provider is disabled for this Firebase project. ' +\r\n            'Enable it in the Firebase console, under the sign-in method tab of the ' +\r\n            'Auth section.',\r\n        [\"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */]: 'This operation is not supported in the environment this application is ' +\r\n            'running on. \"location.protocol\" must be http, https or chrome-extension' +\r\n            ' and web storage must be enabled.',\r\n        [\"popup-blocked\" /* AuthErrorCode.POPUP_BLOCKED */]: 'Unable to establish a connection with the popup. It may have been blocked by the browser.',\r\n        [\"popup-closed-by-user\" /* AuthErrorCode.POPUP_CLOSED_BY_USER */]: 'The popup has been closed by the user before finalizing the operation.',\r\n        [\"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */]: 'User can only be linked to one identity for the given provider.',\r\n        [\"quota-exceeded\" /* AuthErrorCode.QUOTA_EXCEEDED */]: \"The project's quota for this operation has been exceeded.\",\r\n        [\"redirect-cancelled-by-user\" /* AuthErrorCode.REDIRECT_CANCELLED_BY_USER */]: 'The redirect operation has been cancelled by the user before finalizing.',\r\n        [\"redirect-operation-pending\" /* AuthErrorCode.REDIRECT_OPERATION_PENDING */]: 'A redirect sign-in operation is already pending.',\r\n        [\"rejected-credential\" /* AuthErrorCode.REJECTED_CREDENTIAL */]: 'The request contains malformed or mismatching credentials.',\r\n        [\"second-factor-already-in-use\" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */]: 'The second factor is already enrolled on this account.',\r\n        [\"maximum-second-factor-count-exceeded\" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */]: 'The maximum allowed number of second factors on a user has been exceeded.',\r\n        [\"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */]: \"The provided tenant ID does not match the Auth instance's tenant ID\",\r\n        [\"timeout\" /* AuthErrorCode.TIMEOUT */]: 'The operation has timed out.',\r\n        [\"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */]: \"The user's credential is no longer valid. The user must sign in again.\",\r\n        [\"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */]: 'We have blocked all requests from this device due to unusual activity. ' +\r\n            'Try again later.',\r\n        [\"unauthorized-continue-uri\" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */]: 'The domain of the continue URL is not whitelisted.  Please whitelist ' +\r\n            'the domain in the Firebase console.',\r\n        [\"unsupported-first-factor\" /* AuthErrorCode.UNSUPPORTED_FIRST_FACTOR */]: 'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',\r\n        [\"unsupported-persistence-type\" /* AuthErrorCode.UNSUPPORTED_PERSISTENCE */]: 'The current environment does not support the specified persistence type.',\r\n        [\"unsupported-tenant-operation\" /* AuthErrorCode.UNSUPPORTED_TENANT_OPERATION */]: 'This operation is not supported in a multi-tenant context.',\r\n        [\"unverified-email\" /* AuthErrorCode.UNVERIFIED_EMAIL */]: 'The operation requires a verified email.',\r\n        [\"user-cancelled\" /* AuthErrorCode.USER_CANCELLED */]: 'The user did not grant your application the permissions it requested.',\r\n        [\"user-not-found\" /* AuthErrorCode.USER_DELETED */]: 'There is no user record corresponding to this identifier. The user may ' +\r\n            'have been deleted.',\r\n        [\"user-disabled\" /* AuthErrorCode.USER_DISABLED */]: 'The user account has been disabled by an administrator.',\r\n        [\"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */]: 'The supplied credentials do not correspond to the previously signed in user.',\r\n        [\"user-signed-out\" /* AuthErrorCode.USER_SIGNED_OUT */]: '',\r\n        [\"weak-password\" /* AuthErrorCode.WEAK_PASSWORD */]: 'The password must be 6 characters long or more.',\r\n        [\"web-storage-unsupported\" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */]: 'This browser is not supported or 3rd party cookies and data may be disabled.',\r\n        [\"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */]: 'initializeAuth() has already been called with ' +\r\n            'different options. To avoid this error, call initializeAuth() with the ' +\r\n            'same options as when it was originally called, or call getAuth() to return the' +\r\n            ' already initialized instance.',\r\n        [\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */]: 'The reCAPTCHA token is missing when sending request to the backend.',\r\n        [\"invalid-recaptcha-token\" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */]: 'The reCAPTCHA token is invalid when sending request to the backend.',\r\n        [\"invalid-recaptcha-action\" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */]: 'The reCAPTCHA action is invalid when sending request to the backend.',\r\n        [\"recaptcha-not-enabled\" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */]: 'reCAPTCHA Enterprise integration is not enabled for this project.',\r\n        [\"missing-client-type\" /* AuthErrorCode.MISSING_CLIENT_TYPE */]: 'The reCAPTCHA client type is missing when sending request to the backend.',\r\n        [\"missing-recaptcha-version\" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */]: 'The reCAPTCHA version is missing when sending request to the backend.',\r\n        [\"invalid-req-type\" /* AuthErrorCode.INVALID_REQ_TYPE */]: 'Invalid request parameters.',\r\n        [\"invalid-recaptcha-version\" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */]: 'The reCAPTCHA version is invalid when sending request to the backend.',\r\n        [\"unsupported-password-policy-schema-version\" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */]: 'The password policy received from the backend uses a schema version that is not supported by this version of the Firebase SDK.',\r\n        [\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */]: 'The password does not meet the requirements.'\r\n    };\r\n}\r\nfunction _prodErrorMap() {\r\n    // We will include this one message in the prod error map since by the very\r\n    // nature of this error, developers will never be able to see the message\r\n    // using the debugErrorMap (which is installed during auth initialization).\r\n    return {\r\n        [\"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +\r\n            'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +\r\n            'starting any other Firebase SDK.'\r\n    };\r\n}\r\n/**\r\n * A verbose error map with detailed descriptions for most error codes.\r\n *\r\n * See discussion at {@link AuthErrorMap}\r\n *\r\n * @public\r\n */\r\nconst debugErrorMap = _debugErrorMap;\r\n/**\r\n * A minimal error map with all verbose error messages stripped.\r\n *\r\n * See discussion at {@link AuthErrorMap}\r\n *\r\n * @public\r\n */\r\nconst prodErrorMap = _prodErrorMap;\r\nconst _DEFAULT_AUTH_ERROR_FACTORY = new util.ErrorFactory('auth', 'Firebase', _prodErrorMap());\r\n/**\r\n * A map of potential `Auth` error codes, for easier comparison with errors\r\n * thrown by the SDK.\r\n *\r\n * @remarks\r\n * Note that you can't tree-shake individual keys\r\n * in the map, so by using the map you might substantially increase your\r\n * bundle size.\r\n *\r\n * @public\r\n */\r\nconst AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = {\r\n    ADMIN_ONLY_OPERATION: 'auth/admin-restricted-operation',\r\n    ARGUMENT_ERROR: 'auth/argument-error',\r\n    APP_NOT_AUTHORIZED: 'auth/app-not-authorized',\r\n    APP_NOT_INSTALLED: 'auth/app-not-installed',\r\n    CAPTCHA_CHECK_FAILED: 'auth/captcha-check-failed',\r\n    CODE_EXPIRED: 'auth/code-expired',\r\n    CORDOVA_NOT_READY: 'auth/cordova-not-ready',\r\n    CORS_UNSUPPORTED: 'auth/cors-unsupported',\r\n    CREDENTIAL_ALREADY_IN_USE: 'auth/credential-already-in-use',\r\n    CREDENTIAL_MISMATCH: 'auth/custom-token-mismatch',\r\n    CREDENTIAL_TOO_OLD_LOGIN_AGAIN: 'auth/requires-recent-login',\r\n    DEPENDENT_SDK_INIT_BEFORE_AUTH: 'auth/dependent-sdk-initialized-before-auth',\r\n    DYNAMIC_LINK_NOT_ACTIVATED: 'auth/dynamic-link-not-activated',\r\n    EMAIL_CHANGE_NEEDS_VERIFICATION: 'auth/email-change-needs-verification',\r\n    EMAIL_EXISTS: 'auth/email-already-in-use',\r\n    EMULATOR_CONFIG_FAILED: 'auth/emulator-config-failed',\r\n    EXPIRED_OOB_CODE: 'auth/expired-action-code',\r\n    EXPIRED_POPUP_REQUEST: 'auth/cancelled-popup-request',\r\n    INTERNAL_ERROR: 'auth/internal-error',\r\n    INVALID_API_KEY: 'auth/invalid-api-key',\r\n    INVALID_APP_CREDENTIAL: 'auth/invalid-app-credential',\r\n    INVALID_APP_ID: 'auth/invalid-app-id',\r\n    INVALID_AUTH: 'auth/invalid-user-token',\r\n    INVALID_AUTH_EVENT: 'auth/invalid-auth-event',\r\n    INVALID_CERT_HASH: 'auth/invalid-cert-hash',\r\n    INVALID_CODE: 'auth/invalid-verification-code',\r\n    INVALID_CONTINUE_URI: 'auth/invalid-continue-uri',\r\n    INVALID_CORDOVA_CONFIGURATION: 'auth/invalid-cordova-configuration',\r\n    INVALID_CUSTOM_TOKEN: 'auth/invalid-custom-token',\r\n    INVALID_DYNAMIC_LINK_DOMAIN: 'auth/invalid-dynamic-link-domain',\r\n    INVALID_EMAIL: 'auth/invalid-email',\r\n    INVALID_EMULATOR_SCHEME: 'auth/invalid-emulator-scheme',\r\n    INVALID_IDP_RESPONSE: 'auth/invalid-credential',\r\n    INVALID_LOGIN_CREDENTIALS: 'auth/invalid-credential',\r\n    INVALID_MESSAGE_PAYLOAD: 'auth/invalid-message-payload',\r\n    INVALID_MFA_SESSION: 'auth/invalid-multi-factor-session',\r\n    INVALID_OAUTH_CLIENT_ID: 'auth/invalid-oauth-client-id',\r\n    INVALID_OAUTH_PROVIDER: 'auth/invalid-oauth-provider',\r\n    INVALID_OOB_CODE: 'auth/invalid-action-code',\r\n    INVALID_ORIGIN: 'auth/unauthorized-domain',\r\n    INVALID_PASSWORD: 'auth/wrong-password',\r\n    INVALID_PERSISTENCE: 'auth/invalid-persistence-type',\r\n    INVALID_PHONE_NUMBER: 'auth/invalid-phone-number',\r\n    INVALID_PROVIDER_ID: 'auth/invalid-provider-id',\r\n    INVALID_RECIPIENT_EMAIL: 'auth/invalid-recipient-email',\r\n    INVALID_SENDER: 'auth/invalid-sender',\r\n    INVALID_SESSION_INFO: 'auth/invalid-verification-id',\r\n    INVALID_TENANT_ID: 'auth/invalid-tenant-id',\r\n    MFA_INFO_NOT_FOUND: 'auth/multi-factor-info-not-found',\r\n    MFA_REQUIRED: 'auth/multi-factor-auth-required',\r\n    MISSING_ANDROID_PACKAGE_NAME: 'auth/missing-android-pkg-name',\r\n    MISSING_APP_CREDENTIAL: 'auth/missing-app-credential',\r\n    MISSING_AUTH_DOMAIN: 'auth/auth-domain-config-required',\r\n    MISSING_CODE: 'auth/missing-verification-code',\r\n    MISSING_CONTINUE_URI: 'auth/missing-continue-uri',\r\n    MISSING_IFRAME_START: 'auth/missing-iframe-start',\r\n    MISSING_IOS_BUNDLE_ID: 'auth/missing-ios-bundle-id',\r\n    MISSING_OR_INVALID_NONCE: 'auth/missing-or-invalid-nonce',\r\n    MISSING_MFA_INFO: 'auth/missing-multi-factor-info',\r\n    MISSING_MFA_SESSION: 'auth/missing-multi-factor-session',\r\n    MISSING_PHONE_NUMBER: 'auth/missing-phone-number',\r\n    MISSING_SESSION_INFO: 'auth/missing-verification-id',\r\n    MODULE_DESTROYED: 'auth/app-deleted',\r\n    NEED_CONFIRMATION: 'auth/account-exists-with-different-credential',\r\n    NETWORK_REQUEST_FAILED: 'auth/network-request-failed',\r\n    NULL_USER: 'auth/null-user',\r\n    NO_AUTH_EVENT: 'auth/no-auth-event',\r\n    NO_SUCH_PROVIDER: 'auth/no-such-provider',\r\n    OPERATION_NOT_ALLOWED: 'auth/operation-not-allowed',\r\n    OPERATION_NOT_SUPPORTED: 'auth/operation-not-supported-in-this-environment',\r\n    POPUP_BLOCKED: 'auth/popup-blocked',\r\n    POPUP_CLOSED_BY_USER: 'auth/popup-closed-by-user',\r\n    PROVIDER_ALREADY_LINKED: 'auth/provider-already-linked',\r\n    QUOTA_EXCEEDED: 'auth/quota-exceeded',\r\n    REDIRECT_CANCELLED_BY_USER: 'auth/redirect-cancelled-by-user',\r\n    REDIRECT_OPERATION_PENDING: 'auth/redirect-operation-pending',\r\n    REJECTED_CREDENTIAL: 'auth/rejected-credential',\r\n    SECOND_FACTOR_ALREADY_ENROLLED: 'auth/second-factor-already-in-use',\r\n    SECOND_FACTOR_LIMIT_EXCEEDED: 'auth/maximum-second-factor-count-exceeded',\r\n    TENANT_ID_MISMATCH: 'auth/tenant-id-mismatch',\r\n    TIMEOUT: 'auth/timeout',\r\n    TOKEN_EXPIRED: 'auth/user-token-expired',\r\n    TOO_MANY_ATTEMPTS_TRY_LATER: 'auth/too-many-requests',\r\n    UNAUTHORIZED_DOMAIN: 'auth/unauthorized-continue-uri',\r\n    UNSUPPORTED_FIRST_FACTOR: 'auth/unsupported-first-factor',\r\n    UNSUPPORTED_PERSISTENCE: 'auth/unsupported-persistence-type',\r\n    UNSUPPORTED_TENANT_OPERATION: 'auth/unsupported-tenant-operation',\r\n    UNVERIFIED_EMAIL: 'auth/unverified-email',\r\n    USER_CANCELLED: 'auth/user-cancelled',\r\n    USER_DELETED: 'auth/user-not-found',\r\n    USER_DISABLED: 'auth/user-disabled',\r\n    USER_MISMATCH: 'auth/user-mismatch',\r\n    USER_SIGNED_OUT: 'auth/user-signed-out',\r\n    WEAK_PASSWORD: 'auth/weak-password',\r\n    WEB_STORAGE_UNSUPPORTED: 'auth/web-storage-unsupported',\r\n    ALREADY_INITIALIZED: 'auth/already-initialized',\r\n    RECAPTCHA_NOT_ENABLED: 'auth/recaptcha-not-enabled',\r\n    MISSING_RECAPTCHA_TOKEN: 'auth/missing-recaptcha-token',\r\n    INVALID_RECAPTCHA_TOKEN: 'auth/invalid-recaptcha-token',\r\n    INVALID_RECAPTCHA_ACTION: 'auth/invalid-recaptcha-action',\r\n    MISSING_CLIENT_TYPE: 'auth/missing-client-type',\r\n    MISSING_RECAPTCHA_VERSION: 'auth/missing-recaptcha-version',\r\n    INVALID_RECAPTCHA_VERSION: 'auth/invalid-recaptcha-version',\r\n    INVALID_REQ_TYPE: 'auth/invalid-req-type'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new logger.Logger('@firebase/auth');\r\nfunction _logWarn(msg, ...args) {\r\n    if (logClient.logLevel <= logger.LogLevel.WARN) {\r\n        logClient.warn(`Auth (${app.SDK_VERSION}): ${msg}`, ...args);\r\n    }\r\n}\r\nfunction _logError(msg, ...args) {\r\n    if (logClient.logLevel <= logger.LogLevel.ERROR) {\r\n        logClient.error(`Auth (${app.SDK_VERSION}): ${msg}`, ...args);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction _fail(authOrCode, ...rest) {\r\n    throw createErrorInternal(authOrCode, ...rest);\r\n}\r\nfunction _createError(authOrCode, ...rest) {\r\n    return createErrorInternal(authOrCode, ...rest);\r\n}\r\nfunction _errorWithCustomMessage(auth, code, message) {\r\n    const errorMap = Object.assign(Object.assign({}, prodErrorMap()), { [code]: message });\r\n    const factory = new util.ErrorFactory('auth', 'Firebase', errorMap);\r\n    return factory.create(code, {\r\n        appName: auth.name\r\n    });\r\n}\r\nfunction _assertInstanceOf(auth, object, instance) {\r\n    const constructorInstance = instance;\r\n    if (!(object instanceof constructorInstance)) {\r\n        if (constructorInstance.name !== object.constructor.name) {\r\n            _fail(auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        }\r\n        throw _errorWithCustomMessage(auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */, `Type of ${object.constructor.name} does not match expected instance.` +\r\n            `Did you pass a reference from a different Auth SDK?`);\r\n    }\r\n}\r\nfunction createErrorInternal(authOrCode, ...rest) {\r\n    if (typeof authOrCode !== 'string') {\r\n        const code = rest[0];\r\n        const fullParams = [...rest.slice(1)];\r\n        if (fullParams[0]) {\r\n            fullParams[0].appName = authOrCode.name;\r\n        }\r\n        return authOrCode._errorFactory.create(code, ...fullParams);\r\n    }\r\n    return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);\r\n}\r\nfunction _assert(assertion, authOrCode, ...rest) {\r\n    if (!assertion) {\r\n        throw createErrorInternal(authOrCode, ...rest);\r\n    }\r\n}\r\n/**\r\n * Unconditionally fails, throwing an internal error with the given message.\r\n *\r\n * @param failure type of failure encountered\r\n * @throws Error\r\n */\r\nfunction debugFail(failure) {\r\n    // Log the failure in addition to throw an exception, just in case the\r\n    // exception is swallowed.\r\n    const message = `INTERNAL ASSERTION FAILED: ` + failure;\r\n    _logError(message);\r\n    // NOTE: We don't use FirebaseError here because these are internal failures\r\n    // that cannot be handled by the user. (Also it would create a circular\r\n    // dependency between the error and assert modules which doesn't work.)\r\n    throw new Error(message);\r\n}\r\n/**\r\n * Fails if the given assertion condition is false, throwing an Error with the\r\n * given message if it did.\r\n *\r\n * @param assertion\r\n * @param message\r\n */\r\nfunction debugAssert(assertion, message) {\r\n    if (!assertion) {\r\n        debugFail(message);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction _getCurrentUrl() {\r\n    var _a;\r\n    return (typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.href)) || '';\r\n}\r\nfunction _isHttpOrHttps() {\r\n    return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\r\n}\r\nfunction _getCurrentScheme() {\r\n    var _a;\r\n    return (typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.protocol)) || null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Determine whether the browser is working online\r\n */\r\nfunction _isOnline() {\r\n    if (typeof navigator !== 'undefined' &&\r\n        navigator &&\r\n        'onLine' in navigator &&\r\n        typeof navigator.onLine === 'boolean' &&\r\n        // Apply only for traditional web apps and Chrome extensions.\r\n        // This is especially true for Cordova apps which have unreliable\r\n        // navigator.onLine behavior unless cordova-plugin-network-information is\r\n        // installed which overwrites the native navigator.onLine value and\r\n        // defines navigator.connection.\r\n        (_isHttpOrHttps() || util.isBrowserExtension() || 'connection' in navigator)) {\r\n        return navigator.onLine;\r\n    }\r\n    // If we can't determine the state, assume it is online.\r\n    return true;\r\n}\r\nfunction _getUserLanguage() {\r\n    if (typeof navigator === 'undefined') {\r\n        return null;\r\n    }\r\n    const navigatorLanguage = navigator;\r\n    return (\r\n    // Most reliable, but only supported in Chrome/Firefox.\r\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\r\n        // Supported in most browsers, but returns the language of the browser\r\n        // UI, not the language set in browser settings.\r\n        navigatorLanguage.language ||\r\n        // Couldn't determine language.\r\n        null);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A structure to help pick between a range of long and short delay durations\r\n * depending on the current environment. In general, the long delay is used for\r\n * mobile environments whereas short delays are used for desktop environments.\r\n */\r\nclass Delay {\r\n    constructor(shortDelay, longDelay) {\r\n        this.shortDelay = shortDelay;\r\n        this.longDelay = longDelay;\r\n        // Internal error when improperly initialized.\r\n        debugAssert(longDelay > shortDelay, 'Short delay should be less than long delay!');\r\n        this.isMobile = util.isMobileCordova() || util.isReactNative();\r\n    }\r\n    get() {\r\n        if (!_isOnline()) {\r\n            // Pick the shorter timeout.\r\n            return Math.min(5000 /* DelayMin.OFFLINE */, this.shortDelay);\r\n        }\r\n        // If running in a mobile environment, return the long delay, otherwise\r\n        // return the short delay.\r\n        // This could be improved in the future to dynamically change based on other\r\n        // variables instead of just reading the current environment.\r\n        return this.isMobile ? this.longDelay : this.shortDelay;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction _emulatorUrl(config, path) {\r\n    debugAssert(config.emulator, 'Emulator should always be set here');\r\n    const { url } = config.emulator;\r\n    if (!path) {\r\n        return url;\r\n    }\r\n    return `${url}${path.startsWith('/') ? path.slice(1) : path}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FetchProvider {\r\n    static initialize(fetchImpl, headersImpl, responseImpl) {\r\n        this.fetchImpl = fetchImpl;\r\n        if (headersImpl) {\r\n            this.headersImpl = headersImpl;\r\n        }\r\n        if (responseImpl) {\r\n            this.responseImpl = responseImpl;\r\n        }\r\n    }\r\n    static fetch() {\r\n        if (this.fetchImpl) {\r\n            return this.fetchImpl;\r\n        }\r\n        if (typeof self !== 'undefined' && 'fetch' in self) {\r\n            return self.fetch;\r\n        }\r\n        if (typeof globalThis !== 'undefined' && globalThis.fetch) {\r\n            return globalThis.fetch;\r\n        }\r\n        if (typeof fetch !== 'undefined') {\r\n            return fetch;\r\n        }\r\n        debugFail('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\r\n    }\r\n    static headers() {\r\n        if (this.headersImpl) {\r\n            return this.headersImpl;\r\n        }\r\n        if (typeof self !== 'undefined' && 'Headers' in self) {\r\n            return self.Headers;\r\n        }\r\n        if (typeof globalThis !== 'undefined' && globalThis.Headers) {\r\n            return globalThis.Headers;\r\n        }\r\n        if (typeof Headers !== 'undefined') {\r\n            return Headers;\r\n        }\r\n        debugFail('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\r\n    }\r\n    static response() {\r\n        if (this.responseImpl) {\r\n            return this.responseImpl;\r\n        }\r\n        if (typeof self !== 'undefined' && 'Response' in self) {\r\n            return self.Response;\r\n        }\r\n        if (typeof globalThis !== 'undefined' && globalThis.Response) {\r\n            return globalThis.Response;\r\n        }\r\n        if (typeof Response !== 'undefined') {\r\n            return Response;\r\n        }\r\n        debugFail('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Map from errors returned by the server to errors to developer visible errors\r\n */\r\nconst SERVER_ERROR_MAP = {\r\n    // Custom token errors.\r\n    [\"CREDENTIAL_MISMATCH\" /* ServerError.CREDENTIAL_MISMATCH */]: \"custom-token-mismatch\" /* AuthErrorCode.CREDENTIAL_MISMATCH */,\r\n    // This can only happen if the SDK sends a bad request.\r\n    [\"MISSING_CUSTOM_TOKEN\" /* ServerError.MISSING_CUSTOM_TOKEN */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\r\n    // Create Auth URI errors.\r\n    [\"INVALID_IDENTIFIER\" /* ServerError.INVALID_IDENTIFIER */]: \"invalid-email\" /* AuthErrorCode.INVALID_EMAIL */,\r\n    // This can only happen if the SDK sends a bad request.\r\n    [\"MISSING_CONTINUE_URI\" /* ServerError.MISSING_CONTINUE_URI */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\r\n    // Sign in with email and password errors (some apply to sign up too).\r\n    [\"INVALID_PASSWORD\" /* ServerError.INVALID_PASSWORD */]: \"wrong-password\" /* AuthErrorCode.INVALID_PASSWORD */,\r\n    // This can only happen if the SDK sends a bad request.\r\n    [\"MISSING_PASSWORD\" /* ServerError.MISSING_PASSWORD */]: \"missing-password\" /* AuthErrorCode.MISSING_PASSWORD */,\r\n    // Thrown if Email Enumeration Protection is enabled in the project and the email or password is\r\n    // invalid.\r\n    [\"INVALID_LOGIN_CREDENTIALS\" /* ServerError.INVALID_LOGIN_CREDENTIALS */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\r\n    // Sign up with email and password errors.\r\n    [\"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */]: \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */,\r\n    [\"PASSWORD_LOGIN_DISABLED\" /* ServerError.PASSWORD_LOGIN_DISABLED */]: \"operation-not-allowed\" /* AuthErrorCode.OPERATION_NOT_ALLOWED */,\r\n    // Verify assertion for sign in with credential errors:\r\n    [\"INVALID_IDP_RESPONSE\" /* ServerError.INVALID_IDP_RESPONSE */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\r\n    [\"INVALID_PENDING_TOKEN\" /* ServerError.INVALID_PENDING_TOKEN */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\r\n    [\"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */]: \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */,\r\n    // This can only happen if the SDK sends a bad request.\r\n    [\"MISSING_REQ_TYPE\" /* ServerError.MISSING_REQ_TYPE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\r\n    // Send Password reset email errors:\r\n    [\"EMAIL_NOT_FOUND\" /* ServerError.EMAIL_NOT_FOUND */]: \"user-not-found\" /* AuthErrorCode.USER_DELETED */,\r\n    [\"RESET_PASSWORD_EXCEED_LIMIT\" /* ServerError.RESET_PASSWORD_EXCEED_LIMIT */]: \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,\r\n    [\"EXPIRED_OOB_CODE\" /* ServerError.EXPIRED_OOB_CODE */]: \"expired-action-code\" /* AuthErrorCode.EXPIRED_OOB_CODE */,\r\n    [\"INVALID_OOB_CODE\" /* ServerError.INVALID_OOB_CODE */]: \"invalid-action-code\" /* AuthErrorCode.INVALID_OOB_CODE */,\r\n    // This can only happen if the SDK sends a bad request.\r\n    [\"MISSING_OOB_CODE\" /* ServerError.MISSING_OOB_CODE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\r\n    // Operations that require ID token in request:\r\n    [\"CREDENTIAL_TOO_OLD_LOGIN_AGAIN\" /* ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: \"requires-recent-login\" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */,\r\n    [\"INVALID_ID_TOKEN\" /* ServerError.INVALID_ID_TOKEN */]: \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */,\r\n    [\"TOKEN_EXPIRED\" /* ServerError.TOKEN_EXPIRED */]: \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */,\r\n    [\"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */]: \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */,\r\n    // Other errors.\r\n    [\"TOO_MANY_ATTEMPTS_TRY_LATER\" /* ServerError.TOO_MANY_ATTEMPTS_TRY_LATER */]: \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,\r\n    [\"PASSWORD_DOES_NOT_MEET_REQUIREMENTS\" /* ServerError.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */]: \"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */,\r\n    // Phone Auth related errors.\r\n    [\"INVALID_CODE\" /* ServerError.INVALID_CODE */]: \"invalid-verification-code\" /* AuthErrorCode.INVALID_CODE */,\r\n    [\"INVALID_SESSION_INFO\" /* ServerError.INVALID_SESSION_INFO */]: \"invalid-verification-id\" /* AuthErrorCode.INVALID_SESSION_INFO */,\r\n    [\"INVALID_TEMPORARY_PROOF\" /* ServerError.INVALID_TEMPORARY_PROOF */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\r\n    [\"MISSING_SESSION_INFO\" /* ServerError.MISSING_SESSION_INFO */]: \"missing-verification-id\" /* AuthErrorCode.MISSING_SESSION_INFO */,\r\n    [\"SESSION_EXPIRED\" /* ServerError.SESSION_EXPIRED */]: \"code-expired\" /* AuthErrorCode.CODE_EXPIRED */,\r\n    // Other action code errors when additional settings passed.\r\n    // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.\r\n    // This is OK as this error will be caught by client side validation.\r\n    [\"MISSING_ANDROID_PACKAGE_NAME\" /* ServerError.MISSING_ANDROID_PACKAGE_NAME */]: \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */,\r\n    [\"UNAUTHORIZED_DOMAIN\" /* ServerError.UNAUTHORIZED_DOMAIN */]: \"unauthorized-continue-uri\" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */,\r\n    // getProjectConfig errors when clientId is passed.\r\n    [\"INVALID_OAUTH_CLIENT_ID\" /* ServerError.INVALID_OAUTH_CLIENT_ID */]: \"invalid-oauth-client-id\" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */,\r\n    // User actions (sign-up or deletion) disabled errors.\r\n    [\"ADMIN_ONLY_OPERATION\" /* ServerError.ADMIN_ONLY_OPERATION */]: \"admin-restricted-operation\" /* AuthErrorCode.ADMIN_ONLY_OPERATION */,\r\n    // Multi factor related errors.\r\n    [\"INVALID_MFA_PENDING_CREDENTIAL\" /* ServerError.INVALID_MFA_PENDING_CREDENTIAL */]: \"invalid-multi-factor-session\" /* AuthErrorCode.INVALID_MFA_SESSION */,\r\n    [\"MFA_ENROLLMENT_NOT_FOUND\" /* ServerError.MFA_ENROLLMENT_NOT_FOUND */]: \"multi-factor-info-not-found\" /* AuthErrorCode.MFA_INFO_NOT_FOUND */,\r\n    [\"MISSING_MFA_ENROLLMENT_ID\" /* ServerError.MISSING_MFA_ENROLLMENT_ID */]: \"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */,\r\n    [\"MISSING_MFA_PENDING_CREDENTIAL\" /* ServerError.MISSING_MFA_PENDING_CREDENTIAL */]: \"missing-multi-factor-session\" /* AuthErrorCode.MISSING_MFA_SESSION */,\r\n    [\"SECOND_FACTOR_EXISTS\" /* ServerError.SECOND_FACTOR_EXISTS */]: \"second-factor-already-in-use\" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */,\r\n    [\"SECOND_FACTOR_LIMIT_EXCEEDED\" /* ServerError.SECOND_FACTOR_LIMIT_EXCEEDED */]: \"maximum-second-factor-count-exceeded\" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */,\r\n    // Blocking functions related errors.\r\n    [\"BLOCKING_FUNCTION_ERROR_RESPONSE\" /* ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\r\n    // Recaptcha related errors.\r\n    [\"RECAPTCHA_NOT_ENABLED\" /* ServerError.RECAPTCHA_NOT_ENABLED */]: \"recaptcha-not-enabled\" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */,\r\n    [\"MISSING_RECAPTCHA_TOKEN\" /* ServerError.MISSING_RECAPTCHA_TOKEN */]: \"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */,\r\n    [\"INVALID_RECAPTCHA_TOKEN\" /* ServerError.INVALID_RECAPTCHA_TOKEN */]: \"invalid-recaptcha-token\" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */,\r\n    [\"INVALID_RECAPTCHA_ACTION\" /* ServerError.INVALID_RECAPTCHA_ACTION */]: \"invalid-recaptcha-action\" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */,\r\n    [\"MISSING_CLIENT_TYPE\" /* ServerError.MISSING_CLIENT_TYPE */]: \"missing-client-type\" /* AuthErrorCode.MISSING_CLIENT_TYPE */,\r\n    [\"MISSING_RECAPTCHA_VERSION\" /* ServerError.MISSING_RECAPTCHA_VERSION */]: \"missing-recaptcha-version\" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */,\r\n    [\"INVALID_RECAPTCHA_VERSION\" /* ServerError.INVALID_RECAPTCHA_VERSION */]: \"invalid-recaptcha-version\" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */,\r\n    [\"INVALID_REQ_TYPE\" /* ServerError.INVALID_REQ_TYPE */]: \"invalid-req-type\" /* AuthErrorCode.INVALID_REQ_TYPE */\r\n};\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_API_TIMEOUT_MS = new Delay(30000, 60000);\r\nfunction _addTidIfNecessary(auth, request) {\r\n    if (auth.tenantId && !request.tenantId) {\r\n        return Object.assign(Object.assign({}, request), { tenantId: auth.tenantId });\r\n    }\r\n    return request;\r\n}\r\nasync function _performApiRequest(auth, method, path, request, customErrorMap = {}) {\r\n    return _performFetchWithErrorHandling(auth, customErrorMap, async () => {\r\n        let body = {};\r\n        let params = {};\r\n        if (request) {\r\n            if (method === \"GET\" /* HttpMethod.GET */) {\r\n                params = request;\r\n            }\r\n            else {\r\n                body = {\r\n                    body: JSON.stringify(request)\r\n                };\r\n            }\r\n        }\r\n        const query = util.querystring(Object.assign({ key: auth.config.apiKey }, params)).slice(1);\r\n        const headers = await auth._getAdditionalHeaders();\r\n        headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/json';\r\n        if (auth.languageCode) {\r\n            headers[\"X-Firebase-Locale\" /* HttpHeader.X_FIREBASE_LOCALE */] = auth.languageCode;\r\n        }\r\n        return FetchProvider.fetch()(_getFinalTarget(auth, auth.config.apiHost, path, query), Object.assign({ method,\r\n            headers, referrerPolicy: 'no-referrer' }, body));\r\n    });\r\n}\r\nasync function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {\r\n    auth._canInitEmulator = false;\r\n    const errorMap = Object.assign(Object.assign({}, SERVER_ERROR_MAP), customErrorMap);\r\n    try {\r\n        const networkTimeout = new NetworkTimeout(auth);\r\n        const response = await Promise.race([\r\n            fetchFn(),\r\n            networkTimeout.promise\r\n        ]);\r\n        // If we've reached this point, the fetch succeeded and the networkTimeout\r\n        // didn't throw; clear the network timeout delay so that Node won't hang\r\n        networkTimeout.clearNetworkTimeout();\r\n        const json = await response.json();\r\n        if ('needConfirmation' in json) {\r\n            throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, json);\r\n        }\r\n        if (response.ok && !('errorMessage' in json)) {\r\n            return json;\r\n        }\r\n        else {\r\n            const errorMessage = response.ok ? json.errorMessage : json.error.message;\r\n            const [serverErrorCode, serverErrorMessage] = errorMessage.split(' : ');\r\n            if (serverErrorCode === \"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */) {\r\n                throw _makeTaggedError(auth, \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */, json);\r\n            }\r\n            else if (serverErrorCode === \"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */) {\r\n                throw _makeTaggedError(auth, \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */, json);\r\n            }\r\n            else if (serverErrorCode === \"USER_DISABLED\" /* ServerError.USER_DISABLED */) {\r\n                throw _makeTaggedError(auth, \"user-disabled\" /* AuthErrorCode.USER_DISABLED */, json);\r\n            }\r\n            const authError = errorMap[serverErrorCode] ||\r\n                serverErrorCode\r\n                    .toLowerCase()\r\n                    .replace(/[_\\s]+/g, '-');\r\n            if (serverErrorMessage) {\r\n                throw _errorWithCustomMessage(auth, authError, serverErrorMessage);\r\n            }\r\n            else {\r\n                _fail(auth, authError);\r\n            }\r\n        }\r\n    }\r\n    catch (e) {\r\n        if (e instanceof util.FirebaseError) {\r\n            throw e;\r\n        }\r\n        // Changing this to a different error code will log user out when there is a network error\r\n        // because we treat any error other than NETWORK_REQUEST_FAILED as token is invalid.\r\n        // https://github.com/firebase/firebase-js-sdk/blob/4fbc73610d70be4e0852e7de63a39cb7897e8546/packages/auth/src/core/auth/auth_impl.ts#L309-L316\r\n        _fail(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */, { 'message': String(e) });\r\n    }\r\n}\r\nasync function _performSignInRequest(auth, method, path, request, customErrorMap = {}) {\r\n    const serverResponse = (await _performApiRequest(auth, method, path, request, customErrorMap));\r\n    if ('mfaPendingCredential' in serverResponse) {\r\n        _fail(auth, \"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */, {\r\n            _serverResponse: serverResponse\r\n        });\r\n    }\r\n    return serverResponse;\r\n}\r\nfunction _getFinalTarget(auth, host, path, query) {\r\n    const base = `${host}${path}?${query}`;\r\n    if (!auth.config.emulator) {\r\n        return `${auth.config.apiScheme}://${base}`;\r\n    }\r\n    return _emulatorUrl(auth.config, base);\r\n}\r\nfunction _parseEnforcementState(enforcementStateStr) {\r\n    switch (enforcementStateStr) {\r\n        case 'ENFORCE':\r\n            return \"ENFORCE\" /* EnforcementState.ENFORCE */;\r\n        case 'AUDIT':\r\n            return \"AUDIT\" /* EnforcementState.AUDIT */;\r\n        case 'OFF':\r\n            return \"OFF\" /* EnforcementState.OFF */;\r\n        default:\r\n            return \"ENFORCEMENT_STATE_UNSPECIFIED\" /* EnforcementState.ENFORCEMENT_STATE_UNSPECIFIED */;\r\n    }\r\n}\r\nclass NetworkTimeout {\r\n    constructor(auth) {\r\n        this.auth = auth;\r\n        // Node timers and browser timers are fundamentally incompatible, but we\r\n        // don't care about the value here\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        this.timer = null;\r\n        this.promise = new Promise((_, reject) => {\r\n            this.timer = setTimeout(() => {\r\n                return reject(_createError(this.auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\r\n            }, DEFAULT_API_TIMEOUT_MS.get());\r\n        });\r\n    }\r\n    clearNetworkTimeout() {\r\n        clearTimeout(this.timer);\r\n    }\r\n}\r\nfunction _makeTaggedError(auth, code, response) {\r\n    const errorParams = {\r\n        appName: auth.name\r\n    };\r\n    if (response.email) {\r\n        errorParams.email = response.email;\r\n    }\r\n    if (response.phoneNumber) {\r\n        errorParams.phoneNumber = response.phoneNumber;\r\n    }\r\n    const error = _createError(auth, code, errorParams);\r\n    // We know customData is defined on error because errorParams is defined\r\n    error.customData._tokenResponse = response;\r\n    return error;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isV2(grecaptcha) {\r\n    return (grecaptcha !== undefined &&\r\n        grecaptcha.getResponse !== undefined);\r\n}\r\nfunction isEnterprise(grecaptcha) {\r\n    return (grecaptcha !== undefined &&\r\n        grecaptcha.enterprise !== undefined);\r\n}\r\nclass RecaptchaConfig {\r\n    constructor(response) {\r\n        /**\r\n         * The reCAPTCHA site key.\r\n         */\r\n        this.siteKey = '';\r\n        /**\r\n         * The list of providers and their enablement status for reCAPTCHA Enterprise.\r\n         */\r\n        this.recaptchaEnforcementState = [];\r\n        if (response.recaptchaKey === undefined) {\r\n            throw new Error('recaptchaKey undefined');\r\n        }\r\n        // Example response.recaptchaKey: \"projects/proj123/keys/sitekey123\"\r\n        this.siteKey = response.recaptchaKey.split('/')[3];\r\n        this.recaptchaEnforcementState = response.recaptchaEnforcementState;\r\n    }\r\n    /**\r\n     * Returns the reCAPTCHA Enterprise enforcement state for the given provider.\r\n     *\r\n     * @param providerStr - The provider whose enforcement state is to be returned.\r\n     * @returns The reCAPTCHA Enterprise enforcement state for the given provider.\r\n     */\r\n    getProviderEnforcementState(providerStr) {\r\n        if (!this.recaptchaEnforcementState ||\r\n            this.recaptchaEnforcementState.length === 0) {\r\n            return null;\r\n        }\r\n        for (const recaptchaEnforcementState of this.recaptchaEnforcementState) {\r\n            if (recaptchaEnforcementState.provider &&\r\n                recaptchaEnforcementState.provider === providerStr) {\r\n                return _parseEnforcementState(recaptchaEnforcementState.enforcementState);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns true if the reCAPTCHA Enterprise enforcement state for the provider is set to ENFORCE or AUDIT.\r\n     *\r\n     * @param providerStr - The provider whose enablement state is to be returned.\r\n     * @returns Whether or not reCAPTCHA Enterprise protection is enabled for the given provider.\r\n     */\r\n    isProviderEnabled(providerStr) {\r\n        return (this.getProviderEnforcementState(providerStr) ===\r\n            \"ENFORCE\" /* EnforcementState.ENFORCE */ ||\r\n            this.getProviderEnforcementState(providerStr) === \"AUDIT\" /* EnforcementState.AUDIT */);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function getRecaptchaParams(auth) {\r\n    return ((await _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v1/recaptchaParams\" /* Endpoint.GET_RECAPTCHA_PARAM */)).recaptchaSiteKey || '');\r\n}\r\nasync function getRecaptchaConfig(auth, request) {\r\n    return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v2/recaptchaConfig\" /* Endpoint.GET_RECAPTCHA_CONFIG */, _addTidIfNecessary(auth, request));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function deleteAccount(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:delete\" /* Endpoint.DELETE_ACCOUNT */, request);\r\n}\r\nasync function deleteLinkedAccounts(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\r\n}\r\nasync function getAccountInfo(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:lookup\" /* Endpoint.GET_ACCOUNT_INFO */, request);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction utcTimestampToDateString(utcTimestamp) {\r\n    if (!utcTimestamp) {\r\n        return undefined;\r\n    }\r\n    try {\r\n        // Convert to date object.\r\n        const date = new Date(Number(utcTimestamp));\r\n        // Test date is valid.\r\n        if (!isNaN(date.getTime())) {\r\n            // Convert to UTC date string.\r\n            return date.toUTCString();\r\n        }\r\n    }\r\n    catch (e) {\r\n        // Do nothing. undefined will be returned.\r\n    }\r\n    return undefined;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.\r\n *\r\n * @remarks\r\n * Returns the current token if it has not expired or if it will not expire in the next five\r\n * minutes. Otherwise, this will refresh the token and return a new one.\r\n *\r\n * @param user - The user.\r\n * @param forceRefresh - Force refresh regardless of token expiration.\r\n *\r\n * @public\r\n */\r\nfunction getIdToken(user, forceRefresh = false) {\r\n    return util.getModularInstance(user).getIdToken(forceRefresh);\r\n}\r\n/**\r\n * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.\r\n *\r\n * @remarks\r\n * Returns the current token if it has not expired or if it will not expire in the next five\r\n * minutes. Otherwise, this will refresh the token and return a new one.\r\n *\r\n * @param user - The user.\r\n * @param forceRefresh - Force refresh regardless of token expiration.\r\n *\r\n * @public\r\n */\r\nasync function getIdTokenResult(user, forceRefresh = false) {\r\n    const userInternal = util.getModularInstance(user);\r\n    const token = await userInternal.getIdToken(forceRefresh);\r\n    const claims = _parseToken(token);\r\n    _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n    const firebase = typeof claims.firebase === 'object' ? claims.firebase : undefined;\r\n    const signInProvider = firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_provider'];\r\n    return {\r\n        claims,\r\n        token,\r\n        authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),\r\n        issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),\r\n        expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),\r\n        signInProvider: signInProvider || null,\r\n        signInSecondFactor: (firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_second_factor']) || null\r\n    };\r\n}\r\nfunction secondsStringToMilliseconds(seconds) {\r\n    return Number(seconds) * 1000;\r\n}\r\nfunction _parseToken(token) {\r\n    const [algorithm, payload, signature] = token.split('.');\r\n    if (algorithm === undefined ||\r\n        payload === undefined ||\r\n        signature === undefined) {\r\n        _logError('JWT malformed, contained fewer than 3 sections');\r\n        return null;\r\n    }\r\n    try {\r\n        const decoded = util.base64Decode(payload);\r\n        if (!decoded) {\r\n            _logError('Failed to decode base64 JWT payload');\r\n            return null;\r\n        }\r\n        return JSON.parse(decoded);\r\n    }\r\n    catch (e) {\r\n        _logError('Caught error parsing JWT payload as JSON', e === null || e === void 0 ? void 0 : e.toString());\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.\r\n */\r\nfunction _tokenExpiresIn(token) {\r\n    const parsedToken = _parseToken(token);\r\n    _assert(parsedToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n    _assert(typeof parsedToken.exp !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n    _assert(typeof parsedToken.iat !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n    return Number(parsedToken.exp) - Number(parsedToken.iat);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function _logoutIfInvalidated(user, promise, bypassAuthState = false) {\r\n    if (bypassAuthState) {\r\n        return promise;\r\n    }\r\n    try {\r\n        return await promise;\r\n    }\r\n    catch (e) {\r\n        if (e instanceof util.FirebaseError && isUserInvalidated(e)) {\r\n            if (user.auth.currentUser === user) {\r\n                await user.auth.signOut();\r\n            }\r\n        }\r\n        throw e;\r\n    }\r\n}\r\nfunction isUserInvalidated({ code }) {\r\n    return (code === `auth/${\"user-disabled\" /* AuthErrorCode.USER_DISABLED */}` ||\r\n        code === `auth/${\"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */}`);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ProactiveRefresh {\r\n    constructor(user) {\r\n        this.user = user;\r\n        this.isRunning = false;\r\n        // Node timers and browser timers return fundamentally different types.\r\n        // We don't actually care what the value is but TS won't accept unknown and\r\n        // we can't cast properly in both environments.\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        this.timerId = null;\r\n        this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;\r\n    }\r\n    _start() {\r\n        if (this.isRunning) {\r\n            return;\r\n        }\r\n        this.isRunning = true;\r\n        this.schedule();\r\n    }\r\n    _stop() {\r\n        if (!this.isRunning) {\r\n            return;\r\n        }\r\n        this.isRunning = false;\r\n        if (this.timerId !== null) {\r\n            clearTimeout(this.timerId);\r\n        }\r\n    }\r\n    getInterval(wasError) {\r\n        var _a;\r\n        if (wasError) {\r\n            const interval = this.errorBackoff;\r\n            this.errorBackoff = Math.min(this.errorBackoff * 2, 960000 /* Duration.RETRY_BACKOFF_MAX */);\r\n            return interval;\r\n        }\r\n        else {\r\n            // Reset the error backoff\r\n            this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;\r\n            const expTime = (_a = this.user.stsTokenManager.expirationTime) !== null && _a !== void 0 ? _a : 0;\r\n            const interval = expTime - Date.now() - 300000 /* Duration.OFFSET */;\r\n            return Math.max(0, interval);\r\n        }\r\n    }\r\n    schedule(wasError = false) {\r\n        if (!this.isRunning) {\r\n            // Just in case...\r\n            return;\r\n        }\r\n        const interval = this.getInterval(wasError);\r\n        this.timerId = setTimeout(async () => {\r\n            await this.iteration();\r\n        }, interval);\r\n    }\r\n    async iteration() {\r\n        try {\r\n            await this.user.getIdToken(true);\r\n        }\r\n        catch (e) {\r\n            // Only retry on network errors\r\n            if ((e === null || e === void 0 ? void 0 : e.code) ===\r\n                `auth/${\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {\r\n                this.schedule(/* wasError */ true);\r\n            }\r\n            return;\r\n        }\r\n        this.schedule();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass UserMetadata {\r\n    constructor(createdAt, lastLoginAt) {\r\n        this.createdAt = createdAt;\r\n        this.lastLoginAt = lastLoginAt;\r\n        this._initializeTime();\r\n    }\r\n    _initializeTime() {\r\n        this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);\r\n        this.creationTime = utcTimestampToDateString(this.createdAt);\r\n    }\r\n    _copy(metadata) {\r\n        this.createdAt = metadata.createdAt;\r\n        this.lastLoginAt = metadata.lastLoginAt;\r\n        this._initializeTime();\r\n    }\r\n    toJSON() {\r\n        return {\r\n            createdAt: this.createdAt,\r\n            lastLoginAt: this.lastLoginAt\r\n        };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function _reloadWithoutSaving(user) {\r\n    var _a;\r\n    const auth = user.auth;\r\n    const idToken = await user.getIdToken();\r\n    const response = await _logoutIfInvalidated(user, getAccountInfo(auth, { idToken }));\r\n    _assert(response === null || response === void 0 ? void 0 : response.users.length, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n    const coreAccount = response.users[0];\r\n    user._notifyReloadListener(coreAccount);\r\n    const newProviderData = ((_a = coreAccount.providerUserInfo) === null || _a === void 0 ? void 0 : _a.length)\r\n        ? extractProviderData(coreAccount.providerUserInfo)\r\n        : [];\r\n    const providerData = mergeProviderData(user.providerData, newProviderData);\r\n    // Preserves the non-nonymous status of the stored user, even if no more\r\n    // credentials (federated or email/password) are linked to the user. If\r\n    // the user was previously anonymous, then use provider data to update.\r\n    // On the other hand, if it was not anonymous before, it should never be\r\n    // considered anonymous now.\r\n    const oldIsAnonymous = user.isAnonymous;\r\n    const newIsAnonymous = !(user.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);\r\n    const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;\r\n    const updates = {\r\n        uid: coreAccount.localId,\r\n        displayName: coreAccount.displayName || null,\r\n        photoURL: coreAccount.photoUrl || null,\r\n        email: coreAccount.email || null,\r\n        emailVerified: coreAccount.emailVerified || false,\r\n        phoneNumber: coreAccount.phoneNumber || null,\r\n        tenantId: coreAccount.tenantId || null,\r\n        providerData,\r\n        metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\r\n        isAnonymous\r\n    };\r\n    Object.assign(user, updates);\r\n}\r\n/**\r\n * Reloads user account data, if signed in.\r\n *\r\n * @param user - The user.\r\n *\r\n * @public\r\n */\r\nasync function reload(user) {\r\n    const userInternal = util.getModularInstance(user);\r\n    await _reloadWithoutSaving(userInternal);\r\n    // Even though the current user hasn't changed, update\r\n    // current user will trigger a persistence update w/ the\r\n    // new info.\r\n    await userInternal.auth._persistUserIfCurrent(userInternal);\r\n    userInternal.auth._notifyListenersIfCurrent(userInternal);\r\n}\r\nfunction mergeProviderData(original, newData) {\r\n    const deduped = original.filter(o => !newData.some(n => n.providerId === o.providerId));\r\n    return [...deduped, ...newData];\r\n}\r\nfunction extractProviderData(providers) {\r\n    return providers.map((_a) => {\r\n        var { providerId } = _a, provider = tslib.__rest(_a, [\"providerId\"]);\r\n        return {\r\n            providerId,\r\n            uid: provider.rawId || '',\r\n            displayName: provider.displayName || null,\r\n            email: provider.email || null,\r\n            phoneNumber: provider.phoneNumber || null,\r\n            photoURL: provider.photoUrl || null\r\n        };\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function requestStsToken(auth, refreshToken) {\r\n    const response = await _performFetchWithErrorHandling(auth, {}, async () => {\r\n        const body = util.querystring({\r\n            'grant_type': 'refresh_token',\r\n            'refresh_token': refreshToken\r\n        }).slice(1);\r\n        const { tokenApiHost, apiKey } = auth.config;\r\n        const url = _getFinalTarget(auth, tokenApiHost, \"/v1/token\" /* Endpoint.TOKEN */, `key=${apiKey}`);\r\n        const headers = await auth._getAdditionalHeaders();\r\n        headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/x-www-form-urlencoded';\r\n        return FetchProvider.fetch()(url, {\r\n            method: \"POST\" /* HttpMethod.POST */,\r\n            headers,\r\n            body\r\n        });\r\n    });\r\n    // The response comes back in snake_case. Convert to camel:\r\n    return {\r\n        accessToken: response.access_token,\r\n        expiresIn: response.expires_in,\r\n        refreshToken: response.refresh_token\r\n    };\r\n}\r\nasync function revokeToken(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts:revokeToken\" /* Endpoint.REVOKE_TOKEN */, _addTidIfNecessary(auth, request));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * We need to mark this class as internal explicitly to exclude it in the public typings, because\r\n * it references AuthInternal which has a circular dependency with UserInternal.\r\n *\r\n * @internal\r\n */\r\nclass StsTokenManager {\r\n    constructor() {\r\n        this.refreshToken = null;\r\n        this.accessToken = null;\r\n        this.expirationTime = null;\r\n    }\r\n    get isExpired() {\r\n        return (!this.expirationTime ||\r\n            Date.now() > this.expirationTime - 30000 /* Buffer.TOKEN_REFRESH */);\r\n    }\r\n    updateFromServerResponse(response) {\r\n        _assert(response.idToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        _assert(typeof response.idToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        _assert(typeof response.refreshToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        const expiresIn = 'expiresIn' in response && typeof response.expiresIn !== 'undefined'\r\n            ? Number(response.expiresIn)\r\n            : _tokenExpiresIn(response.idToken);\r\n        this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);\r\n    }\r\n    async getToken(auth, forceRefresh = false) {\r\n        _assert(!this.accessToken || this.refreshToken, auth, \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */);\r\n        if (!forceRefresh && this.accessToken && !this.isExpired) {\r\n            return this.accessToken;\r\n        }\r\n        if (this.refreshToken) {\r\n            await this.refresh(auth, this.refreshToken);\r\n            return this.accessToken;\r\n        }\r\n        return null;\r\n    }\r\n    clearRefreshToken() {\r\n        this.refreshToken = null;\r\n    }\r\n    async refresh(auth, oldToken) {\r\n        const { accessToken, refreshToken, expiresIn } = await requestStsToken(auth, oldToken);\r\n        this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));\r\n    }\r\n    updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {\r\n        this.refreshToken = refreshToken || null;\r\n        this.accessToken = accessToken || null;\r\n        this.expirationTime = Date.now() + expiresInSec * 1000;\r\n    }\r\n    static fromJSON(appName, object) {\r\n        const { refreshToken, accessToken, expirationTime } = object;\r\n        const manager = new StsTokenManager();\r\n        if (refreshToken) {\r\n            _assert(typeof refreshToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\r\n                appName\r\n            });\r\n            manager.refreshToken = refreshToken;\r\n        }\r\n        if (accessToken) {\r\n            _assert(typeof accessToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\r\n                appName\r\n            });\r\n            manager.accessToken = accessToken;\r\n        }\r\n        if (expirationTime) {\r\n            _assert(typeof expirationTime === 'number', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\r\n                appName\r\n            });\r\n            manager.expirationTime = expirationTime;\r\n        }\r\n        return manager;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            refreshToken: this.refreshToken,\r\n            accessToken: this.accessToken,\r\n            expirationTime: this.expirationTime\r\n        };\r\n    }\r\n    _assign(stsTokenManager) {\r\n        this.accessToken = stsTokenManager.accessToken;\r\n        this.refreshToken = stsTokenManager.refreshToken;\r\n        this.expirationTime = stsTokenManager.expirationTime;\r\n    }\r\n    _clone() {\r\n        return Object.assign(new StsTokenManager(), this.toJSON());\r\n    }\r\n    _performRefresh() {\r\n        return debugFail('not implemented');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction assertStringOrUndefined(assertion, appName) {\r\n    _assert(typeof assertion === 'string' || typeof assertion === 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, { appName });\r\n}\r\nclass UserImpl {\r\n    constructor(_a) {\r\n        var { uid, auth, stsTokenManager } = _a, opt = tslib.__rest(_a, [\"uid\", \"auth\", \"stsTokenManager\"]);\r\n        // For the user object, provider is always Firebase.\r\n        this.providerId = \"firebase\" /* ProviderId.FIREBASE */;\r\n        this.proactiveRefresh = new ProactiveRefresh(this);\r\n        this.reloadUserInfo = null;\r\n        this.reloadListener = null;\r\n        this.uid = uid;\r\n        this.auth = auth;\r\n        this.stsTokenManager = stsTokenManager;\r\n        this.accessToken = stsTokenManager.accessToken;\r\n        this.displayName = opt.displayName || null;\r\n        this.email = opt.email || null;\r\n        this.emailVerified = opt.emailVerified || false;\r\n        this.phoneNumber = opt.phoneNumber || null;\r\n        this.photoURL = opt.photoURL || null;\r\n        this.isAnonymous = opt.isAnonymous || false;\r\n        this.tenantId = opt.tenantId || null;\r\n        this.providerData = opt.providerData ? [...opt.providerData] : [];\r\n        this.metadata = new UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);\r\n    }\r\n    async getIdToken(forceRefresh) {\r\n        const accessToken = await _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));\r\n        _assert(accessToken, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        if (this.accessToken !== accessToken) {\r\n            this.accessToken = accessToken;\r\n            await this.auth._persistUserIfCurrent(this);\r\n            this.auth._notifyListenersIfCurrent(this);\r\n        }\r\n        return accessToken;\r\n    }\r\n    getIdTokenResult(forceRefresh) {\r\n        return getIdTokenResult(this, forceRefresh);\r\n    }\r\n    reload() {\r\n        return reload(this);\r\n    }\r\n    _assign(user) {\r\n        if (this === user) {\r\n            return;\r\n        }\r\n        _assert(this.uid === user.uid, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        this.displayName = user.displayName;\r\n        this.photoURL = user.photoURL;\r\n        this.email = user.email;\r\n        this.emailVerified = user.emailVerified;\r\n        this.phoneNumber = user.phoneNumber;\r\n        this.isAnonymous = user.isAnonymous;\r\n        this.tenantId = user.tenantId;\r\n        this.providerData = user.providerData.map(userInfo => (Object.assign({}, userInfo)));\r\n        this.metadata._copy(user.metadata);\r\n        this.stsTokenManager._assign(user.stsTokenManager);\r\n    }\r\n    _clone(auth) {\r\n        const newUser = new UserImpl(Object.assign(Object.assign({}, this), { auth, stsTokenManager: this.stsTokenManager._clone() }));\r\n        newUser.metadata._copy(this.metadata);\r\n        return newUser;\r\n    }\r\n    _onReload(callback) {\r\n        // There should only ever be one listener, and that is a single instance of MultiFactorUser\r\n        _assert(!this.reloadListener, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        this.reloadListener = callback;\r\n        if (this.reloadUserInfo) {\r\n            this._notifyReloadListener(this.reloadUserInfo);\r\n            this.reloadUserInfo = null;\r\n        }\r\n    }\r\n    _notifyReloadListener(userInfo) {\r\n        if (this.reloadListener) {\r\n            this.reloadListener(userInfo);\r\n        }\r\n        else {\r\n            // If no listener is subscribed yet, save the result so it's available when they do subscribe\r\n            this.reloadUserInfo = userInfo;\r\n        }\r\n    }\r\n    _startProactiveRefresh() {\r\n        this.proactiveRefresh._start();\r\n    }\r\n    _stopProactiveRefresh() {\r\n        this.proactiveRefresh._stop();\r\n    }\r\n    async _updateTokensIfNecessary(response, reload = false) {\r\n        let tokensRefreshed = false;\r\n        if (response.idToken &&\r\n            response.idToken !== this.stsTokenManager.accessToken) {\r\n            this.stsTokenManager.updateFromServerResponse(response);\r\n            tokensRefreshed = true;\r\n        }\r\n        if (reload) {\r\n            await _reloadWithoutSaving(this);\r\n        }\r\n        await this.auth._persistUserIfCurrent(this);\r\n        if (tokensRefreshed) {\r\n            this.auth._notifyListenersIfCurrent(this);\r\n        }\r\n    }\r\n    async delete() {\r\n        const idToken = await this.getIdToken();\r\n        await _logoutIfInvalidated(this, deleteAccount(this.auth, { idToken }));\r\n        this.stsTokenManager.clearRefreshToken();\r\n        // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()\r\n        //       cancels pending actions...\r\n        return this.auth.signOut();\r\n    }\r\n    toJSON() {\r\n        return Object.assign(Object.assign({ uid: this.uid, email: this.email || undefined, emailVerified: this.emailVerified, displayName: this.displayName || undefined, isAnonymous: this.isAnonymous, photoURL: this.photoURL || undefined, phoneNumber: this.phoneNumber || undefined, tenantId: this.tenantId || undefined, providerData: this.providerData.map(userInfo => (Object.assign({}, userInfo))), stsTokenManager: this.stsTokenManager.toJSON(), \r\n            // Redirect event ID must be maintained in case there is a pending\r\n            // redirect event.\r\n            _redirectEventId: this._redirectEventId }, this.metadata.toJSON()), { \r\n            // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):\r\n            apiKey: this.auth.config.apiKey, appName: this.auth.name });\r\n    }\r\n    get refreshToken() {\r\n        return this.stsTokenManager.refreshToken || '';\r\n    }\r\n    static _fromJSON(auth, object) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h;\r\n        const displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : undefined;\r\n        const email = (_b = object.email) !== null && _b !== void 0 ? _b : undefined;\r\n        const phoneNumber = (_c = object.phoneNumber) !== null && _c !== void 0 ? _c : undefined;\r\n        const photoURL = (_d = object.photoURL) !== null && _d !== void 0 ? _d : undefined;\r\n        const tenantId = (_e = object.tenantId) !== null && _e !== void 0 ? _e : undefined;\r\n        const _redirectEventId = (_f = object._redirectEventId) !== null && _f !== void 0 ? _f : undefined;\r\n        const createdAt = (_g = object.createdAt) !== null && _g !== void 0 ? _g : undefined;\r\n        const lastLoginAt = (_h = object.lastLoginAt) !== null && _h !== void 0 ? _h : undefined;\r\n        const { uid, emailVerified, isAnonymous, providerData, stsTokenManager: plainObjectTokenManager } = object;\r\n        _assert(uid && plainObjectTokenManager, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        const stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);\r\n        _assert(typeof uid === 'string', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        assertStringOrUndefined(displayName, auth.name);\r\n        assertStringOrUndefined(email, auth.name);\r\n        _assert(typeof emailVerified === 'boolean', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        _assert(typeof isAnonymous === 'boolean', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        assertStringOrUndefined(phoneNumber, auth.name);\r\n        assertStringOrUndefined(photoURL, auth.name);\r\n        assertStringOrUndefined(tenantId, auth.name);\r\n        assertStringOrUndefined(_redirectEventId, auth.name);\r\n        assertStringOrUndefined(createdAt, auth.name);\r\n        assertStringOrUndefined(lastLoginAt, auth.name);\r\n        const user = new UserImpl({\r\n            uid,\r\n            auth,\r\n            email,\r\n            emailVerified,\r\n            displayName,\r\n            isAnonymous,\r\n            photoURL,\r\n            phoneNumber,\r\n            tenantId,\r\n            stsTokenManager,\r\n            createdAt,\r\n            lastLoginAt\r\n        });\r\n        if (providerData && Array.isArray(providerData)) {\r\n            user.providerData = providerData.map(userInfo => (Object.assign({}, userInfo)));\r\n        }\r\n        if (_redirectEventId) {\r\n            user._redirectEventId = _redirectEventId;\r\n        }\r\n        return user;\r\n    }\r\n    /**\r\n     * Initialize a User from an idToken server response\r\n     * @param auth\r\n     * @param idTokenResponse\r\n     */\r\n    static async _fromIdTokenResponse(auth, idTokenResponse, isAnonymous = false) {\r\n        const stsTokenManager = new StsTokenManager();\r\n        stsTokenManager.updateFromServerResponse(idTokenResponse);\r\n        // Initialize the Firebase Auth user.\r\n        const user = new UserImpl({\r\n            uid: idTokenResponse.localId,\r\n            auth,\r\n            stsTokenManager,\r\n            isAnonymous\r\n        });\r\n        // Updates the user info and data and resolves with a user instance.\r\n        await _reloadWithoutSaving(user);\r\n        return user;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst instanceCache = new Map();\r\nfunction _getInstance(cls) {\r\n    debugAssert(cls instanceof Function, 'Expected a class definition');\r\n    let instance = instanceCache.get(cls);\r\n    if (instance) {\r\n        debugAssert(instance instanceof cls, 'Instance stored in cache mismatched with class');\r\n        return instance;\r\n    }\r\n    instance = new cls();\r\n    instanceCache.set(cls, instance);\r\n    return instance;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass InMemoryPersistence {\r\n    constructor() {\r\n        this.type = \"NONE\" /* PersistenceType.NONE */;\r\n        this.storage = {};\r\n    }\r\n    async _isAvailable() {\r\n        return true;\r\n    }\r\n    async _set(key, value) {\r\n        this.storage[key] = value;\r\n    }\r\n    async _get(key) {\r\n        const value = this.storage[key];\r\n        return value === undefined ? null : value;\r\n    }\r\n    async _remove(key) {\r\n        delete this.storage[key];\r\n    }\r\n    _addListener(_key, _listener) {\r\n        // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\r\n        return;\r\n    }\r\n    _removeListener(_key, _listener) {\r\n        // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\r\n        return;\r\n    }\r\n}\r\nInMemoryPersistence.type = 'NONE';\r\n/**\r\n * An implementation of {@link Persistence} of type 'NONE'.\r\n *\r\n * @public\r\n */\r\nconst inMemoryPersistence = InMemoryPersistence;\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction _persistenceKeyName(key, apiKey, appName) {\r\n    return `${\"firebase\" /* Namespace.PERSISTENCE */}:${key}:${apiKey}:${appName}`;\r\n}\r\nclass PersistenceUserManager {\r\n    constructor(persistence, auth, userKey) {\r\n        this.persistence = persistence;\r\n        this.auth = auth;\r\n        this.userKey = userKey;\r\n        const { config, name } = this.auth;\r\n        this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);\r\n        this.fullPersistenceKey = _persistenceKeyName(\"persistence\" /* KeyName.PERSISTENCE_USER */, config.apiKey, name);\r\n        this.boundEventHandler = auth._onStorageEvent.bind(auth);\r\n        this.persistence._addListener(this.fullUserKey, this.boundEventHandler);\r\n    }\r\n    setCurrentUser(user) {\r\n        return this.persistence._set(this.fullUserKey, user.toJSON());\r\n    }\r\n    async getCurrentUser() {\r\n        const blob = await this.persistence._get(this.fullUserKey);\r\n        return blob ? UserImpl._fromJSON(this.auth, blob) : null;\r\n    }\r\n    removeCurrentUser() {\r\n        return this.persistence._remove(this.fullUserKey);\r\n    }\r\n    savePersistenceForRedirect() {\r\n        return this.persistence._set(this.fullPersistenceKey, this.persistence.type);\r\n    }\r\n    async setPersistence(newPersistence) {\r\n        if (this.persistence === newPersistence) {\r\n            return;\r\n        }\r\n        const currentUser = await this.getCurrentUser();\r\n        await this.removeCurrentUser();\r\n        this.persistence = newPersistence;\r\n        if (currentUser) {\r\n            return this.setCurrentUser(currentUser);\r\n        }\r\n    }\r\n    delete() {\r\n        this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);\r\n    }\r\n    static async create(auth, persistenceHierarchy, userKey = \"authUser\" /* KeyName.AUTH_USER */) {\r\n        if (!persistenceHierarchy.length) {\r\n            return new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey);\r\n        }\r\n        // Eliminate any persistences that are not available\r\n        const availablePersistences = (await Promise.all(persistenceHierarchy.map(async (persistence) => {\r\n            if (await persistence._isAvailable()) {\r\n                return persistence;\r\n            }\r\n            return undefined;\r\n        }))).filter(persistence => persistence);\r\n        // Fall back to the first persistence listed, or in memory if none available\r\n        let selectedPersistence = availablePersistences[0] ||\r\n            _getInstance(inMemoryPersistence);\r\n        const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);\r\n        // Pull out the existing user, setting the chosen persistence to that\r\n        // persistence if the user exists.\r\n        let userToMigrate = null;\r\n        // Note, here we check for a user in _all_ persistences, not just the\r\n        // ones deemed available. If we can migrate a user out of a broken\r\n        // persistence, we will (but only if that persistence supports migration).\r\n        for (const persistence of persistenceHierarchy) {\r\n            try {\r\n                const blob = await persistence._get(key);\r\n                if (blob) {\r\n                    const user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)\r\n                    if (persistence !== selectedPersistence) {\r\n                        userToMigrate = user;\r\n                    }\r\n                    selectedPersistence = persistence;\r\n                    break;\r\n                }\r\n            }\r\n            catch (_a) { }\r\n        }\r\n        // If we find the user in a persistence that does support migration, use\r\n        // that migration path (of only persistences that support migration)\r\n        const migrationHierarchy = availablePersistences.filter(p => p._shouldAllowMigration);\r\n        // If the persistence does _not_ allow migration, just finish off here\r\n        if (!selectedPersistence._shouldAllowMigration ||\r\n            !migrationHierarchy.length) {\r\n            return new PersistenceUserManager(selectedPersistence, auth, userKey);\r\n        }\r\n        selectedPersistence = migrationHierarchy[0];\r\n        if (userToMigrate) {\r\n            // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does\r\n            // we'll just let it bubble to surface the error.\r\n            await selectedPersistence._set(key, userToMigrate.toJSON());\r\n        }\r\n        // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues\r\n        // such as users getting stuck with a previous account after signing out and refreshing the tab.\r\n        await Promise.all(persistenceHierarchy.map(async (persistence) => {\r\n            if (persistence !== selectedPersistence) {\r\n                try {\r\n                    await persistence._remove(key);\r\n                }\r\n                catch (_a) { }\r\n            }\r\n        }));\r\n        return new PersistenceUserManager(selectedPersistence, auth, userKey);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Determine the browser for the purposes of reporting usage to the API\r\n */\r\nfunction _getBrowserName(userAgent) {\r\n    const ua = userAgent.toLowerCase();\r\n    if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {\r\n        return \"Opera\" /* BrowserName.OPERA */;\r\n    }\r\n    else if (_isIEMobile(ua)) {\r\n        // Windows phone IEMobile browser.\r\n        return \"IEMobile\" /* BrowserName.IEMOBILE */;\r\n    }\r\n    else if (ua.includes('msie') || ua.includes('trident/')) {\r\n        return \"IE\" /* BrowserName.IE */;\r\n    }\r\n    else if (ua.includes('edge/')) {\r\n        return \"Edge\" /* BrowserName.EDGE */;\r\n    }\r\n    else if (_isFirefox(ua)) {\r\n        return \"Firefox\" /* BrowserName.FIREFOX */;\r\n    }\r\n    else if (ua.includes('silk/')) {\r\n        return \"Silk\" /* BrowserName.SILK */;\r\n    }\r\n    else if (_isBlackBerry(ua)) {\r\n        // Blackberry browser.\r\n        return \"Blackberry\" /* BrowserName.BLACKBERRY */;\r\n    }\r\n    else if (_isWebOS(ua)) {\r\n        // WebOS default browser.\r\n        return \"Webos\" /* BrowserName.WEBOS */;\r\n    }\r\n    else if (_isSafari(ua)) {\r\n        return \"Safari\" /* BrowserName.SAFARI */;\r\n    }\r\n    else if ((ua.includes('chrome/') || _isChromeIOS(ua)) &&\r\n        !ua.includes('edge/')) {\r\n        return \"Chrome\" /* BrowserName.CHROME */;\r\n    }\r\n    else if (_isAndroid(ua)) {\r\n        // Android stock browser.\r\n        return \"Android\" /* BrowserName.ANDROID */;\r\n    }\r\n    else {\r\n        // Most modern browsers have name/version at end of user agent string.\r\n        const re = /([a-zA-Z\\d\\.]+)\\/[a-zA-Z\\d\\.]*$/;\r\n        const matches = userAgent.match(re);\r\n        if ((matches === null || matches === void 0 ? void 0 : matches.length) === 2) {\r\n            return matches[1];\r\n        }\r\n    }\r\n    return \"Other\" /* BrowserName.OTHER */;\r\n}\r\nfunction _isFirefox(ua = util.getUA()) {\r\n    return /firefox\\//i.test(ua);\r\n}\r\nfunction _isSafari(userAgent = util.getUA()) {\r\n    const ua = userAgent.toLowerCase();\r\n    return (ua.includes('safari/') &&\r\n        !ua.includes('chrome/') &&\r\n        !ua.includes('crios/') &&\r\n        !ua.includes('android'));\r\n}\r\nfunction _isChromeIOS(ua = util.getUA()) {\r\n    return /crios\\//i.test(ua);\r\n}\r\nfunction _isIEMobile(ua = util.getUA()) {\r\n    return /iemobile/i.test(ua);\r\n}\r\nfunction _isAndroid(ua = util.getUA()) {\r\n    return /android/i.test(ua);\r\n}\r\nfunction _isBlackBerry(ua = util.getUA()) {\r\n    return /blackberry/i.test(ua);\r\n}\r\nfunction _isWebOS(ua = util.getUA()) {\r\n    return /webos/i.test(ua);\r\n}\r\nfunction _isIOS(ua = util.getUA()) {\r\n    return (/iphone|ipad|ipod/i.test(ua) ||\r\n        (/macintosh/i.test(ua) && /mobile/i.test(ua)));\r\n}\r\nfunction _isIOS7Or8(ua = util.getUA()) {\r\n    return (/(iPad|iPhone|iPod).*OS 7_\\d/i.test(ua) ||\r\n        /(iPad|iPhone|iPod).*OS 8_\\d/i.test(ua));\r\n}\r\nfunction _isIOSStandalone(ua = util.getUA()) {\r\n    var _a;\r\n    return _isIOS(ua) && !!((_a = window.navigator) === null || _a === void 0 ? void 0 : _a.standalone);\r\n}\r\nfunction _isIE10() {\r\n    return util.isIE() && document.documentMode === 10;\r\n}\r\nfunction _isMobileBrowser(ua = util.getUA()) {\r\n    // TODO: implement getBrowserName equivalent for OS.\r\n    return (_isIOS(ua) ||\r\n        _isAndroid(ua) ||\r\n        _isWebOS(ua) ||\r\n        _isBlackBerry(ua) ||\r\n        /windows phone/i.test(ua) ||\r\n        _isIEMobile(ua));\r\n}\r\nfunction _isIframe() {\r\n    try {\r\n        // Check that the current window is not the top window.\r\n        // If so, return true.\r\n        return !!(window && window !== window.top);\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/*\r\n * Determine the SDK version string\r\n */\r\nfunction _getClientVersion(clientPlatform, frameworks = []) {\r\n    let reportedPlatform;\r\n    switch (clientPlatform) {\r\n        case \"Browser\" /* ClientPlatform.BROWSER */:\r\n            // In a browser environment, report the browser name.\r\n            reportedPlatform = _getBrowserName(util.getUA());\r\n            break;\r\n        case \"Worker\" /* ClientPlatform.WORKER */:\r\n            // Technically a worker runs from a browser but we need to differentiate a\r\n            // worker from a browser.\r\n            // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.\r\n            reportedPlatform = `${_getBrowserName(util.getUA())}-${clientPlatform}`;\r\n            break;\r\n        default:\r\n            reportedPlatform = clientPlatform;\r\n    }\r\n    const reportedFrameworks = frameworks.length\r\n        ? frameworks.join(',')\r\n        : 'FirebaseCore-web'; /* default value if no other framework is used */\r\n    return `${reportedPlatform}/${\"JsCore\" /* ClientImplementation.CORE */}/${app.SDK_VERSION}/${reportedFrameworks}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AuthMiddlewareQueue {\r\n    constructor(auth) {\r\n        this.auth = auth;\r\n        this.queue = [];\r\n    }\r\n    pushCallback(callback, onAbort) {\r\n        // The callback could be sync or async. Wrap it into a\r\n        // function that is always async.\r\n        const wrappedCallback = (user) => new Promise((resolve, reject) => {\r\n            try {\r\n                const result = callback(user);\r\n                // Either resolve with existing promise or wrap a non-promise\r\n                // return value into a promise.\r\n                resolve(result);\r\n            }\r\n            catch (e) {\r\n                // Sync callback throws.\r\n                reject(e);\r\n            }\r\n        });\r\n        // Attach the onAbort if present\r\n        wrappedCallback.onAbort = onAbort;\r\n        this.queue.push(wrappedCallback);\r\n        const index = this.queue.length - 1;\r\n        return () => {\r\n            // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb\r\n            // indexing of other elements.\r\n            this.queue[index] = () => Promise.resolve();\r\n        };\r\n    }\r\n    async runMiddleware(nextUser) {\r\n        if (this.auth.currentUser === nextUser) {\r\n            return;\r\n        }\r\n        // While running the middleware, build a temporary stack of onAbort\r\n        // callbacks to call if one middleware callback rejects.\r\n        const onAbortStack = [];\r\n        try {\r\n            for (const beforeStateCallback of this.queue) {\r\n                await beforeStateCallback(nextUser);\r\n                // Only push the onAbort if the callback succeeds\r\n                if (beforeStateCallback.onAbort) {\r\n                    onAbortStack.push(beforeStateCallback.onAbort);\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            // Run all onAbort, with separate try/catch to ignore any errors and\r\n            // continue\r\n            onAbortStack.reverse();\r\n            for (const onAbort of onAbortStack) {\r\n                try {\r\n                    onAbort();\r\n                }\r\n                catch (_) {\r\n                    /* swallow error */\r\n                }\r\n            }\r\n            throw this.auth._errorFactory.create(\"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */, {\r\n                originalMessage: e === null || e === void 0 ? void 0 : e.message\r\n            });\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Fetches the password policy for the currently set tenant or the project if no tenant is set.\r\n *\r\n * @param auth Auth object.\r\n * @param request Password policy request.\r\n * @returns Password policy response.\r\n */\r\nasync function _getPasswordPolicy(auth, request = {}) {\r\n    return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v2/passwordPolicy\" /* Endpoint.GET_PASSWORD_POLICY */, _addTidIfNecessary(auth, request));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Minimum min password length enforced by the backend, even if no minimum length is set.\r\nconst MINIMUM_MIN_PASSWORD_LENGTH = 6;\r\n/**\r\n * Stores password policy requirements and provides password validation against the policy.\r\n *\r\n * @internal\r\n */\r\nclass PasswordPolicyImpl {\r\n    constructor(response) {\r\n        var _a, _b, _c, _d;\r\n        // Only include custom strength options defined in the response.\r\n        const responseOptions = response.customStrengthOptions;\r\n        this.customStrengthOptions = {};\r\n        // TODO: Remove once the backend is updated to include the minimum min password length instead of undefined when there is no minimum length set.\r\n        this.customStrengthOptions.minPasswordLength =\r\n            (_a = responseOptions.minPasswordLength) !== null && _a !== void 0 ? _a : MINIMUM_MIN_PASSWORD_LENGTH;\r\n        if (responseOptions.maxPasswordLength) {\r\n            this.customStrengthOptions.maxPasswordLength =\r\n                responseOptions.maxPasswordLength;\r\n        }\r\n        if (responseOptions.containsLowercaseCharacter !== undefined) {\r\n            this.customStrengthOptions.containsLowercaseLetter =\r\n                responseOptions.containsLowercaseCharacter;\r\n        }\r\n        if (responseOptions.containsUppercaseCharacter !== undefined) {\r\n            this.customStrengthOptions.containsUppercaseLetter =\r\n                responseOptions.containsUppercaseCharacter;\r\n        }\r\n        if (responseOptions.containsNumericCharacter !== undefined) {\r\n            this.customStrengthOptions.containsNumericCharacter =\r\n                responseOptions.containsNumericCharacter;\r\n        }\r\n        if (responseOptions.containsNonAlphanumericCharacter !== undefined) {\r\n            this.customStrengthOptions.containsNonAlphanumericCharacter =\r\n                responseOptions.containsNonAlphanumericCharacter;\r\n        }\r\n        this.enforcementState = response.enforcementState;\r\n        if (this.enforcementState === 'ENFORCEMENT_STATE_UNSPECIFIED') {\r\n            this.enforcementState = 'OFF';\r\n        }\r\n        // Use an empty string if no non-alphanumeric characters are specified in the response.\r\n        this.allowedNonAlphanumericCharacters =\r\n            (_c = (_b = response.allowedNonAlphanumericCharacters) === null || _b === void 0 ? void 0 : _b.join('')) !== null && _c !== void 0 ? _c : '';\r\n        this.forceUpgradeOnSignin = (_d = response.forceUpgradeOnSignin) !== null && _d !== void 0 ? _d : false;\r\n        this.schemaVersion = response.schemaVersion;\r\n    }\r\n    validatePassword(password) {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        const status = {\r\n            isValid: true,\r\n            passwordPolicy: this\r\n        };\r\n        // Check the password length and character options.\r\n        this.validatePasswordLengthOptions(password, status);\r\n        this.validatePasswordCharacterOptions(password, status);\r\n        // Combine the status into single isValid property.\r\n        status.isValid && (status.isValid = (_a = status.meetsMinPasswordLength) !== null && _a !== void 0 ? _a : true);\r\n        status.isValid && (status.isValid = (_b = status.meetsMaxPasswordLength) !== null && _b !== void 0 ? _b : true);\r\n        status.isValid && (status.isValid = (_c = status.containsLowercaseLetter) !== null && _c !== void 0 ? _c : true);\r\n        status.isValid && (status.isValid = (_d = status.containsUppercaseLetter) !== null && _d !== void 0 ? _d : true);\r\n        status.isValid && (status.isValid = (_e = status.containsNumericCharacter) !== null && _e !== void 0 ? _e : true);\r\n        status.isValid && (status.isValid = (_f = status.containsNonAlphanumericCharacter) !== null && _f !== void 0 ? _f : true);\r\n        return status;\r\n    }\r\n    /**\r\n     * Validates that the password meets the length options for the policy.\r\n     *\r\n     * @param password Password to validate.\r\n     * @param status Validation status.\r\n     */\r\n    validatePasswordLengthOptions(password, status) {\r\n        const minPasswordLength = this.customStrengthOptions.minPasswordLength;\r\n        const maxPasswordLength = this.customStrengthOptions.maxPasswordLength;\r\n        if (minPasswordLength) {\r\n            status.meetsMinPasswordLength = password.length >= minPasswordLength;\r\n        }\r\n        if (maxPasswordLength) {\r\n            status.meetsMaxPasswordLength = password.length <= maxPasswordLength;\r\n        }\r\n    }\r\n    /**\r\n     * Validates that the password meets the character options for the policy.\r\n     *\r\n     * @param password Password to validate.\r\n     * @param status Validation status.\r\n     */\r\n    validatePasswordCharacterOptions(password, status) {\r\n        // Assign statuses for requirements even if the password is an empty string.\r\n        this.updatePasswordCharacterOptionsStatuses(status, \r\n        /* containsLowercaseCharacter= */ false, \r\n        /* containsUppercaseCharacter= */ false, \r\n        /* containsNumericCharacter= */ false, \r\n        /* containsNonAlphanumericCharacter= */ false);\r\n        let passwordChar;\r\n        for (let i = 0; i < password.length; i++) {\r\n            passwordChar = password.charAt(i);\r\n            this.updatePasswordCharacterOptionsStatuses(status, \r\n            /* containsLowercaseCharacter= */ passwordChar >= 'a' &&\r\n                passwordChar <= 'z', \r\n            /* containsUppercaseCharacter= */ passwordChar >= 'A' &&\r\n                passwordChar <= 'Z', \r\n            /* containsNumericCharacter= */ passwordChar >= '0' &&\r\n                passwordChar <= '9', \r\n            /* containsNonAlphanumericCharacter= */ this.allowedNonAlphanumericCharacters.includes(passwordChar));\r\n        }\r\n    }\r\n    /**\r\n     * Updates the running validation status with the statuses for the character options.\r\n     * Expected to be called each time a character is processed to update each option status\r\n     * based on the current character.\r\n     *\r\n     * @param status Validation status.\r\n     * @param containsLowercaseCharacter Whether the character is a lowercase letter.\r\n     * @param containsUppercaseCharacter Whether the character is an uppercase letter.\r\n     * @param containsNumericCharacter Whether the character is a numeric character.\r\n     * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.\r\n     */\r\n    updatePasswordCharacterOptionsStatuses(status, containsLowercaseCharacter, containsUppercaseCharacter, containsNumericCharacter, containsNonAlphanumericCharacter) {\r\n        if (this.customStrengthOptions.containsLowercaseLetter) {\r\n            status.containsLowercaseLetter || (status.containsLowercaseLetter = containsLowercaseCharacter);\r\n        }\r\n        if (this.customStrengthOptions.containsUppercaseLetter) {\r\n            status.containsUppercaseLetter || (status.containsUppercaseLetter = containsUppercaseCharacter);\r\n        }\r\n        if (this.customStrengthOptions.containsNumericCharacter) {\r\n            status.containsNumericCharacter || (status.containsNumericCharacter = containsNumericCharacter);\r\n        }\r\n        if (this.customStrengthOptions.containsNonAlphanumericCharacter) {\r\n            status.containsNonAlphanumericCharacter || (status.containsNonAlphanumericCharacter = containsNonAlphanumericCharacter);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AuthImpl {\r\n    constructor(app, heartbeatServiceProvider, appCheckServiceProvider, config) {\r\n        this.app = app;\r\n        this.heartbeatServiceProvider = heartbeatServiceProvider;\r\n        this.appCheckServiceProvider = appCheckServiceProvider;\r\n        this.config = config;\r\n        this.currentUser = null;\r\n        this.emulatorConfig = null;\r\n        this.operations = Promise.resolve();\r\n        this.authStateSubscription = new Subscription(this);\r\n        this.idTokenSubscription = new Subscription(this);\r\n        this.beforeStateQueue = new AuthMiddlewareQueue(this);\r\n        this.redirectUser = null;\r\n        this.isProactiveRefreshEnabled = false;\r\n        this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION = 1;\r\n        // Any network calls will set this to true and prevent subsequent emulator\r\n        // initialization\r\n        this._canInitEmulator = true;\r\n        this._isInitialized = false;\r\n        this._deleted = false;\r\n        this._initializationPromise = null;\r\n        this._popupRedirectResolver = null;\r\n        this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;\r\n        this._agentRecaptchaConfig = null;\r\n        this._tenantRecaptchaConfigs = {};\r\n        this._projectPasswordPolicy = null;\r\n        this._tenantPasswordPolicies = {};\r\n        // Tracks the last notified UID for state change listeners to prevent\r\n        // repeated calls to the callbacks. Undefined means it's never been\r\n        // called, whereas null means it's been called with a signed out user\r\n        this.lastNotifiedUid = undefined;\r\n        this.languageCode = null;\r\n        this.tenantId = null;\r\n        this.settings = { appVerificationDisabledForTesting: false };\r\n        this.frameworks = [];\r\n        this.name = app.name;\r\n        this.clientVersion = config.sdkClientVersion;\r\n    }\r\n    _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {\r\n        if (popupRedirectResolver) {\r\n            this._popupRedirectResolver = _getInstance(popupRedirectResolver);\r\n        }\r\n        // Have to check for app deletion throughout initialization (after each\r\n        // promise resolution)\r\n        this._initializationPromise = this.queue(async () => {\r\n            var _a, _b;\r\n            if (this._deleted) {\r\n                return;\r\n            }\r\n            this.persistenceManager = await PersistenceUserManager.create(this, persistenceHierarchy);\r\n            if (this._deleted) {\r\n                return;\r\n            }\r\n            // Initialize the resolver early if necessary (only applicable to web:\r\n            // this will cause the iframe to load immediately in certain cases)\r\n            if ((_a = this._popupRedirectResolver) === null || _a === void 0 ? void 0 : _a._shouldInitProactively) {\r\n                // If this fails, don't halt auth loading\r\n                try {\r\n                    await this._popupRedirectResolver._initialize(this);\r\n                }\r\n                catch (e) {\r\n                    /* Ignore the error */\r\n                }\r\n            }\r\n            await this.initializeCurrentUser(popupRedirectResolver);\r\n            this.lastNotifiedUid = ((_b = this.currentUser) === null || _b === void 0 ? void 0 : _b.uid) || null;\r\n            if (this._deleted) {\r\n                return;\r\n            }\r\n            this._isInitialized = true;\r\n        });\r\n        return this._initializationPromise;\r\n    }\r\n    /**\r\n     * If the persistence is changed in another window, the user manager will let us know\r\n     */\r\n    async _onStorageEvent() {\r\n        if (this._deleted) {\r\n            return;\r\n        }\r\n        const user = await this.assertedPersistence.getCurrentUser();\r\n        if (!this.currentUser && !user) {\r\n            // No change, do nothing (was signed out and remained signed out).\r\n            return;\r\n        }\r\n        // If the same user is to be synchronized.\r\n        if (this.currentUser && user && this.currentUser.uid === user.uid) {\r\n            // Data update, simply copy data changes.\r\n            this._currentUser._assign(user);\r\n            // If tokens changed from previous user tokens, this will trigger\r\n            // notifyAuthListeners_.\r\n            await this.currentUser.getIdToken();\r\n            return;\r\n        }\r\n        // Update current Auth state. Either a new login or logout.\r\n        // Skip blocking callbacks, they should not apply to a change in another tab.\r\n        await this._updateCurrentUser(user, /* skipBeforeStateCallbacks */ true);\r\n    }\r\n    async initializeCurrentUser(popupRedirectResolver) {\r\n        var _a;\r\n        // First check to see if we have a pending redirect event.\r\n        const previouslyStoredUser = (await this.assertedPersistence.getCurrentUser());\r\n        let futureCurrentUser = previouslyStoredUser;\r\n        let needsTocheckMiddleware = false;\r\n        if (popupRedirectResolver && this.config.authDomain) {\r\n            await this.getOrInitRedirectPersistenceManager();\r\n            const redirectUserEventId = (_a = this.redirectUser) === null || _a === void 0 ? void 0 : _a._redirectEventId;\r\n            const storedUserEventId = futureCurrentUser === null || futureCurrentUser === void 0 ? void 0 : futureCurrentUser._redirectEventId;\r\n            const result = await this.tryRedirectSignIn(popupRedirectResolver);\r\n            // If the stored user (i.e. the old \"currentUser\") has a redirectId that\r\n            // matches the redirect user, then we want to initially sign in with the\r\n            // new user object from result.\r\n            // TODO(samgho): More thoroughly test all of this\r\n            if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) &&\r\n                (result === null || result === void 0 ? void 0 : result.user)) {\r\n                futureCurrentUser = result.user;\r\n                needsTocheckMiddleware = true;\r\n            }\r\n        }\r\n        // If no user in persistence, there is no current user. Set to null.\r\n        if (!futureCurrentUser) {\r\n            return this.directlySetCurrentUser(null);\r\n        }\r\n        if (!futureCurrentUser._redirectEventId) {\r\n            // This isn't a redirect link operation, we can reload and bail.\r\n            // First though, ensure that we check the middleware is happy.\r\n            if (needsTocheckMiddleware) {\r\n                try {\r\n                    await this.beforeStateQueue.runMiddleware(futureCurrentUser);\r\n                }\r\n                catch (e) {\r\n                    futureCurrentUser = previouslyStoredUser;\r\n                    // We know this is available since the bit is only set when the\r\n                    // resolver is available\r\n                    this._popupRedirectResolver._overrideRedirectResult(this, () => Promise.reject(e));\r\n                }\r\n            }\r\n            if (futureCurrentUser) {\r\n                return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\r\n            }\r\n            else {\r\n                return this.directlySetCurrentUser(null);\r\n            }\r\n        }\r\n        _assert(this._popupRedirectResolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        await this.getOrInitRedirectPersistenceManager();\r\n        // If the redirect user's event ID matches the current user's event ID,\r\n        // DO NOT reload the current user, otherwise they'll be cleared from storage.\r\n        // This is important for the reauthenticateWithRedirect() flow.\r\n        if (this.redirectUser &&\r\n            this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) {\r\n            return this.directlySetCurrentUser(futureCurrentUser);\r\n        }\r\n        return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\r\n    }\r\n    async tryRedirectSignIn(redirectResolver) {\r\n        // The redirect user needs to be checked (and signed in if available)\r\n        // during auth initialization. All of the normal sign in and link/reauth\r\n        // flows call back into auth and push things onto the promise queue. We\r\n        // need to await the result of the redirect sign in *inside the promise\r\n        // queue*. This presents a problem: we run into deadlock. See:\r\n        //    ┌> [Initialization] ─────┐\r\n        //    ┌> [<other queue tasks>] │\r\n        //    └─ [getRedirectResult] <─┘\r\n        //    where [] are tasks on the queue and arrows denote awaits\r\n        // Initialization will never complete because it's waiting on something\r\n        // that's waiting for initialization to complete!\r\n        //\r\n        // Instead, this method calls getRedirectResult() (stored in\r\n        // _completeRedirectFn) with an optional parameter that instructs all of\r\n        // the underlying auth operations to skip anything that mutates auth state.\r\n        let result = null;\r\n        try {\r\n            // We know this._popupRedirectResolver is set since redirectResolver\r\n            // is passed in. The _completeRedirectFn expects the unwrapped extern.\r\n            result = await this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);\r\n        }\r\n        catch (e) {\r\n            // Swallow any errors here; the code can retrieve them in\r\n            // getRedirectResult().\r\n            await this._setRedirectUser(null);\r\n        }\r\n        return result;\r\n    }\r\n    async reloadAndSetCurrentUserOrClear(user) {\r\n        try {\r\n            await _reloadWithoutSaving(user);\r\n        }\r\n        catch (e) {\r\n            if ((e === null || e === void 0 ? void 0 : e.code) !==\r\n                `auth/${\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {\r\n                // Something's wrong with the user's token. Log them out and remove\r\n                // them from storage\r\n                return this.directlySetCurrentUser(null);\r\n            }\r\n        }\r\n        return this.directlySetCurrentUser(user);\r\n    }\r\n    useDeviceLanguage() {\r\n        this.languageCode = _getUserLanguage();\r\n    }\r\n    async _delete() {\r\n        this._deleted = true;\r\n    }\r\n    async updateCurrentUser(userExtern) {\r\n        // The public updateCurrentUser method needs to make a copy of the user,\r\n        // and also check that the project matches\r\n        const user = userExtern\r\n            ? util.getModularInstance(userExtern)\r\n            : null;\r\n        if (user) {\r\n            _assert(user.auth.config.apiKey === this.config.apiKey, this, \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */);\r\n        }\r\n        return this._updateCurrentUser(user && user._clone(this));\r\n    }\r\n    async _updateCurrentUser(user, skipBeforeStateCallbacks = false) {\r\n        if (this._deleted) {\r\n            return;\r\n        }\r\n        if (user) {\r\n            _assert(this.tenantId === user.tenantId, this, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */);\r\n        }\r\n        if (!skipBeforeStateCallbacks) {\r\n            await this.beforeStateQueue.runMiddleware(user);\r\n        }\r\n        return this.queue(async () => {\r\n            await this.directlySetCurrentUser(user);\r\n            this.notifyAuthListeners();\r\n        });\r\n    }\r\n    async signOut() {\r\n        // Run first, to block _setRedirectUser() if any callbacks fail.\r\n        await this.beforeStateQueue.runMiddleware(null);\r\n        // Clear the redirect user when signOut is called\r\n        if (this.redirectPersistenceManager || this._popupRedirectResolver) {\r\n            await this._setRedirectUser(null);\r\n        }\r\n        // Prevent callbacks from being called again in _updateCurrentUser, as\r\n        // they were already called in the first line.\r\n        return this._updateCurrentUser(null, /* skipBeforeStateCallbacks */ true);\r\n    }\r\n    setPersistence(persistence) {\r\n        return this.queue(async () => {\r\n            await this.assertedPersistence.setPersistence(_getInstance(persistence));\r\n        });\r\n    }\r\n    _getRecaptchaConfig() {\r\n        if (this.tenantId == null) {\r\n            return this._agentRecaptchaConfig;\r\n        }\r\n        else {\r\n            return this._tenantRecaptchaConfigs[this.tenantId];\r\n        }\r\n    }\r\n    async validatePassword(password) {\r\n        if (!this._getPasswordPolicyInternal()) {\r\n            await this._updatePasswordPolicy();\r\n        }\r\n        // Password policy will be defined after fetching.\r\n        const passwordPolicy = this._getPasswordPolicyInternal();\r\n        // Check that the policy schema version is supported by the SDK.\r\n        // TODO: Update this logic to use a max supported policy schema version once we have multiple schema versions.\r\n        if (passwordPolicy.schemaVersion !==\r\n            this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION) {\r\n            return Promise.reject(this._errorFactory.create(\"unsupported-password-policy-schema-version\" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */, {}));\r\n        }\r\n        return passwordPolicy.validatePassword(password);\r\n    }\r\n    _getPasswordPolicyInternal() {\r\n        if (this.tenantId === null) {\r\n            return this._projectPasswordPolicy;\r\n        }\r\n        else {\r\n            return this._tenantPasswordPolicies[this.tenantId];\r\n        }\r\n    }\r\n    async _updatePasswordPolicy() {\r\n        const response = await _getPasswordPolicy(this);\r\n        const passwordPolicy = new PasswordPolicyImpl(response);\r\n        if (this.tenantId === null) {\r\n            this._projectPasswordPolicy = passwordPolicy;\r\n        }\r\n        else {\r\n            this._tenantPasswordPolicies[this.tenantId] = passwordPolicy;\r\n        }\r\n    }\r\n    _getPersistence() {\r\n        return this.assertedPersistence.persistence.type;\r\n    }\r\n    _updateErrorMap(errorMap) {\r\n        this._errorFactory = new util.ErrorFactory('auth', 'Firebase', errorMap());\r\n    }\r\n    onAuthStateChanged(nextOrObserver, error, completed) {\r\n        return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);\r\n    }\r\n    beforeAuthStateChanged(callback, onAbort) {\r\n        return this.beforeStateQueue.pushCallback(callback, onAbort);\r\n    }\r\n    onIdTokenChanged(nextOrObserver, error, completed) {\r\n        return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);\r\n    }\r\n    authStateReady() {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.currentUser) {\r\n                resolve();\r\n            }\r\n            else {\r\n                const unsubscribe = this.onAuthStateChanged(() => {\r\n                    unsubscribe();\r\n                    resolve();\r\n                }, reject);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Revokes the given access token. Currently only supports Apple OAuth access tokens.\r\n     */\r\n    async revokeAccessToken(token) {\r\n        if (this.currentUser) {\r\n            const idToken = await this.currentUser.getIdToken();\r\n            // Generalize this to accept other providers once supported.\r\n            const request = {\r\n                providerId: 'apple.com',\r\n                tokenType: \"ACCESS_TOKEN\" /* TokenType.ACCESS_TOKEN */,\r\n                token,\r\n                idToken\r\n            };\r\n            if (this.tenantId != null) {\r\n                request.tenantId = this.tenantId;\r\n            }\r\n            await revokeToken(this, request);\r\n        }\r\n    }\r\n    toJSON() {\r\n        var _a;\r\n        return {\r\n            apiKey: this.config.apiKey,\r\n            authDomain: this.config.authDomain,\r\n            appName: this.name,\r\n            currentUser: (_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.toJSON()\r\n        };\r\n    }\r\n    async _setRedirectUser(user, popupRedirectResolver) {\r\n        const redirectManager = await this.getOrInitRedirectPersistenceManager(popupRedirectResolver);\r\n        return user === null\r\n            ? redirectManager.removeCurrentUser()\r\n            : redirectManager.setCurrentUser(user);\r\n    }\r\n    async getOrInitRedirectPersistenceManager(popupRedirectResolver) {\r\n        if (!this.redirectPersistenceManager) {\r\n            const resolver = (popupRedirectResolver && _getInstance(popupRedirectResolver)) ||\r\n                this._popupRedirectResolver;\r\n            _assert(resolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n            this.redirectPersistenceManager = await PersistenceUserManager.create(this, [_getInstance(resolver._redirectPersistence)], \"redirectUser\" /* KeyName.REDIRECT_USER */);\r\n            this.redirectUser =\r\n                await this.redirectPersistenceManager.getCurrentUser();\r\n        }\r\n        return this.redirectPersistenceManager;\r\n    }\r\n    async _redirectUserForId(id) {\r\n        var _a, _b;\r\n        // Make sure we've cleared any pending persistence actions if we're not in\r\n        // the initializer\r\n        if (this._isInitialized) {\r\n            await this.queue(async () => { });\r\n        }\r\n        if (((_a = this._currentUser) === null || _a === void 0 ? void 0 : _a._redirectEventId) === id) {\r\n            return this._currentUser;\r\n        }\r\n        if (((_b = this.redirectUser) === null || _b === void 0 ? void 0 : _b._redirectEventId) === id) {\r\n            return this.redirectUser;\r\n        }\r\n        return null;\r\n    }\r\n    async _persistUserIfCurrent(user) {\r\n        if (user === this.currentUser) {\r\n            return this.queue(async () => this.directlySetCurrentUser(user));\r\n        }\r\n    }\r\n    /** Notifies listeners only if the user is current */\r\n    _notifyListenersIfCurrent(user) {\r\n        if (user === this.currentUser) {\r\n            this.notifyAuthListeners();\r\n        }\r\n    }\r\n    _key() {\r\n        return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;\r\n    }\r\n    _startProactiveRefresh() {\r\n        this.isProactiveRefreshEnabled = true;\r\n        if (this.currentUser) {\r\n            this._currentUser._startProactiveRefresh();\r\n        }\r\n    }\r\n    _stopProactiveRefresh() {\r\n        this.isProactiveRefreshEnabled = false;\r\n        if (this.currentUser) {\r\n            this._currentUser._stopProactiveRefresh();\r\n        }\r\n    }\r\n    /** Returns the current user cast as the internal type */\r\n    get _currentUser() {\r\n        return this.currentUser;\r\n    }\r\n    notifyAuthListeners() {\r\n        var _a, _b;\r\n        if (!this._isInitialized) {\r\n            return;\r\n        }\r\n        this.idTokenSubscription.next(this.currentUser);\r\n        const currentUid = (_b = (_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.uid) !== null && _b !== void 0 ? _b : null;\r\n        if (this.lastNotifiedUid !== currentUid) {\r\n            this.lastNotifiedUid = currentUid;\r\n            this.authStateSubscription.next(this.currentUser);\r\n        }\r\n    }\r\n    registerStateListener(subscription, nextOrObserver, error, completed) {\r\n        if (this._deleted) {\r\n            return () => { };\r\n        }\r\n        const cb = typeof nextOrObserver === 'function'\r\n            ? nextOrObserver\r\n            : nextOrObserver.next.bind(nextOrObserver);\r\n        let isUnsubscribed = false;\r\n        const promise = this._isInitialized\r\n            ? Promise.resolve()\r\n            : this._initializationPromise;\r\n        _assert(promise, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        // The callback needs to be called asynchronously per the spec.\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        promise.then(() => {\r\n            if (isUnsubscribed) {\r\n                return;\r\n            }\r\n            cb(this.currentUser);\r\n        });\r\n        if (typeof nextOrObserver === 'function') {\r\n            const unsubscribe = subscription.addObserver(nextOrObserver, error, completed);\r\n            return () => {\r\n                isUnsubscribed = true;\r\n                unsubscribe();\r\n            };\r\n        }\r\n        else {\r\n            const unsubscribe = subscription.addObserver(nextOrObserver);\r\n            return () => {\r\n                isUnsubscribed = true;\r\n                unsubscribe();\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Unprotected (from race conditions) method to set the current user. This\r\n     * should only be called from within a queued callback. This is necessary\r\n     * because the queue shouldn't rely on another queued callback.\r\n     */\r\n    async directlySetCurrentUser(user) {\r\n        if (this.currentUser && this.currentUser !== user) {\r\n            this._currentUser._stopProactiveRefresh();\r\n        }\r\n        if (user && this.isProactiveRefreshEnabled) {\r\n            user._startProactiveRefresh();\r\n        }\r\n        this.currentUser = user;\r\n        if (user) {\r\n            await this.assertedPersistence.setCurrentUser(user);\r\n        }\r\n        else {\r\n            await this.assertedPersistence.removeCurrentUser();\r\n        }\r\n    }\r\n    queue(action) {\r\n        // In case something errors, the callback still should be called in order\r\n        // to keep the promise chain alive\r\n        this.operations = this.operations.then(action, action);\r\n        return this.operations;\r\n    }\r\n    get assertedPersistence() {\r\n        _assert(this.persistenceManager, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        return this.persistenceManager;\r\n    }\r\n    _logFramework(framework) {\r\n        if (!framework || this.frameworks.includes(framework)) {\r\n            return;\r\n        }\r\n        this.frameworks.push(framework);\r\n        // Sort alphabetically so that \"FirebaseCore-web,FirebaseUI-web\" and\r\n        // \"FirebaseUI-web,FirebaseCore-web\" aren't viewed as different.\r\n        this.frameworks.sort();\r\n        this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());\r\n    }\r\n    _getFrameworks() {\r\n        return this.frameworks;\r\n    }\r\n    async _getAdditionalHeaders() {\r\n        var _a;\r\n        // Additional headers on every request\r\n        const headers = {\r\n            [\"X-Client-Version\" /* HttpHeader.X_CLIENT_VERSION */]: this.clientVersion\r\n        };\r\n        if (this.app.options.appId) {\r\n            headers[\"X-Firebase-gmpid\" /* HttpHeader.X_FIREBASE_GMPID */] = this.app.options.appId;\r\n        }\r\n        // If the heartbeat service exists, add the heartbeat string\r\n        const heartbeatsHeader = await ((_a = this.heartbeatServiceProvider\r\n            .getImmediate({\r\n            optional: true\r\n        })) === null || _a === void 0 ? void 0 : _a.getHeartbeatsHeader());\r\n        if (heartbeatsHeader) {\r\n            headers[\"X-Firebase-Client\" /* HttpHeader.X_FIREBASE_CLIENT */] = heartbeatsHeader;\r\n        }\r\n        // If the App Check service exists, add the App Check token in the headers\r\n        const appCheckToken = await this._getAppCheckToken();\r\n        if (appCheckToken) {\r\n            headers[\"X-Firebase-AppCheck\" /* HttpHeader.X_FIREBASE_APP_CHECK */] = appCheckToken;\r\n        }\r\n        return headers;\r\n    }\r\n    async _getAppCheckToken() {\r\n        var _a;\r\n        const appCheckTokenResult = await ((_a = this.appCheckServiceProvider\r\n            .getImmediate({ optional: true })) === null || _a === void 0 ? void 0 : _a.getToken());\r\n        if (appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.error) {\r\n            // Context: appCheck.getToken() will never throw even if an error happened.\r\n            // In the error case, a dummy token will be returned along with an error field describing\r\n            // the error. In general, we shouldn't care about the error condition and just use\r\n            // the token (actual or dummy) to send requests.\r\n            _logWarn(`Error while retrieving App Check token: ${appCheckTokenResult.error}`);\r\n        }\r\n        return appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.token;\r\n    }\r\n}\r\n/**\r\n * Method to be used to cast down to our private implmentation of Auth.\r\n * It will also handle unwrapping from the compat type if necessary\r\n *\r\n * @param auth Auth object passed in from developer\r\n */\r\nfunction _castAuth(auth) {\r\n    return util.getModularInstance(auth);\r\n}\r\n/** Helper class to wrap subscriber logic */\r\nclass Subscription {\r\n    constructor(auth) {\r\n        this.auth = auth;\r\n        this.observer = null;\r\n        this.addObserver = util.createSubscribe(observer => (this.observer = observer));\r\n    }\r\n    get next() {\r\n        _assert(this.observer, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        return this.observer.next.bind(this.observer);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet externalJSProvider = {\r\n    async loadJS() {\r\n        throw new Error('Unable to load external scripts');\r\n    },\r\n    recaptchaV2Script: '',\r\n    recaptchaEnterpriseScript: '',\r\n    gapiScript: ''\r\n};\r\nfunction _setExternalJSProvider(p) {\r\n    externalJSProvider = p;\r\n}\r\nfunction _loadJS(url) {\r\n    return externalJSProvider.loadJS(url);\r\n}\r\nfunction _recaptchaV2ScriptUrl() {\r\n    return externalJSProvider.recaptchaV2Script;\r\n}\r\nfunction _recaptchaEnterpriseScriptUrl() {\r\n    return externalJSProvider.recaptchaEnterpriseScript;\r\n}\r\nfunction _gapiScriptUrl() {\r\n    return externalJSProvider.gapiScript;\r\n}\r\nfunction _generateCallbackName(prefix) {\r\n    return `__${prefix}${Math.floor(Math.random() * 1000000)}`;\r\n}\n\n/* eslint-disable @typescript-eslint/no-require-imports */\r\nconst RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = 'recaptcha-enterprise';\r\nconst FAKE_TOKEN = 'NO_RECAPTCHA';\r\nclass RecaptchaEnterpriseVerifier {\r\n    /**\r\n     *\r\n     * @param authExtern - The corresponding Firebase {@link Auth} instance.\r\n     *\r\n     */\r\n    constructor(authExtern) {\r\n        /**\r\n         * Identifies the type of application verifier (e.g. \"recaptcha-enterprise\").\r\n         */\r\n        this.type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;\r\n        this.auth = _castAuth(authExtern);\r\n    }\r\n    /**\r\n     * Executes the verification process.\r\n     *\r\n     * @returns A Promise for a token that can be used to assert the validity of a request.\r\n     */\r\n    async verify(action = 'verify', forceRefresh = false) {\r\n        async function retrieveSiteKey(auth) {\r\n            if (!forceRefresh) {\r\n                if (auth.tenantId == null && auth._agentRecaptchaConfig != null) {\r\n                    return auth._agentRecaptchaConfig.siteKey;\r\n                }\r\n                if (auth.tenantId != null &&\r\n                    auth._tenantRecaptchaConfigs[auth.tenantId] !== undefined) {\r\n                    return auth._tenantRecaptchaConfigs[auth.tenantId].siteKey;\r\n                }\r\n            }\r\n            return new Promise(async (resolve, reject) => {\r\n                getRecaptchaConfig(auth, {\r\n                    clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\r\n                    version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\r\n                })\r\n                    .then(response => {\r\n                    if (response.recaptchaKey === undefined) {\r\n                        reject(new Error('recaptcha Enterprise site key undefined'));\r\n                    }\r\n                    else {\r\n                        const config = new RecaptchaConfig(response);\r\n                        if (auth.tenantId == null) {\r\n                            auth._agentRecaptchaConfig = config;\r\n                        }\r\n                        else {\r\n                            auth._tenantRecaptchaConfigs[auth.tenantId] = config;\r\n                        }\r\n                        return resolve(config.siteKey);\r\n                    }\r\n                })\r\n                    .catch(error => {\r\n                    reject(error);\r\n                });\r\n            });\r\n        }\r\n        function retrieveRecaptchaToken(siteKey, resolve, reject) {\r\n            const grecaptcha = window.grecaptcha;\r\n            if (isEnterprise(grecaptcha)) {\r\n                grecaptcha.enterprise.ready(() => {\r\n                    grecaptcha.enterprise\r\n                        .execute(siteKey, { action })\r\n                        .then(token => {\r\n                        resolve(token);\r\n                    })\r\n                        .catch(() => {\r\n                        resolve(FAKE_TOKEN);\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                reject(Error('No reCAPTCHA enterprise script loaded.'));\r\n            }\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            retrieveSiteKey(this.auth)\r\n                .then(siteKey => {\r\n                if (!forceRefresh && isEnterprise(window.grecaptcha)) {\r\n                    retrieveRecaptchaToken(siteKey, resolve, reject);\r\n                }\r\n                else {\r\n                    if (typeof window === 'undefined') {\r\n                        reject(new Error('RecaptchaVerifier is only supported in browser'));\r\n                        return;\r\n                    }\r\n                    let url = _recaptchaEnterpriseScriptUrl();\r\n                    if (url.length !== 0) {\r\n                        url += siteKey;\r\n                    }\r\n                    _loadJS(url)\r\n                        .then(() => {\r\n                        retrieveRecaptchaToken(siteKey, resolve, reject);\r\n                    })\r\n                        .catch(error => {\r\n                        reject(error);\r\n                    });\r\n                }\r\n            })\r\n                .catch(error => {\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n}\r\nasync function injectRecaptchaFields(auth, request, action, captchaResp = false) {\r\n    const verifier = new RecaptchaEnterpriseVerifier(auth);\r\n    let captchaResponse;\r\n    try {\r\n        captchaResponse = await verifier.verify(action);\r\n    }\r\n    catch (error) {\r\n        captchaResponse = await verifier.verify(action, true);\r\n    }\r\n    const newRequest = Object.assign({}, request);\r\n    if (!captchaResp) {\r\n        Object.assign(newRequest, { captchaResponse });\r\n    }\r\n    else {\r\n        Object.assign(newRequest, { 'captchaResp': captchaResponse });\r\n    }\r\n    Object.assign(newRequest, { 'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */ });\r\n    Object.assign(newRequest, {\r\n        'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\r\n    });\r\n    return newRequest;\r\n}\r\nasync function handleRecaptchaFlow(authInstance, request, actionName, actionMethod) {\r\n    var _a;\r\n    if ((_a = authInstance\r\n        ._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.isProviderEnabled(\"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaProvider.EMAIL_PASSWORD_PROVIDER */)) {\r\n        const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName, actionName === \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */);\r\n        return actionMethod(authInstance, requestWithRecaptcha);\r\n    }\r\n    else {\r\n        return actionMethod(authInstance, request).catch(async (error) => {\r\n            if (error.code === `auth/${\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}`) {\r\n                console.log(`${actionName} is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.`);\r\n                const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName, actionName === \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */);\r\n                return actionMethod(authInstance, requestWithRecaptcha);\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n}\r\nasync function _initializeRecaptchaConfig(auth) {\r\n    const authInternal = _castAuth(auth);\r\n    const response = await getRecaptchaConfig(authInternal, {\r\n        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\r\n        version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\r\n    });\r\n    const config = new RecaptchaConfig(response);\r\n    if (authInternal.tenantId == null) {\r\n        authInternal._agentRecaptchaConfig = config;\r\n    }\r\n    else {\r\n        authInternal._tenantRecaptchaConfigs[authInternal.tenantId] = config;\r\n    }\r\n    if (config.isProviderEnabled(\"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaProvider.EMAIL_PASSWORD_PROVIDER */)) {\r\n        const verifier = new RecaptchaEnterpriseVerifier(authInternal);\r\n        void verifier.verify();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Initializes an {@link Auth} instance with fine-grained control over\r\n * {@link Dependencies}.\r\n *\r\n * @remarks\r\n *\r\n * This function allows more control over the {@link Auth} instance than\r\n * {@link getAuth}. `getAuth` uses platform-specific defaults to supply\r\n * the {@link Dependencies}. In general, `getAuth` is the easiest way to\r\n * initialize Auth and works for most use cases. Use `initializeAuth` if you\r\n * need control over which persistence layer is used, or to minimize bundle\r\n * size if you're not using either `signInWithPopup` or `signInWithRedirect`.\r\n *\r\n * For example, if your app only uses anonymous accounts and you only want\r\n * accounts saved for the current session, initialize `Auth` with:\r\n *\r\n * ```js\r\n * const auth = initializeAuth(app, {\r\n *   persistence: browserSessionPersistence,\r\n *   popupRedirectResolver: undefined,\r\n * });\r\n * ```\r\n *\r\n * @public\r\n */\r\nfunction initializeAuth(app$1, deps) {\r\n    const provider = app._getProvider(app$1, 'auth');\r\n    if (provider.isInitialized()) {\r\n        const auth = provider.getImmediate();\r\n        const initialOptions = provider.getOptions();\r\n        if (util.deepEqual(initialOptions, deps !== null && deps !== void 0 ? deps : {})) {\r\n            return auth;\r\n        }\r\n        else {\r\n            _fail(auth, \"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */);\r\n        }\r\n    }\r\n    const auth = provider.initialize({ options: deps });\r\n    return auth;\r\n}\r\nfunction _initializeAuthInstance(auth, deps) {\r\n    const persistence = (deps === null || deps === void 0 ? void 0 : deps.persistence) || [];\r\n    const hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);\r\n    if (deps === null || deps === void 0 ? void 0 : deps.errorMap) {\r\n        auth._updateErrorMap(deps.errorMap);\r\n    }\r\n    // This promise is intended to float; auth initialization happens in the\r\n    // background, meanwhile the auth object may be used by the app.\r\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n    auth._initializeWithPersistence(hierarchy, deps === null || deps === void 0 ? void 0 : deps.popupRedirectResolver);\r\n}\n\n/**\r\n * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production\r\n * Firebase Auth services.\r\n *\r\n * @remarks\r\n * This must be called synchronously immediately following the first call to\r\n * {@link initializeAuth}.  Do not use with production credentials as emulator\r\n * traffic is not encrypted.\r\n *\r\n *\r\n * @example\r\n * ```javascript\r\n * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').\r\n * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to\r\n * `true` to disable the warning banner attached to the DOM.\r\n *\r\n * @public\r\n */\r\nfunction connectAuthEmulator(auth, url, options) {\r\n    const authInternal = _castAuth(auth);\r\n    _assert(authInternal._canInitEmulator, authInternal, \"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */);\r\n    _assert(/^https?:\\/\\//.test(url), authInternal, \"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */);\r\n    const disableWarnings = !!(options === null || options === void 0 ? void 0 : options.disableWarnings);\r\n    const protocol = extractProtocol(url);\r\n    const { host, port } = extractHostAndPort(url);\r\n    const portStr = port === null ? '' : `:${port}`;\r\n    // Always replace path with \"/\" (even if input url had no path at all, or had a different one).\r\n    authInternal.config.emulator = { url: `${protocol}//${host}${portStr}/` };\r\n    authInternal.settings.appVerificationDisabledForTesting = true;\r\n    authInternal.emulatorConfig = Object.freeze({\r\n        host,\r\n        port,\r\n        protocol: protocol.replace(':', ''),\r\n        options: Object.freeze({ disableWarnings })\r\n    });\r\n    if (!disableWarnings) {\r\n        emitEmulatorWarning();\r\n    }\r\n}\r\nfunction extractProtocol(url) {\r\n    const protocolEnd = url.indexOf(':');\r\n    return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);\r\n}\r\nfunction extractHostAndPort(url) {\r\n    const protocol = extractProtocol(url);\r\n    const authority = /(\\/\\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.\r\n    if (!authority) {\r\n        return { host: '', port: null };\r\n    }\r\n    const hostAndPort = authority[2].split('@').pop() || ''; // Strip out \"username:password@\".\r\n    const bracketedIPv6 = /^(\\[[^\\]]+\\])(:|$)/.exec(hostAndPort);\r\n    if (bracketedIPv6) {\r\n        const host = bracketedIPv6[1];\r\n        return { host, port: parsePort(hostAndPort.substr(host.length + 1)) };\r\n    }\r\n    else {\r\n        const [host, port] = hostAndPort.split(':');\r\n        return { host, port: parsePort(port) };\r\n    }\r\n}\r\nfunction parsePort(portStr) {\r\n    if (!portStr) {\r\n        return null;\r\n    }\r\n    const port = Number(portStr);\r\n    if (isNaN(port)) {\r\n        return null;\r\n    }\r\n    return port;\r\n}\r\nfunction emitEmulatorWarning() {\r\n    function attachBanner() {\r\n        const el = document.createElement('p');\r\n        const sty = el.style;\r\n        el.innerText =\r\n            'Running in emulator mode. Do not use with production credentials.';\r\n        sty.position = 'fixed';\r\n        sty.width = '100%';\r\n        sty.backgroundColor = '#ffffff';\r\n        sty.border = '.1em solid #000000';\r\n        sty.color = '#b50000';\r\n        sty.bottom = '0px';\r\n        sty.left = '0px';\r\n        sty.margin = '0px';\r\n        sty.zIndex = '10000';\r\n        sty.textAlign = 'center';\r\n        el.classList.add('firebase-emulator-warning');\r\n        document.body.appendChild(el);\r\n    }\r\n    if (typeof console !== 'undefined' && typeof console.info === 'function') {\r\n        console.info('WARNING: You are using the Auth Emulator,' +\r\n            ' which is intended for local testing only.  Do not use with' +\r\n            ' production credentials.');\r\n    }\r\n    if (typeof window !== 'undefined' && typeof document !== 'undefined') {\r\n        if (document.readyState === 'loading') {\r\n            window.addEventListener('DOMContentLoaded', attachBanner);\r\n        }\r\n        else {\r\n            attachBanner();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface that represents the credentials returned by an {@link AuthProvider}.\r\n *\r\n * @remarks\r\n * Implementations specify the details about each auth provider's credential requirements.\r\n *\r\n * @public\r\n */\r\nclass AuthCredential {\r\n    /** @internal */\r\n    constructor(\r\n    /**\r\n     * The authentication provider ID for the credential.\r\n     *\r\n     * @remarks\r\n     * For example, 'facebook.com', or 'google.com'.\r\n     */\r\n    providerId, \r\n    /**\r\n     * The authentication sign in method for the credential.\r\n     *\r\n     * @remarks\r\n     * For example, {@link SignInMethod}.EMAIL_PASSWORD, or\r\n     * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method\r\n     * identifier as returned in {@link fetchSignInMethodsForEmail}.\r\n     */\r\n    signInMethod) {\r\n        this.providerId = providerId;\r\n        this.signInMethod = signInMethod;\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     *\r\n     * @returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON() {\r\n        return debugFail('not implemented');\r\n    }\r\n    /** @internal */\r\n    _getIdTokenResponse(_auth) {\r\n        return debugFail('not implemented');\r\n    }\r\n    /** @internal */\r\n    _linkToIdToken(_auth, _idToken) {\r\n        return debugFail('not implemented');\r\n    }\r\n    /** @internal */\r\n    _getReauthenticationResolver(_auth) {\r\n        return debugFail('not implemented');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function resetPassword(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:resetPassword\" /* Endpoint.RESET_PASSWORD */, _addTidIfNecessary(auth, request));\r\n}\r\nasync function updateEmailPassword(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\r\n}\r\n// Used for linking an email/password account to an existing idToken. Uses the same request/response\r\n// format as updateEmailPassword.\r\nasync function linkEmailPassword(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signUp\" /* Endpoint.SIGN_UP */, request);\r\n}\r\nasync function applyActionCode$1(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, _addTidIfNecessary(auth, request));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function signInWithPassword(auth, request) {\r\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPassword\" /* Endpoint.SIGN_IN_WITH_PASSWORD */, _addTidIfNecessary(auth, request));\r\n}\r\nasync function sendOobCode(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:sendOobCode\" /* Endpoint.SEND_OOB_CODE */, _addTidIfNecessary(auth, request));\r\n}\r\nasync function sendEmailVerification$1(auth, request) {\r\n    return sendOobCode(auth, request);\r\n}\r\nasync function sendPasswordResetEmail$1(auth, request) {\r\n    return sendOobCode(auth, request);\r\n}\r\nasync function sendSignInLinkToEmail$1(auth, request) {\r\n    return sendOobCode(auth, request);\r\n}\r\nasync function verifyAndChangeEmail(auth, request) {\r\n    return sendOobCode(auth, request);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function signInWithEmailLink$1(auth, request) {\r\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));\r\n}\r\nasync function signInWithEmailLinkForLinking(auth, request) {\r\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface that represents the credentials returned by {@link EmailAuthProvider} for\r\n * {@link ProviderId}.PASSWORD\r\n *\r\n * @remarks\r\n * Covers both {@link SignInMethod}.EMAIL_PASSWORD and\r\n * {@link SignInMethod}.EMAIL_LINK.\r\n *\r\n * @public\r\n */\r\nclass EmailAuthCredential extends AuthCredential {\r\n    /** @internal */\r\n    constructor(\r\n    /** @internal */\r\n    _email, \r\n    /** @internal */\r\n    _password, signInMethod, \r\n    /** @internal */\r\n    _tenantId = null) {\r\n        super(\"password\" /* ProviderId.PASSWORD */, signInMethod);\r\n        this._email = _email;\r\n        this._password = _password;\r\n        this._tenantId = _tenantId;\r\n    }\r\n    /** @internal */\r\n    static _fromEmailAndPassword(email, password) {\r\n        return new EmailAuthCredential(email, password, \"password\" /* SignInMethod.EMAIL_PASSWORD */);\r\n    }\r\n    /** @internal */\r\n    static _fromEmailAndCode(email, oobCode, tenantId = null) {\r\n        return new EmailAuthCredential(email, oobCode, \"emailLink\" /* SignInMethod.EMAIL_LINK */, tenantId);\r\n    }\r\n    /** {@inheritdoc AuthCredential.toJSON} */\r\n    toJSON() {\r\n        return {\r\n            email: this._email,\r\n            password: this._password,\r\n            signInMethod: this.signInMethod,\r\n            tenantId: this._tenantId\r\n        };\r\n    }\r\n    /**\r\n     * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.\r\n     *\r\n     * @param json - Either `object` or the stringified representation of the object. When string is\r\n     * provided, `JSON.parse` would be called first.\r\n     *\r\n     * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.\r\n     */\r\n    static fromJSON(json) {\r\n        const obj = typeof json === 'string' ? JSON.parse(json) : json;\r\n        if ((obj === null || obj === void 0 ? void 0 : obj.email) && (obj === null || obj === void 0 ? void 0 : obj.password)) {\r\n            if (obj.signInMethod === \"password\" /* SignInMethod.EMAIL_PASSWORD */) {\r\n                return this._fromEmailAndPassword(obj.email, obj.password);\r\n            }\r\n            else if (obj.signInMethod === \"emailLink\" /* SignInMethod.EMAIL_LINK */) {\r\n                return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /** @internal */\r\n    async _getIdTokenResponse(auth) {\r\n        switch (this.signInMethod) {\r\n            case \"password\" /* SignInMethod.EMAIL_PASSWORD */:\r\n                const request = {\r\n                    returnSecureToken: true,\r\n                    email: this._email,\r\n                    password: this._password,\r\n                    clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\r\n                };\r\n                return handleRecaptchaFlow(auth, request, \"signInWithPassword\" /* RecaptchaActionName.SIGN_IN_WITH_PASSWORD */, signInWithPassword);\r\n            case \"emailLink\" /* SignInMethod.EMAIL_LINK */:\r\n                return signInWithEmailLink$1(auth, {\r\n                    email: this._email,\r\n                    oobCode: this._password\r\n                });\r\n            default:\r\n                _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        }\r\n    }\r\n    /** @internal */\r\n    async _linkToIdToken(auth, idToken) {\r\n        switch (this.signInMethod) {\r\n            case \"password\" /* SignInMethod.EMAIL_PASSWORD */:\r\n                const request = {\r\n                    idToken,\r\n                    returnSecureToken: true,\r\n                    email: this._email,\r\n                    password: this._password,\r\n                    clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\r\n                };\r\n                return handleRecaptchaFlow(auth, request, \"signUpPassword\" /* RecaptchaActionName.SIGN_UP_PASSWORD */, linkEmailPassword);\r\n            case \"emailLink\" /* SignInMethod.EMAIL_LINK */:\r\n                return signInWithEmailLinkForLinking(auth, {\r\n                    idToken,\r\n                    email: this._email,\r\n                    oobCode: this._password\r\n                });\r\n            default:\r\n                _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        }\r\n    }\r\n    /** @internal */\r\n    _getReauthenticationResolver(auth) {\r\n        return this._getIdTokenResponse(auth);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function signInWithIdp(auth, request) {\r\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithIdp\" /* Endpoint.SIGN_IN_WITH_IDP */, _addTidIfNecessary(auth, request));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst IDP_REQUEST_URI$1 = 'http://localhost';\r\n/**\r\n * Represents the OAuth credentials returned by an {@link OAuthProvider}.\r\n *\r\n * @remarks\r\n * Implementations specify the details about each auth provider's credential requirements.\r\n *\r\n * @public\r\n */\r\nclass OAuthCredential extends AuthCredential {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.pendingToken = null;\r\n    }\r\n    /** @internal */\r\n    static _fromParams(params) {\r\n        const cred = new OAuthCredential(params.providerId, params.signInMethod);\r\n        if (params.idToken || params.accessToken) {\r\n            // OAuth 2 and either ID token or access token.\r\n            if (params.idToken) {\r\n                cred.idToken = params.idToken;\r\n            }\r\n            if (params.accessToken) {\r\n                cred.accessToken = params.accessToken;\r\n            }\r\n            // Add nonce if available and no pendingToken is present.\r\n            if (params.nonce && !params.pendingToken) {\r\n                cred.nonce = params.nonce;\r\n            }\r\n            if (params.pendingToken) {\r\n                cred.pendingToken = params.pendingToken;\r\n            }\r\n        }\r\n        else if (params.oauthToken && params.oauthTokenSecret) {\r\n            // OAuth 1 and OAuth token with token secret\r\n            cred.accessToken = params.oauthToken;\r\n            cred.secret = params.oauthTokenSecret;\r\n        }\r\n        else {\r\n            _fail(\"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        }\r\n        return cred;\r\n    }\r\n    /** {@inheritdoc AuthCredential.toJSON}  */\r\n    toJSON() {\r\n        return {\r\n            idToken: this.idToken,\r\n            accessToken: this.accessToken,\r\n            secret: this.secret,\r\n            nonce: this.nonce,\r\n            pendingToken: this.pendingToken,\r\n            providerId: this.providerId,\r\n            signInMethod: this.signInMethod\r\n        };\r\n    }\r\n    /**\r\n     * Static method to deserialize a JSON representation of an object into an\r\n     * {@link  AuthCredential}.\r\n     *\r\n     * @param json - Input can be either Object or the stringified representation of the object.\r\n     * When string is provided, JSON.parse would be called first.\r\n     *\r\n     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\r\n     */\r\n    static fromJSON(json) {\r\n        const obj = typeof json === 'string' ? JSON.parse(json) : json;\r\n        const { providerId, signInMethod } = obj, rest = tslib.__rest(obj, [\"providerId\", \"signInMethod\"]);\r\n        if (!providerId || !signInMethod) {\r\n            return null;\r\n        }\r\n        const cred = new OAuthCredential(providerId, signInMethod);\r\n        cred.idToken = rest.idToken || undefined;\r\n        cred.accessToken = rest.accessToken || undefined;\r\n        cred.secret = rest.secret;\r\n        cred.nonce = rest.nonce;\r\n        cred.pendingToken = rest.pendingToken || null;\r\n        return cred;\r\n    }\r\n    /** @internal */\r\n    _getIdTokenResponse(auth) {\r\n        const request = this.buildRequest();\r\n        return signInWithIdp(auth, request);\r\n    }\r\n    /** @internal */\r\n    _linkToIdToken(auth, idToken) {\r\n        const request = this.buildRequest();\r\n        request.idToken = idToken;\r\n        return signInWithIdp(auth, request);\r\n    }\r\n    /** @internal */\r\n    _getReauthenticationResolver(auth) {\r\n        const request = this.buildRequest();\r\n        request.autoCreate = false;\r\n        return signInWithIdp(auth, request);\r\n    }\r\n    buildRequest() {\r\n        const request = {\r\n            requestUri: IDP_REQUEST_URI$1,\r\n            returnSecureToken: true\r\n        };\r\n        if (this.pendingToken) {\r\n            request.pendingToken = this.pendingToken;\r\n        }\r\n        else {\r\n            const postBody = {};\r\n            if (this.idToken) {\r\n                postBody['id_token'] = this.idToken;\r\n            }\r\n            if (this.accessToken) {\r\n                postBody['access_token'] = this.accessToken;\r\n            }\r\n            if (this.secret) {\r\n                postBody['oauth_token_secret'] = this.secret;\r\n            }\r\n            postBody['providerId'] = this.providerId;\r\n            if (this.nonce && !this.pendingToken) {\r\n                postBody['nonce'] = this.nonce;\r\n            }\r\n            request.postBody = util.querystring(postBody);\r\n        }\r\n        return request;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function sendPhoneVerificationCode(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:sendVerificationCode\" /* Endpoint.SEND_VERIFICATION_CODE */, _addTidIfNecessary(auth, request));\r\n}\r\nasync function signInWithPhoneNumber$1(auth, request) {\r\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));\r\n}\r\nasync function linkWithPhoneNumber$1(auth, request) {\r\n    const response = await _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));\r\n    if (response.temporaryProof) {\r\n        throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, response);\r\n    }\r\n    return response;\r\n}\r\nconst VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = {\r\n    [\"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */]: \"user-not-found\" /* AuthErrorCode.USER_DELETED */\r\n};\r\nasync function verifyPhoneNumberForExisting(auth, request) {\r\n    const apiRequest = Object.assign(Object.assign({}, request), { operation: 'REAUTH' });\r\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, apiRequest), VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents the credentials returned by {@link PhoneAuthProvider}.\r\n *\r\n * @public\r\n */\r\nclass PhoneAuthCredential extends AuthCredential {\r\n    constructor(params) {\r\n        super(\"phone\" /* ProviderId.PHONE */, \"phone\" /* SignInMethod.PHONE */);\r\n        this.params = params;\r\n    }\r\n    /** @internal */\r\n    static _fromVerification(verificationId, verificationCode) {\r\n        return new PhoneAuthCredential({ verificationId, verificationCode });\r\n    }\r\n    /** @internal */\r\n    static _fromTokenResponse(phoneNumber, temporaryProof) {\r\n        return new PhoneAuthCredential({ phoneNumber, temporaryProof });\r\n    }\r\n    /** @internal */\r\n    _getIdTokenResponse(auth) {\r\n        return signInWithPhoneNumber$1(auth, this._makeVerificationRequest());\r\n    }\r\n    /** @internal */\r\n    _linkToIdToken(auth, idToken) {\r\n        return linkWithPhoneNumber$1(auth, Object.assign({ idToken }, this._makeVerificationRequest()));\r\n    }\r\n    /** @internal */\r\n    _getReauthenticationResolver(auth) {\r\n        return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());\r\n    }\r\n    /** @internal */\r\n    _makeVerificationRequest() {\r\n        const { temporaryProof, phoneNumber, verificationId, verificationCode } = this.params;\r\n        if (temporaryProof && phoneNumber) {\r\n            return { temporaryProof, phoneNumber };\r\n        }\r\n        return {\r\n            sessionInfo: verificationId,\r\n            code: verificationCode\r\n        };\r\n    }\r\n    /** {@inheritdoc AuthCredential.toJSON} */\r\n    toJSON() {\r\n        const obj = {\r\n            providerId: this.providerId\r\n        };\r\n        if (this.params.phoneNumber) {\r\n            obj.phoneNumber = this.params.phoneNumber;\r\n        }\r\n        if (this.params.temporaryProof) {\r\n            obj.temporaryProof = this.params.temporaryProof;\r\n        }\r\n        if (this.params.verificationCode) {\r\n            obj.verificationCode = this.params.verificationCode;\r\n        }\r\n        if (this.params.verificationId) {\r\n            obj.verificationId = this.params.verificationId;\r\n        }\r\n        return obj;\r\n    }\r\n    /** Generates a phone credential based on a plain object or a JSON string. */\r\n    static fromJSON(json) {\r\n        if (typeof json === 'string') {\r\n            json = JSON.parse(json);\r\n        }\r\n        const { verificationId, verificationCode, phoneNumber, temporaryProof } = json;\r\n        if (!verificationCode &&\r\n            !verificationId &&\r\n            !phoneNumber &&\r\n            !temporaryProof) {\r\n            return null;\r\n        }\r\n        return new PhoneAuthCredential({\r\n            verificationId,\r\n            verificationCode,\r\n            phoneNumber,\r\n            temporaryProof\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Maps the mode string in action code URL to Action Code Info operation.\r\n *\r\n * @param mode\r\n */\r\nfunction parseMode(mode) {\r\n    switch (mode) {\r\n        case 'recoverEmail':\r\n            return \"RECOVER_EMAIL\" /* ActionCodeOperation.RECOVER_EMAIL */;\r\n        case 'resetPassword':\r\n            return \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */;\r\n        case 'signIn':\r\n            return \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */;\r\n        case 'verifyEmail':\r\n            return \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */;\r\n        case 'verifyAndChangeEmail':\r\n            return \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */;\r\n        case 'revertSecondFactorAddition':\r\n            return \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n/**\r\n * Helper to parse FDL links\r\n *\r\n * @param url\r\n */\r\nfunction parseDeepLink(url) {\r\n    const link = util.querystringDecode(util.extractQuerystring(url))['link'];\r\n    // Double link case (automatic redirect).\r\n    const doubleDeepLink = link\r\n        ? util.querystringDecode(util.extractQuerystring(link))['deep_link_id']\r\n        : null;\r\n    // iOS custom scheme links.\r\n    const iOSDeepLink = util.querystringDecode(util.extractQuerystring(url))['deep_link_id'];\r\n    const iOSDoubleDeepLink = iOSDeepLink\r\n        ? util.querystringDecode(util.extractQuerystring(iOSDeepLink))['link']\r\n        : null;\r\n    return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\r\n}\r\n/**\r\n * A utility class to parse email action URLs such as password reset, email verification,\r\n * email link sign in, etc.\r\n *\r\n * @public\r\n */\r\nclass ActionCodeURL {\r\n    /**\r\n     * @param actionLink - The link from which to extract the URL.\r\n     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\r\n     *\r\n     * @internal\r\n     */\r\n    constructor(actionLink) {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        const searchParams = util.querystringDecode(util.extractQuerystring(actionLink));\r\n        const apiKey = (_a = searchParams[\"apiKey\" /* QueryField.API_KEY */]) !== null && _a !== void 0 ? _a : null;\r\n        const code = (_b = searchParams[\"oobCode\" /* QueryField.CODE */]) !== null && _b !== void 0 ? _b : null;\r\n        const operation = parseMode((_c = searchParams[\"mode\" /* QueryField.MODE */]) !== null && _c !== void 0 ? _c : null);\r\n        // Validate API key, code and mode.\r\n        _assert(apiKey && code && operation, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        this.apiKey = apiKey;\r\n        this.operation = operation;\r\n        this.code = code;\r\n        this.continueUrl = (_d = searchParams[\"continueUrl\" /* QueryField.CONTINUE_URL */]) !== null && _d !== void 0 ? _d : null;\r\n        this.languageCode = (_e = searchParams[\"languageCode\" /* QueryField.LANGUAGE_CODE */]) !== null && _e !== void 0 ? _e : null;\r\n        this.tenantId = (_f = searchParams[\"tenantId\" /* QueryField.TENANT_ID */]) !== null && _f !== void 0 ? _f : null;\r\n    }\r\n    /**\r\n     * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,\r\n     * otherwise returns null.\r\n     *\r\n     * @param link  - The email action link string.\r\n     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\r\n     *\r\n     * @public\r\n     */\r\n    static parseLink(link) {\r\n        const actionLink = parseDeepLink(link);\r\n        try {\r\n            return new ActionCodeURL(actionLink);\r\n        }\r\n        catch (_a) {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Parses the email action link string and returns an {@link ActionCodeURL} if\r\n * the link is valid, otherwise returns null.\r\n *\r\n * @public\r\n */\r\nfunction parseActionCodeURL(link) {\r\n    return ActionCodeURL.parseLink(link);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for generating {@link EmailAuthCredential}.\r\n *\r\n * @public\r\n */\r\nclass EmailAuthProvider {\r\n    constructor() {\r\n        /**\r\n         * Always set to {@link ProviderId}.PASSWORD, even for email link.\r\n         */\r\n        this.providerId = EmailAuthProvider.PROVIDER_ID;\r\n    }\r\n    /**\r\n     * Initialize an {@link AuthCredential} using an email and password.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * const authCredential = EmailAuthProvider.credential(email, password);\r\n     * const userCredential = await signInWithCredential(auth, authCredential);\r\n     * ```\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n     * ```\r\n     *\r\n     * @param email - Email address.\r\n     * @param password - User account password.\r\n     * @returns The auth provider credential.\r\n     */\r\n    static credential(email, password) {\r\n        return EmailAuthCredential._fromEmailAndPassword(email, password);\r\n    }\r\n    /**\r\n     * Initialize an {@link AuthCredential} using an email and an email link after a sign in with\r\n     * email link operation.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);\r\n     * const userCredential = await signInWithCredential(auth, authCredential);\r\n     * ```\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * await sendSignInLinkToEmail(auth, email);\r\n     * // Obtain emailLink from user.\r\n     * const userCredential = await signInWithEmailLink(auth, email, emailLink);\r\n     * ```\r\n     *\r\n     * @param auth - The {@link Auth} instance used to verify the link.\r\n     * @param email - Email address.\r\n     * @param emailLink - Sign-in email link.\r\n     * @returns - The auth provider credential.\r\n     */\r\n    static credentialWithLink(email, emailLink) {\r\n        const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\r\n        _assert(actionCodeUrl, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);\r\n    }\r\n}\r\n/**\r\n * Always set to {@link ProviderId}.PASSWORD, even for email link.\r\n */\r\nEmailAuthProvider.PROVIDER_ID = \"password\" /* ProviderId.PASSWORD */;\r\n/**\r\n * Always set to {@link SignInMethod}.EMAIL_PASSWORD.\r\n */\r\nEmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = \"password\" /* SignInMethod.EMAIL_PASSWORD */;\r\n/**\r\n * Always set to {@link SignInMethod}.EMAIL_LINK.\r\n */\r\nEmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = \"emailLink\" /* SignInMethod.EMAIL_LINK */;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The base class for all Federated providers (OAuth (including OIDC), SAML).\r\n *\r\n * This class is not meant to be instantiated directly.\r\n *\r\n * @public\r\n */\r\nclass FederatedAuthProvider {\r\n    /**\r\n     * Constructor for generic OAuth providers.\r\n     *\r\n     * @param providerId - Provider for which credentials should be generated.\r\n     */\r\n    constructor(providerId) {\r\n        this.providerId = providerId;\r\n        /** @internal */\r\n        this.defaultLanguageCode = null;\r\n        /** @internal */\r\n        this.customParameters = {};\r\n    }\r\n    /**\r\n     * Set the language gode.\r\n     *\r\n     * @param languageCode - language code\r\n     */\r\n    setDefaultLanguage(languageCode) {\r\n        this.defaultLanguageCode = languageCode;\r\n    }\r\n    /**\r\n     * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in\r\n     * operations.\r\n     *\r\n     * @remarks\r\n     * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,\r\n     * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.\r\n     *\r\n     * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.\r\n     */\r\n    setCustomParameters(customOAuthParameters) {\r\n        this.customParameters = customOAuthParameters;\r\n        return this;\r\n    }\r\n    /**\r\n     * Retrieve the current list of {@link CustomParameters}.\r\n     */\r\n    getCustomParameters() {\r\n        return this.customParameters;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Common code to all OAuth providers. This is separate from the\r\n * {@link OAuthProvider} so that child providers (like\r\n * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.\r\n * Instead, they rely on a static `credential` method.\r\n */\r\nclass BaseOAuthProvider extends FederatedAuthProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** @internal */\r\n        this.scopes = [];\r\n    }\r\n    /**\r\n     * Add an OAuth scope to the credential.\r\n     *\r\n     * @param scope - Provider OAuth scope to add.\r\n     */\r\n    addScope(scope) {\r\n        // If not already added, add scope to list.\r\n        if (!this.scopes.includes(scope)) {\r\n            this.scopes.push(scope);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Retrieve the current list of OAuth scopes.\r\n     */\r\n    getScopes() {\r\n        return [...this.scopes];\r\n    }\r\n}\r\n/**\r\n * Provider for generating generic {@link OAuthCredential}.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new OAuthProvider('google.com');\r\n * // Start a sign in process for an unauthenticated user.\r\n * provider.addScope('profile');\r\n * provider.addScope('email');\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a OAuth Access Token for the provider.\r\n *   const credential = provider.credentialFromResult(auth, result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new OAuthProvider('google.com');\r\n * provider.addScope('profile');\r\n * provider.addScope('email');\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a OAuth Access Token for the provider.\r\n * const credential = provider.credentialFromResult(auth, result);\r\n * const token = credential.accessToken;\r\n * ```\r\n * @public\r\n */\r\nclass OAuthProvider extends BaseOAuthProvider {\r\n    /**\r\n     * Creates an {@link OAuthCredential} from a JSON string or a plain object.\r\n     * @param json - A plain object or a JSON string\r\n     */\r\n    static credentialFromJSON(json) {\r\n        const obj = typeof json === 'string' ? JSON.parse(json) : json;\r\n        _assert('providerId' in obj && 'signInMethod' in obj, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        return OAuthCredential._fromParams(obj);\r\n    }\r\n    /**\r\n     * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.\r\n     *\r\n     * @remarks\r\n     * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of\r\n     * the raw nonce must match the nonce field in the ID token.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * // `googleUser` from the onsuccess Google Sign In callback.\r\n     * // Initialize a generate OAuth provider with a `google.com` providerId.\r\n     * const provider = new OAuthProvider('google.com');\r\n     * const credential = provider.credential({\r\n     *   idToken: googleUser.getAuthResponse().id_token,\r\n     * });\r\n     * const result = await signInWithCredential(credential);\r\n     * ```\r\n     *\r\n     * @param params - Either the options object containing the ID token, access token and raw nonce\r\n     * or the ID token string.\r\n     */\r\n    credential(params) {\r\n        return this._credential(Object.assign(Object.assign({}, params), { nonce: params.rawNonce }));\r\n    }\r\n    /** An internal credential method that accepts more permissive options */\r\n    _credential(params) {\r\n        _assert(params.idToken || params.accessToken, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        // For OAuthCredential, sign in method is same as providerId.\r\n        return OAuthCredential._fromParams(Object.assign(Object.assign({}, params), { providerId: this.providerId, signInMethod: this.providerId }));\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromResult(userCredential) {\r\n        return OAuthProvider.oauthCredentialFromTaggedObject(userCredential);\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromError(error) {\r\n        return OAuthProvider.oauthCredentialFromTaggedObject((error.customData || {}));\r\n    }\r\n    static oauthCredentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\r\n        if (!tokenResponse) {\r\n            return null;\r\n        }\r\n        const { oauthIdToken, oauthAccessToken, oauthTokenSecret, pendingToken, nonce, providerId } = tokenResponse;\r\n        if (!oauthAccessToken &&\r\n            !oauthTokenSecret &&\r\n            !oauthIdToken &&\r\n            !pendingToken) {\r\n            return null;\r\n        }\r\n        if (!providerId) {\r\n            return null;\r\n        }\r\n        try {\r\n            return new OAuthProvider(providerId)._credential({\r\n                idToken: oauthIdToken,\r\n                accessToken: oauthAccessToken,\r\n                nonce,\r\n                pendingToken\r\n            });\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new FacebookAuthProvider();\r\n * // Start a sign in process for an unauthenticated user.\r\n * provider.addScope('user_birthday');\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Facebook Access Token.\r\n *   const credential = FacebookAuthProvider.credentialFromResult(result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new FacebookAuthProvider();\r\n * provider.addScope('user_birthday');\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Facebook Access Token.\r\n * const credential = FacebookAuthProvider.credentialFromResult(result);\r\n * const token = credential.accessToken;\r\n * ```\r\n *\r\n * @public\r\n */\r\nclass FacebookAuthProvider extends BaseOAuthProvider {\r\n    constructor() {\r\n        super(\"facebook.com\" /* ProviderId.FACEBOOK */);\r\n    }\r\n    /**\r\n     * Creates a credential for Facebook.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * // `event` from the Facebook auth.authResponseChange callback.\r\n     * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);\r\n     * const result = await signInWithCredential(credential);\r\n     * ```\r\n     *\r\n     * @param accessToken - Facebook access token.\r\n     */\r\n    static credential(accessToken) {\r\n        return OAuthCredential._fromParams({\r\n            providerId: FacebookAuthProvider.PROVIDER_ID,\r\n            signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,\r\n            accessToken\r\n        });\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromResult(userCredential) {\r\n        return FacebookAuthProvider.credentialFromTaggedObject(userCredential);\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromError(error) {\r\n        return FacebookAuthProvider.credentialFromTaggedObject((error.customData || {}));\r\n    }\r\n    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\r\n        if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\r\n            return null;\r\n        }\r\n        if (!tokenResponse.oauthAccessToken) {\r\n            return null;\r\n        }\r\n        try {\r\n            return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);\r\n        }\r\n        catch (_a) {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/** Always set to {@link SignInMethod}.FACEBOOK. */\r\nFacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = \"facebook.com\" /* SignInMethod.FACEBOOK */;\r\n/** Always set to {@link ProviderId}.FACEBOOK. */\r\nFacebookAuthProvider.PROVIDER_ID = \"facebook.com\" /* ProviderId.FACEBOOK */;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new GoogleAuthProvider();\r\n * // Start a sign in process for an unauthenticated user.\r\n * provider.addScope('profile');\r\n * provider.addScope('email');\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Google Access Token.\r\n *   const credential = GoogleAuthProvider.credentialFromResult(result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new GoogleAuthProvider();\r\n * provider.addScope('profile');\r\n * provider.addScope('email');\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Google Access Token.\r\n * const credential = GoogleAuthProvider.credentialFromResult(result);\r\n * const token = credential.accessToken;\r\n * ```\r\n *\r\n * @public\r\n */\r\nclass GoogleAuthProvider extends BaseOAuthProvider {\r\n    constructor() {\r\n        super(\"google.com\" /* ProviderId.GOOGLE */);\r\n        this.addScope('profile');\r\n    }\r\n    /**\r\n     * Creates a credential for Google. At least one of ID token and access token is required.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * // \\`googleUser\\` from the onsuccess Google Sign In callback.\r\n     * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);\r\n     * const result = await signInWithCredential(credential);\r\n     * ```\r\n     *\r\n     * @param idToken - Google ID token.\r\n     * @param accessToken - Google access token.\r\n     */\r\n    static credential(idToken, accessToken) {\r\n        return OAuthCredential._fromParams({\r\n            providerId: GoogleAuthProvider.PROVIDER_ID,\r\n            signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,\r\n            idToken,\r\n            accessToken\r\n        });\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromResult(userCredential) {\r\n        return GoogleAuthProvider.credentialFromTaggedObject(userCredential);\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromError(error) {\r\n        return GoogleAuthProvider.credentialFromTaggedObject((error.customData || {}));\r\n    }\r\n    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\r\n        if (!tokenResponse) {\r\n            return null;\r\n        }\r\n        const { oauthIdToken, oauthAccessToken } = tokenResponse;\r\n        if (!oauthIdToken && !oauthAccessToken) {\r\n            // This could be an oauth 1 credential or a phone credential\r\n            return null;\r\n        }\r\n        try {\r\n            return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);\r\n        }\r\n        catch (_a) {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/** Always set to {@link SignInMethod}.GOOGLE. */\r\nGoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = \"google.com\" /* SignInMethod.GOOGLE */;\r\n/** Always set to {@link ProviderId}.GOOGLE. */\r\nGoogleAuthProvider.PROVIDER_ID = \"google.com\" /* ProviderId.GOOGLE */;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.\r\n *\r\n * @remarks\r\n * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use\r\n * the {@link signInWithPopup} handler:\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new GithubAuthProvider();\r\n * // Start a sign in process for an unauthenticated user.\r\n * provider.addScope('repo');\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Github Access Token.\r\n *   const credential = GithubAuthProvider.credentialFromResult(result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new GithubAuthProvider();\r\n * provider.addScope('repo');\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Github Access Token.\r\n * const credential = GithubAuthProvider.credentialFromResult(result);\r\n * const token = credential.accessToken;\r\n * ```\r\n * @public\r\n */\r\nclass GithubAuthProvider extends BaseOAuthProvider {\r\n    constructor() {\r\n        super(\"github.com\" /* ProviderId.GITHUB */);\r\n    }\r\n    /**\r\n     * Creates a credential for Github.\r\n     *\r\n     * @param accessToken - Github access token.\r\n     */\r\n    static credential(accessToken) {\r\n        return OAuthCredential._fromParams({\r\n            providerId: GithubAuthProvider.PROVIDER_ID,\r\n            signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,\r\n            accessToken\r\n        });\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromResult(userCredential) {\r\n        return GithubAuthProvider.credentialFromTaggedObject(userCredential);\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromError(error) {\r\n        return GithubAuthProvider.credentialFromTaggedObject((error.customData || {}));\r\n    }\r\n    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\r\n        if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\r\n            return null;\r\n        }\r\n        if (!tokenResponse.oauthAccessToken) {\r\n            return null;\r\n        }\r\n        try {\r\n            return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);\r\n        }\r\n        catch (_a) {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/** Always set to {@link SignInMethod}.GITHUB. */\r\nGithubAuthProvider.GITHUB_SIGN_IN_METHOD = \"github.com\" /* SignInMethod.GITHUB */;\r\n/** Always set to {@link ProviderId}.GITHUB. */\r\nGithubAuthProvider.PROVIDER_ID = \"github.com\" /* ProviderId.GITHUB */;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst IDP_REQUEST_URI = 'http://localhost';\r\n/**\r\n * @public\r\n */\r\nclass SAMLAuthCredential extends AuthCredential {\r\n    /** @internal */\r\n    constructor(providerId, pendingToken) {\r\n        super(providerId, providerId);\r\n        this.pendingToken = pendingToken;\r\n    }\r\n    /** @internal */\r\n    _getIdTokenResponse(auth) {\r\n        const request = this.buildRequest();\r\n        return signInWithIdp(auth, request);\r\n    }\r\n    /** @internal */\r\n    _linkToIdToken(auth, idToken) {\r\n        const request = this.buildRequest();\r\n        request.idToken = idToken;\r\n        return signInWithIdp(auth, request);\r\n    }\r\n    /** @internal */\r\n    _getReauthenticationResolver(auth) {\r\n        const request = this.buildRequest();\r\n        request.autoCreate = false;\r\n        return signInWithIdp(auth, request);\r\n    }\r\n    /** {@inheritdoc AuthCredential.toJSON}  */\r\n    toJSON() {\r\n        return {\r\n            signInMethod: this.signInMethod,\r\n            providerId: this.providerId,\r\n            pendingToken: this.pendingToken\r\n        };\r\n    }\r\n    /**\r\n     * Static method to deserialize a JSON representation of an object into an\r\n     * {@link  AuthCredential}.\r\n     *\r\n     * @param json - Input can be either Object or the stringified representation of the object.\r\n     * When string is provided, JSON.parse would be called first.\r\n     *\r\n     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\r\n     */\r\n    static fromJSON(json) {\r\n        const obj = typeof json === 'string' ? JSON.parse(json) : json;\r\n        const { providerId, signInMethod, pendingToken } = obj;\r\n        if (!providerId ||\r\n            !signInMethod ||\r\n            !pendingToken ||\r\n            providerId !== signInMethod) {\r\n            return null;\r\n        }\r\n        return new SAMLAuthCredential(providerId, pendingToken);\r\n    }\r\n    /**\r\n     * Helper static method to avoid exposing the constructor to end users.\r\n     *\r\n     * @internal\r\n     */\r\n    static _create(providerId, pendingToken) {\r\n        return new SAMLAuthCredential(providerId, pendingToken);\r\n    }\r\n    buildRequest() {\r\n        return {\r\n            requestUri: IDP_REQUEST_URI,\r\n            returnSecureToken: true,\r\n            pendingToken: this.pendingToken\r\n        };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SAML_PROVIDER_PREFIX = 'saml.';\r\n/**\r\n * An {@link AuthProvider} for SAML.\r\n *\r\n * @public\r\n */\r\nclass SAMLAuthProvider extends FederatedAuthProvider {\r\n    /**\r\n     * Constructor. The providerId must start with \"saml.\"\r\n     * @param providerId - SAML provider ID.\r\n     */\r\n    constructor(providerId) {\r\n        _assert(providerId.startsWith(SAML_PROVIDER_PREFIX), \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        super(providerId);\r\n    }\r\n    /**\r\n     * Generates an {@link AuthCredential} from a {@link UserCredential} after a\r\n     * successful SAML flow completes.\r\n     *\r\n     * @remarks\r\n     *\r\n     * For example, to get an {@link AuthCredential}, you could write the\r\n     * following code:\r\n     *\r\n     * ```js\r\n     * const userCredential = await signInWithPopup(auth, samlProvider);\r\n     * const credential = SAMLAuthProvider.credentialFromResult(userCredential);\r\n     * ```\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromResult(userCredential) {\r\n        return SAMLAuthProvider.samlCredentialFromTaggedObject(userCredential);\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromError(error) {\r\n        return SAMLAuthProvider.samlCredentialFromTaggedObject((error.customData || {}));\r\n    }\r\n    /**\r\n     * Creates an {@link AuthCredential} from a JSON string or a plain object.\r\n     * @param json - A plain object or a JSON string\r\n     */\r\n    static credentialFromJSON(json) {\r\n        const credential = SAMLAuthCredential.fromJSON(json);\r\n        _assert(credential, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        return credential;\r\n    }\r\n    static samlCredentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\r\n        if (!tokenResponse) {\r\n            return null;\r\n        }\r\n        const { pendingToken, providerId } = tokenResponse;\r\n        if (!pendingToken || !providerId) {\r\n            return null;\r\n        }\r\n        try {\r\n            return SAMLAuthCredential._create(providerId, pendingToken);\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new TwitterAuthProvider();\r\n * // Start a sign in process for an unauthenticated user.\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Twitter Access Token and Secret.\r\n *   const credential = TwitterAuthProvider.credentialFromResult(result);\r\n *   const token = credential.accessToken;\r\n *   const secret = credential.secret;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new TwitterAuthProvider();\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Twitter Access Token and Secret.\r\n * const credential = TwitterAuthProvider.credentialFromResult(result);\r\n * const token = credential.accessToken;\r\n * const secret = credential.secret;\r\n * ```\r\n *\r\n * @public\r\n */\r\nclass TwitterAuthProvider extends BaseOAuthProvider {\r\n    constructor() {\r\n        super(\"twitter.com\" /* ProviderId.TWITTER */);\r\n    }\r\n    /**\r\n     * Creates a credential for Twitter.\r\n     *\r\n     * @param token - Twitter access token.\r\n     * @param secret - Twitter secret.\r\n     */\r\n    static credential(token, secret) {\r\n        return OAuthCredential._fromParams({\r\n            providerId: TwitterAuthProvider.PROVIDER_ID,\r\n            signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,\r\n            oauthToken: token,\r\n            oauthTokenSecret: secret\r\n        });\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromResult(userCredential) {\r\n        return TwitterAuthProvider.credentialFromTaggedObject(userCredential);\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromError(error) {\r\n        return TwitterAuthProvider.credentialFromTaggedObject((error.customData || {}));\r\n    }\r\n    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\r\n        if (!tokenResponse) {\r\n            return null;\r\n        }\r\n        const { oauthAccessToken, oauthTokenSecret } = tokenResponse;\r\n        if (!oauthAccessToken || !oauthTokenSecret) {\r\n            return null;\r\n        }\r\n        try {\r\n            return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);\r\n        }\r\n        catch (_a) {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/** Always set to {@link SignInMethod}.TWITTER. */\r\nTwitterAuthProvider.TWITTER_SIGN_IN_METHOD = \"twitter.com\" /* SignInMethod.TWITTER */;\r\n/** Always set to {@link ProviderId}.TWITTER. */\r\nTwitterAuthProvider.PROVIDER_ID = \"twitter.com\" /* ProviderId.TWITTER */;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function signUp(auth, request) {\r\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signUp\" /* Endpoint.SIGN_UP */, _addTidIfNecessary(auth, request));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass UserCredentialImpl {\r\n    constructor(params) {\r\n        this.user = params.user;\r\n        this.providerId = params.providerId;\r\n        this._tokenResponse = params._tokenResponse;\r\n        this.operationType = params.operationType;\r\n    }\r\n    static async _fromIdTokenResponse(auth, operationType, idTokenResponse, isAnonymous = false) {\r\n        const user = await UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous);\r\n        const providerId = providerIdForResponse(idTokenResponse);\r\n        const userCred = new UserCredentialImpl({\r\n            user,\r\n            providerId,\r\n            _tokenResponse: idTokenResponse,\r\n            operationType\r\n        });\r\n        return userCred;\r\n    }\r\n    static async _forOperation(user, operationType, response) {\r\n        await user._updateTokensIfNecessary(response, /* reload */ true);\r\n        const providerId = providerIdForResponse(response);\r\n        return new UserCredentialImpl({\r\n            user,\r\n            providerId,\r\n            _tokenResponse: response,\r\n            operationType\r\n        });\r\n    }\r\n}\r\nfunction providerIdForResponse(response) {\r\n    if (response.providerId) {\r\n        return response.providerId;\r\n    }\r\n    if ('phoneNumber' in response) {\r\n        return \"phone\" /* ProviderId.PHONE */;\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Asynchronously signs in as an anonymous user.\r\n *\r\n * @remarks\r\n * If there is already an anonymous user signed in, that user will be returned; otherwise, a\r\n * new anonymous user identity will be created and returned.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n *\r\n * @public\r\n */\r\nasync function signInAnonymously(auth) {\r\n    var _a;\r\n    const authInternal = _castAuth(auth);\r\n    await authInternal._initializationPromise;\r\n    if ((_a = authInternal.currentUser) === null || _a === void 0 ? void 0 : _a.isAnonymous) {\r\n        // If an anonymous user is already signed in, no need to sign them in again.\r\n        return new UserCredentialImpl({\r\n            user: authInternal.currentUser,\r\n            providerId: null,\r\n            operationType: \"signIn\" /* OperationType.SIGN_IN */\r\n        });\r\n    }\r\n    const response = await signUp(authInternal, {\r\n        returnSecureToken: true\r\n    });\r\n    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response, true);\r\n    await authInternal._updateCurrentUser(userCredential.user);\r\n    return userCredential;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass MultiFactorError extends util.FirebaseError {\r\n    constructor(auth, error, operationType, user) {\r\n        var _a;\r\n        super(error.code, error.message);\r\n        this.operationType = operationType;\r\n        this.user = user;\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, MultiFactorError.prototype);\r\n        this.customData = {\r\n            appName: auth.name,\r\n            tenantId: (_a = auth.tenantId) !== null && _a !== void 0 ? _a : undefined,\r\n            _serverResponse: error.customData._serverResponse,\r\n            operationType\r\n        };\r\n    }\r\n    static _fromErrorAndOperation(auth, error, operationType, user) {\r\n        return new MultiFactorError(auth, error, operationType, user);\r\n    }\r\n}\r\nfunction _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {\r\n    const idTokenProvider = operationType === \"reauthenticate\" /* OperationType.REAUTHENTICATE */\r\n        ? credential._getReauthenticationResolver(auth)\r\n        : credential._getIdTokenResponse(auth);\r\n    return idTokenProvider.catch(error => {\r\n        if (error.code === `auth/${\"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */}`) {\r\n            throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);\r\n        }\r\n        throw error;\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Takes a set of UserInfo provider data and converts it to a set of names\r\n */\r\nfunction providerDataAsNames(providerData) {\r\n    return new Set(providerData\r\n        .map(({ providerId }) => providerId)\r\n        .filter(pid => !!pid));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Unlinks a provider from a user account.\r\n *\r\n * @param user - The user.\r\n * @param providerId - The provider to unlink.\r\n *\r\n * @public\r\n */\r\nasync function unlink(user, providerId) {\r\n    const userInternal = util.getModularInstance(user);\r\n    await _assertLinkedStatus(true, userInternal, providerId);\r\n    const { providerUserInfo } = await deleteLinkedAccounts(userInternal.auth, {\r\n        idToken: await userInternal.getIdToken(),\r\n        deleteProvider: [providerId]\r\n    });\r\n    const providersLeft = providerDataAsNames(providerUserInfo || []);\r\n    userInternal.providerData = userInternal.providerData.filter(pd => providersLeft.has(pd.providerId));\r\n    if (!providersLeft.has(\"phone\" /* ProviderId.PHONE */)) {\r\n        userInternal.phoneNumber = null;\r\n    }\r\n    await userInternal.auth._persistUserIfCurrent(userInternal);\r\n    return userInternal;\r\n}\r\nasync function _link$1(user, credential, bypassAuthState = false) {\r\n    const response = await _logoutIfInvalidated(user, credential._linkToIdToken(user.auth, await user.getIdToken()), bypassAuthState);\r\n    return UserCredentialImpl._forOperation(user, \"link\" /* OperationType.LINK */, response);\r\n}\r\nasync function _assertLinkedStatus(expected, user, provider) {\r\n    await _reloadWithoutSaving(user);\r\n    const providerIds = providerDataAsNames(user.providerData);\r\n    const code = expected === false\r\n        ? \"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */\r\n        : \"no-such-provider\" /* AuthErrorCode.NO_SUCH_PROVIDER */;\r\n    _assert(providerIds.has(provider) === expected, user.auth, code);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function _reauthenticate(user, credential, bypassAuthState = false) {\r\n    const { auth } = user;\r\n    const operationType = \"reauthenticate\" /* OperationType.REAUTHENTICATE */;\r\n    try {\r\n        const response = await _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState);\r\n        _assert(response.idToken, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        const parsed = _parseToken(response.idToken);\r\n        _assert(parsed, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        const { sub: localId } = parsed;\r\n        _assert(user.uid === localId, auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */);\r\n        return UserCredentialImpl._forOperation(user, operationType, response);\r\n    }\r\n    catch (e) {\r\n        // Convert user deleted error into user mismatch\r\n        if ((e === null || e === void 0 ? void 0 : e.code) === `auth/${\"user-not-found\" /* AuthErrorCode.USER_DELETED */}`) {\r\n            _fail(auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */);\r\n        }\r\n        throw e;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function _signInWithCredential(auth, credential, bypassAuthState = false) {\r\n    const operationType = \"signIn\" /* OperationType.SIGN_IN */;\r\n    const response = await _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential);\r\n    const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, operationType, response);\r\n    if (!bypassAuthState) {\r\n        await auth._updateCurrentUser(userCredential.user);\r\n    }\r\n    return userCredential;\r\n}\r\n/**\r\n * Asynchronously signs in with the given credentials.\r\n *\r\n * @remarks\r\n * An {@link AuthProvider} can be used to generate the credential.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param credential - The auth credential.\r\n *\r\n * @public\r\n */\r\nasync function signInWithCredential(auth, credential) {\r\n    return _signInWithCredential(_castAuth(auth), credential);\r\n}\r\n/**\r\n * Links the user account with the given credentials.\r\n *\r\n * @remarks\r\n * An {@link AuthProvider} can be used to generate the credential.\r\n *\r\n * @param user - The user.\r\n * @param credential - The auth credential.\r\n *\r\n * @public\r\n */\r\nasync function linkWithCredential(user, credential) {\r\n    const userInternal = util.getModularInstance(user);\r\n    await _assertLinkedStatus(false, userInternal, credential.providerId);\r\n    return _link$1(userInternal, credential);\r\n}\r\n/**\r\n * Re-authenticates a user using a fresh credential.\r\n *\r\n * @remarks\r\n * Use before operations such as {@link updatePassword} that require tokens from recent sign-in\r\n * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error\r\n * or a `TOKEN_EXPIRED` error.\r\n *\r\n * @param user - The user.\r\n * @param credential - The auth credential.\r\n *\r\n * @public\r\n */\r\nasync function reauthenticateWithCredential(user, credential) {\r\n    return _reauthenticate(util.getModularInstance(user), credential);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function signInWithCustomToken$1(auth, request) {\r\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithCustomToken\" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */, _addTidIfNecessary(auth, request));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Asynchronously signs in using a custom token.\r\n *\r\n * @remarks\r\n * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must\r\n * be generated by an auth backend using the\r\n * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}\r\n * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .\r\n *\r\n * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param customToken - The custom token to sign in with.\r\n *\r\n * @public\r\n */\r\nasync function signInWithCustomToken(auth, customToken) {\r\n    const authInternal = _castAuth(auth);\r\n    const response = await signInWithCustomToken$1(authInternal, {\r\n        token: customToken,\r\n        returnSecureToken: true\r\n    });\r\n    const cred = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response);\r\n    await authInternal._updateCurrentUser(cred.user);\r\n    return cred;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass MultiFactorInfoImpl {\r\n    constructor(factorId, response) {\r\n        this.factorId = factorId;\r\n        this.uid = response.mfaEnrollmentId;\r\n        this.enrollmentTime = new Date(response.enrolledAt).toUTCString();\r\n        this.displayName = response.displayName;\r\n    }\r\n    static _fromServerResponse(auth, enrollment) {\r\n        if ('phoneInfo' in enrollment) {\r\n            return PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\r\n        }\r\n        else if ('totpInfo' in enrollment) {\r\n            return TotpMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\r\n        }\r\n        return _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n    }\r\n}\r\nclass PhoneMultiFactorInfoImpl extends MultiFactorInfoImpl {\r\n    constructor(response) {\r\n        super(\"phone\" /* FactorId.PHONE */, response);\r\n        this.phoneNumber = response.phoneInfo;\r\n    }\r\n    static _fromServerResponse(_auth, enrollment) {\r\n        return new PhoneMultiFactorInfoImpl(enrollment);\r\n    }\r\n}\r\nclass TotpMultiFactorInfoImpl extends MultiFactorInfoImpl {\r\n    constructor(response) {\r\n        super(\"totp\" /* FactorId.TOTP */, response);\r\n    }\r\n    static _fromServerResponse(_auth, enrollment) {\r\n        return new TotpMultiFactorInfoImpl(enrollment);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {\r\n    var _a;\r\n    _assert(((_a = actionCodeSettings.url) === null || _a === void 0 ? void 0 : _a.length) > 0, auth, \"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */);\r\n    _assert(typeof actionCodeSettings.dynamicLinkDomain === 'undefined' ||\r\n        actionCodeSettings.dynamicLinkDomain.length > 0, auth, \"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */);\r\n    request.continueUrl = actionCodeSettings.url;\r\n    request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;\r\n    request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;\r\n    if (actionCodeSettings.iOS) {\r\n        _assert(actionCodeSettings.iOS.bundleId.length > 0, auth, \"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */);\r\n        request.iOSBundleId = actionCodeSettings.iOS.bundleId;\r\n    }\r\n    if (actionCodeSettings.android) {\r\n        _assert(actionCodeSettings.android.packageName.length > 0, auth, \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */);\r\n        request.androidInstallApp = actionCodeSettings.android.installApp;\r\n        request.androidMinimumVersionCode =\r\n            actionCodeSettings.android.minimumVersion;\r\n        request.androidPackageName = actionCodeSettings.android.packageName;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Updates the password policy cached in the {@link Auth} instance if a policy is already\r\n * cached for the project or tenant.\r\n *\r\n * @remarks\r\n * We only fetch the password policy if the password did not meet policy requirements and\r\n * there is an existing policy cached. A developer must call validatePassword at least\r\n * once for the cache to be automatically updated.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n *\r\n * @private\r\n */\r\nasync function recachePasswordPolicy(auth) {\r\n    const authInternal = _castAuth(auth);\r\n    if (authInternal._getPasswordPolicyInternal()) {\r\n        await authInternal._updatePasswordPolicy();\r\n    }\r\n}\r\n/**\r\n * Sends a password reset email to the given email address. This method does not throw an error when\r\n * there's no user account with the given email address and\r\n * [Email Enumeration Protection](https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection) is enabled.\r\n *\r\n * @remarks\r\n * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in\r\n * the email sent to the user, along with the new password specified by the user.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);\r\n * // Obtain code from user.\r\n * await confirmPasswordReset('user@example.com', code);\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */\r\nasync function sendPasswordResetEmail(auth, email, actionCodeSettings) {\r\n    const authInternal = _castAuth(auth);\r\n    const request = {\r\n        requestType: \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */,\r\n        email,\r\n        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\r\n    };\r\n    if (actionCodeSettings) {\r\n        _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\r\n    }\r\n    await handleRecaptchaFlow(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */, sendPasswordResetEmail$1);\r\n}\r\n/**\r\n * Completes the password reset process, given a confirmation code and new password.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param oobCode - A confirmation code sent to the user.\r\n * @param newPassword - The new password.\r\n *\r\n * @public\r\n */\r\nasync function confirmPasswordReset(auth, oobCode, newPassword) {\r\n    await resetPassword(util.getModularInstance(auth), {\r\n        oobCode,\r\n        newPassword\r\n    })\r\n        .catch(async (error) => {\r\n        if (error.code ===\r\n            `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\r\n            void recachePasswordPolicy(auth);\r\n        }\r\n        throw error;\r\n    });\r\n    // Do not return the email.\r\n}\r\n/**\r\n * Applies a verification code sent to the user by email or other out-of-band mechanism.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param oobCode - A verification code sent to the user.\r\n *\r\n * @public\r\n */\r\nasync function applyActionCode(auth, oobCode) {\r\n    await applyActionCode$1(util.getModularInstance(auth), { oobCode });\r\n}\r\n/**\r\n * Checks a verification code sent to the user by email or other out-of-band mechanism.\r\n *\r\n * @returns metadata about the code.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param oobCode - A verification code sent to the user.\r\n *\r\n * @public\r\n */\r\nasync function checkActionCode(auth, oobCode) {\r\n    const authModular = util.getModularInstance(auth);\r\n    const response = await resetPassword(authModular, { oobCode });\r\n    // Email could be empty only if the request type is EMAIL_SIGNIN or\r\n    // VERIFY_AND_CHANGE_EMAIL.\r\n    // New email should not be empty if the request type is\r\n    // VERIFY_AND_CHANGE_EMAIL.\r\n    // Multi-factor info could not be empty if the request type is\r\n    // REVERT_SECOND_FACTOR_ADDITION.\r\n    const operation = response.requestType;\r\n    _assert(operation, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n    switch (operation) {\r\n        case \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */:\r\n            break;\r\n        case \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */:\r\n            _assert(response.newEmail, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n            break;\r\n        case \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */:\r\n            _assert(response.mfaInfo, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        // fall through\r\n        default:\r\n            _assert(response.email, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n    }\r\n    // The multi-factor info for revert second factor addition\r\n    let multiFactorInfo = null;\r\n    if (response.mfaInfo) {\r\n        multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(_castAuth(authModular), response.mfaInfo);\r\n    }\r\n    return {\r\n        data: {\r\n            email: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */\r\n                ? response.newEmail\r\n                : response.email) || null,\r\n            previousEmail: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */\r\n                ? response.email\r\n                : response.newEmail) || null,\r\n            multiFactorInfo\r\n        },\r\n        operation\r\n    };\r\n}\r\n/**\r\n * Checks a password reset code sent to the user by email or other out-of-band mechanism.\r\n *\r\n * @returns the user's email address if valid.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param code - A verification code sent to the user.\r\n *\r\n * @public\r\n */\r\nasync function verifyPasswordResetCode(auth, code) {\r\n    const { data } = await checkActionCode(util.getModularInstance(auth), code);\r\n    // Email should always be present since a code was sent to it\r\n    return data.email;\r\n}\r\n/**\r\n * Creates a new user account associated with the specified email address and password.\r\n *\r\n * @remarks\r\n * On successful creation of the user account, this user will also be signed in to your application.\r\n *\r\n * User account creation can fail if the account already exists or the password is invalid.\r\n *\r\n * Note: The email address acts as a unique identifier for the user and enables an email-based\r\n * password reset. This function will create a new user account and set the initial user password.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param password - The user's chosen password.\r\n *\r\n * @public\r\n */\r\nasync function createUserWithEmailAndPassword(auth, email, password) {\r\n    const authInternal = _castAuth(auth);\r\n    const request = {\r\n        returnSecureToken: true,\r\n        email,\r\n        password,\r\n        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\r\n    };\r\n    const signUpResponse = handleRecaptchaFlow(authInternal, request, \"signUpPassword\" /* RecaptchaActionName.SIGN_UP_PASSWORD */, signUp);\r\n    const response = await signUpResponse.catch(error => {\r\n        if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\r\n            void recachePasswordPolicy(auth);\r\n        }\r\n        throw error;\r\n    });\r\n    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response);\r\n    await authInternal._updateCurrentUser(userCredential.user);\r\n    return userCredential;\r\n}\r\n/**\r\n * Asynchronously signs in using an email and password.\r\n *\r\n * @remarks\r\n * Fails with an error if the email address and password do not match.\r\n * When [Email Enumeration Protection](https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection) is enabled,\r\n * this method fails with \"auth/invalid-credential\" in case of an invalid email/password.\r\n *\r\n * Note: The user's password is NOT the password used to access the user's email account. The\r\n * email address serves as a unique identifier for the user, and the password is used to access\r\n * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The users email address.\r\n * @param password - The users password.\r\n *\r\n * @public\r\n */\r\nfunction signInWithEmailAndPassword(auth, email, password) {\r\n    return signInWithCredential(util.getModularInstance(auth), EmailAuthProvider.credential(email, password)).catch(async (error) => {\r\n        if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\r\n            void recachePasswordPolicy(auth);\r\n        }\r\n        throw error;\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Sends a sign-in email link to the user with the specified email.\r\n *\r\n * @remarks\r\n * The sign-in operation has to always be completed in the app unlike other out of band email\r\n * actions (password reset and email verifications). This is because, at the end of the flow,\r\n * the user is expected to be signed in and their Auth state persisted within the app.\r\n *\r\n * To complete sign in with the email link, call {@link signInWithEmailLink} with the email\r\n * address and the email link supplied in the email sent to the user.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\r\n * // Obtain emailLink from the user.\r\n * if(isSignInWithEmailLink(auth, emailLink)) {\r\n *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\r\n * }\r\n * ```\r\n *\r\n * @param authInternal - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */\r\nasync function sendSignInLinkToEmail(auth, email, actionCodeSettings) {\r\n    const authInternal = _castAuth(auth);\r\n    const request = {\r\n        requestType: \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */,\r\n        email,\r\n        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\r\n    };\r\n    function setActionCodeSettings(request, actionCodeSettings) {\r\n        _assert(actionCodeSettings.handleCodeInApp, authInternal, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        if (actionCodeSettings) {\r\n            _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\r\n        }\r\n    }\r\n    setActionCodeSettings(request, actionCodeSettings);\r\n    await handleRecaptchaFlow(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */, sendSignInLinkToEmail$1);\r\n}\r\n/**\r\n * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param emailLink - The link sent to the user's email address.\r\n *\r\n * @public\r\n */\r\nfunction isSignInWithEmailLink(auth, emailLink) {\r\n    const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\r\n    return (actionCodeUrl === null || actionCodeUrl === void 0 ? void 0 : actionCodeUrl.operation) === \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */;\r\n}\r\n/**\r\n * Asynchronously signs in using an email and sign-in email link.\r\n *\r\n * @remarks\r\n * If no link is passed, the link is inferred from the current URL.\r\n *\r\n * Fails with an error if the email address is invalid or OTP in email link expires.\r\n *\r\n * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\r\n * // Obtain emailLink from the user.\r\n * if(isSignInWithEmailLink(auth, emailLink)) {\r\n *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\r\n * }\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param emailLink - The link sent to the user's email address.\r\n *\r\n * @public\r\n */\r\nasync function signInWithEmailLink(auth, email, emailLink) {\r\n    const authModular = util.getModularInstance(auth);\r\n    const credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl());\r\n    // Check if the tenant ID in the email link matches the tenant ID on Auth\r\n    // instance.\r\n    _assert(credential._tenantId === (authModular.tenantId || null), authModular, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */);\r\n    return signInWithCredential(authModular, credential);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function createAuthUri(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:createAuthUri\" /* Endpoint.CREATE_AUTH_URI */, _addTidIfNecessary(auth, request));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Gets the list of possible sign in methods for the given email address. This method returns an\r\n * empty list when [Email Enumeration Protection](https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection) is enabled, irrespective of the number of\r\n * authentication methods available for the given email.\r\n *\r\n * @remarks\r\n * This is useful to differentiate methods of sign-in for the same provider, eg.\r\n * {@link EmailAuthProvider} which has 2 methods of sign-in,\r\n * {@link SignInMethod}.EMAIL_PASSWORD and\r\n * {@link SignInMethod}.EMAIL_LINK.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n *\r\n * Deprecated. Migrating off of this method is recommended as a security best-practice.\r\n * Learn more in the Identity Platform documentation for [Email Enumeration Protection](https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection).\r\n * @public\r\n */\r\nasync function fetchSignInMethodsForEmail(auth, email) {\r\n    // createAuthUri returns an error if continue URI is not http or https.\r\n    // For environments like Cordova, Chrome extensions, native frameworks, file\r\n    // systems, etc, use http://localhost as continue URL.\r\n    const continueUri = _isHttpOrHttps() ? _getCurrentUrl() : 'http://localhost';\r\n    const request = {\r\n        identifier: email,\r\n        continueUri\r\n    };\r\n    const { signinMethods } = await createAuthUri(util.getModularInstance(auth), request);\r\n    return signinMethods || [];\r\n}\r\n/**\r\n * Sends a verification email to a user.\r\n *\r\n * @remarks\r\n * The verification process is completed by calling {@link applyActionCode}.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendEmailVerification(user, actionCodeSettings);\r\n * // Obtain code from the user.\r\n * await applyActionCode(auth, code);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */\r\nasync function sendEmailVerification(user, actionCodeSettings) {\r\n    const userInternal = util.getModularInstance(user);\r\n    const idToken = await user.getIdToken();\r\n    const request = {\r\n        requestType: \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */,\r\n        idToken\r\n    };\r\n    if (actionCodeSettings) {\r\n        _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\r\n    }\r\n    const { email } = await sendEmailVerification$1(userInternal.auth, request);\r\n    if (email !== user.email) {\r\n        await user.reload();\r\n    }\r\n}\r\n/**\r\n * Sends a verification email to a new email address.\r\n *\r\n * @remarks\r\n * The user's email will be updated to the new one after being verified.\r\n *\r\n * If you have a custom email action handler, you can complete the verification process by calling\r\n * {@link applyActionCode}.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);\r\n * // Obtain code from the user.\r\n * await applyActionCode(auth, code);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param newEmail - The new email address to be verified before update.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */\r\nasync function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {\r\n    const userInternal = util.getModularInstance(user);\r\n    const idToken = await user.getIdToken();\r\n    const request = {\r\n        requestType: \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */,\r\n        idToken,\r\n        newEmail\r\n    };\r\n    if (actionCodeSettings) {\r\n        _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\r\n    }\r\n    const { email } = await verifyAndChangeEmail(userInternal.auth, request);\r\n    if (email !== user.email) {\r\n        // If the local copy of the email on user is outdated, reload the\r\n        // user.\r\n        await user.reload();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function updateProfile$1(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Updates a user's profile data.\r\n *\r\n * @param user - The user.\r\n * @param profile - The profile's `displayName` and `photoURL` to update.\r\n *\r\n * @public\r\n */\r\nasync function updateProfile(user, { displayName, photoURL: photoUrl }) {\r\n    if (displayName === undefined && photoUrl === undefined) {\r\n        return;\r\n    }\r\n    const userInternal = util.getModularInstance(user);\r\n    const idToken = await userInternal.getIdToken();\r\n    const profileRequest = {\r\n        idToken,\r\n        displayName,\r\n        photoUrl,\r\n        returnSecureToken: true\r\n    };\r\n    const response = await _logoutIfInvalidated(userInternal, updateProfile$1(userInternal.auth, profileRequest));\r\n    userInternal.displayName = response.displayName || null;\r\n    userInternal.photoURL = response.photoUrl || null;\r\n    // Update the password provider as well\r\n    const passwordProvider = userInternal.providerData.find(({ providerId }) => providerId === \"password\" /* ProviderId.PASSWORD */);\r\n    if (passwordProvider) {\r\n        passwordProvider.displayName = userInternal.displayName;\r\n        passwordProvider.photoURL = userInternal.photoURL;\r\n    }\r\n    await userInternal._updateTokensIfNecessary(response);\r\n}\r\n/**\r\n * Updates the user's email address.\r\n *\r\n * @remarks\r\n * An email will be sent to the original email address (if it was set) that allows to revoke the\r\n * email address change, in order to protect them from account hijacking.\r\n *\r\n * Important: this is a security sensitive operation that requires the user to have recently signed\r\n * in. If this requirement isn't met, ask the user to authenticate again and then call\r\n * {@link reauthenticateWithCredential}.\r\n *\r\n * @param user - The user.\r\n * @param newEmail - The new email address.\r\n *\r\n * Throws \"auth/operation-not-allowed\" error when [Email Enumeration Protection](https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection) is enabled.\r\n * Deprecated - Use {@link verifyBeforeUpdateEmail} instead.\r\n *\r\n * @public\r\n */\r\nfunction updateEmail(user, newEmail) {\r\n    return updateEmailOrPassword(util.getModularInstance(user), newEmail, null);\r\n}\r\n/**\r\n * Updates the user's password.\r\n *\r\n * @remarks\r\n * Important: this is a security sensitive operation that requires the user to have recently signed\r\n * in. If this requirement isn't met, ask the user to authenticate again and then call\r\n * {@link reauthenticateWithCredential}.\r\n *\r\n * @param user - The user.\r\n * @param newPassword - The new password.\r\n *\r\n * @public\r\n */\r\nfunction updatePassword(user, newPassword) {\r\n    return updateEmailOrPassword(util.getModularInstance(user), null, newPassword);\r\n}\r\nasync function updateEmailOrPassword(user, email, password) {\r\n    const { auth } = user;\r\n    const idToken = await user.getIdToken();\r\n    const request = {\r\n        idToken,\r\n        returnSecureToken: true\r\n    };\r\n    if (email) {\r\n        request.email = email;\r\n    }\r\n    if (password) {\r\n        request.password = password;\r\n    }\r\n    const response = await _logoutIfInvalidated(user, updateEmailPassword(auth, request));\r\n    await user._updateTokensIfNecessary(response, /* reload */ true);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Parse the `AdditionalUserInfo` from the ID token response.\r\n *\r\n */\r\nfunction _fromIdTokenResponse(idTokenResponse) {\r\n    var _a, _b;\r\n    if (!idTokenResponse) {\r\n        return null;\r\n    }\r\n    const { providerId } = idTokenResponse;\r\n    const profile = idTokenResponse.rawUserInfo\r\n        ? JSON.parse(idTokenResponse.rawUserInfo)\r\n        : {};\r\n    const isNewUser = idTokenResponse.isNewUser ||\r\n        idTokenResponse.kind === \"identitytoolkit#SignupNewUserResponse\" /* IdTokenResponseKind.SignupNewUser */;\r\n    if (!providerId && (idTokenResponse === null || idTokenResponse === void 0 ? void 0 : idTokenResponse.idToken)) {\r\n        const signInProvider = (_b = (_a = _parseToken(idTokenResponse.idToken)) === null || _a === void 0 ? void 0 : _a.firebase) === null || _b === void 0 ? void 0 : _b['sign_in_provider'];\r\n        if (signInProvider) {\r\n            const filteredProviderId = signInProvider !== \"anonymous\" /* ProviderId.ANONYMOUS */ &&\r\n                signInProvider !== \"custom\" /* ProviderId.CUSTOM */\r\n                ? signInProvider\r\n                : null;\r\n            // Uses generic class in accordance with the legacy SDK.\r\n            return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);\r\n        }\r\n    }\r\n    if (!providerId) {\r\n        return null;\r\n    }\r\n    switch (providerId) {\r\n        case \"facebook.com\" /* ProviderId.FACEBOOK */:\r\n            return new FacebookAdditionalUserInfo(isNewUser, profile);\r\n        case \"github.com\" /* ProviderId.GITHUB */:\r\n            return new GithubAdditionalUserInfo(isNewUser, profile);\r\n        case \"google.com\" /* ProviderId.GOOGLE */:\r\n            return new GoogleAdditionalUserInfo(isNewUser, profile);\r\n        case \"twitter.com\" /* ProviderId.TWITTER */:\r\n            return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);\r\n        case \"custom\" /* ProviderId.CUSTOM */:\r\n        case \"anonymous\" /* ProviderId.ANONYMOUS */:\r\n            return new GenericAdditionalUserInfo(isNewUser, null);\r\n        default:\r\n            return new GenericAdditionalUserInfo(isNewUser, providerId, profile);\r\n    }\r\n}\r\nclass GenericAdditionalUserInfo {\r\n    constructor(isNewUser, providerId, profile = {}) {\r\n        this.isNewUser = isNewUser;\r\n        this.providerId = providerId;\r\n        this.profile = profile;\r\n    }\r\n}\r\nclass FederatedAdditionalUserInfoWithUsername extends GenericAdditionalUserInfo {\r\n    constructor(isNewUser, providerId, profile, username) {\r\n        super(isNewUser, providerId, profile);\r\n        this.username = username;\r\n    }\r\n}\r\nclass FacebookAdditionalUserInfo extends GenericAdditionalUserInfo {\r\n    constructor(isNewUser, profile) {\r\n        super(isNewUser, \"facebook.com\" /* ProviderId.FACEBOOK */, profile);\r\n    }\r\n}\r\nclass GithubAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\r\n    constructor(isNewUser, profile) {\r\n        super(isNewUser, \"github.com\" /* ProviderId.GITHUB */, profile, typeof (profile === null || profile === void 0 ? void 0 : profile.login) === 'string' ? profile === null || profile === void 0 ? void 0 : profile.login : null);\r\n    }\r\n}\r\nclass GoogleAdditionalUserInfo extends GenericAdditionalUserInfo {\r\n    constructor(isNewUser, profile) {\r\n        super(isNewUser, \"google.com\" /* ProviderId.GOOGLE */, profile);\r\n    }\r\n}\r\nclass TwitterAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\r\n    constructor(isNewUser, profile, screenName) {\r\n        super(isNewUser, \"twitter.com\" /* ProviderId.TWITTER */, profile, screenName);\r\n    }\r\n}\r\n/**\r\n * Extracts provider specific {@link AdditionalUserInfo} for the given credential.\r\n *\r\n * @param userCredential - The user credential.\r\n *\r\n * @public\r\n */\r\nfunction getAdditionalUserInfo(userCredential) {\r\n    const { user, _tokenResponse } = userCredential;\r\n    if (user.isAnonymous && !_tokenResponse) {\r\n        // Handle the special case where signInAnonymously() gets called twice.\r\n        // No network call is made so there's nothing to actually fill this in\r\n        return {\r\n            providerId: null,\r\n            isNewUser: false,\r\n            profile: null\r\n        };\r\n    }\r\n    return _fromIdTokenResponse(_tokenResponse);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Non-optional auth methods.\r\n/**\r\n * Changes the type of persistence on the {@link Auth} instance for the currently saved\r\n * `Auth` session and applies this type of persistence for future sign-in requests, including\r\n * sign-in with redirect requests.\r\n *\r\n * @remarks\r\n * This makes it easy for a user signing in to specify whether their session should be\r\n * remembered or not. It also makes it easier to never persist the `Auth` state for applications\r\n * that are shared by other users or have sensitive data.\r\n *\r\n * This method does not work in a Node.js environment.\r\n *\r\n * @example\r\n * ```javascript\r\n * setPersistence(auth, browserSessionPersistence);\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param persistence - The {@link Persistence} to use.\r\n * @returns A `Promise` that resolves once the persistence change has completed\r\n *\r\n * @public\r\n */\r\nfunction setPersistence(auth, persistence) {\r\n    return util.getModularInstance(auth).setPersistence(persistence);\r\n}\r\n/**\r\n * Loads the reCAPTCHA configuration into the `Auth` instance.\r\n *\r\n * @remarks\r\n * This will load the reCAPTCHA config, which indicates whether the reCAPTCHA\r\n * verification flow should be triggered for each auth provider, into the\r\n * current Auth session.\r\n *\r\n * If initializeRecaptchaConfig() is not invoked, the auth flow will always start\r\n * without reCAPTCHA verification. If the provider is configured to require reCAPTCHA\r\n * verification, the SDK will transparently load the reCAPTCHA config and restart the\r\n * auth flows.\r\n *\r\n * Thus, by calling this optional method, you will reduce the latency of future auth flows.\r\n * Loading the reCAPTCHA config early will also enhance the signal collected by reCAPTCHA.\r\n *\r\n * This method does not work in a Node.js environment.\r\n *\r\n * @example\r\n * ```javascript\r\n * initializeRecaptchaConfig(auth);\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n *\r\n * @public\r\n */\r\nfunction initializeRecaptchaConfig(auth) {\r\n    return _initializeRecaptchaConfig(auth);\r\n}\r\n/**\r\n * Validates the password against the password policy configured for the project or tenant.\r\n *\r\n * @remarks\r\n * If no tenant ID is set on the `Auth` instance, then this method will use the password\r\n * policy configured for the project. Otherwise, this method will use the policy configured\r\n * for the tenant. If a password policy has not been configured, then the default policy\r\n * configured for all projects will be used.\r\n *\r\n * If an auth flow fails because a submitted password does not meet the password policy\r\n * requirements and this method has previously been called, then this method will use the\r\n * most recent policy available when called again.\r\n *\r\n * @example\r\n * ```javascript\r\n * validatePassword(auth, 'some-password');\r\n * ```\r\n *\r\n * @param auth The {@link Auth} instance.\r\n * @param password The password to validate.\r\n *\r\n * @public\r\n */\r\nasync function validatePassword(auth, password) {\r\n    const authInternal = _castAuth(auth);\r\n    return authInternal.validatePassword(password);\r\n}\r\n/**\r\n * Adds an observer for changes to the signed-in user's ID token.\r\n *\r\n * @remarks\r\n * This includes sign-in, sign-out, and token refresh events.\r\n * This will not be triggered automatically upon ID token expiration. Use {@link User.getIdToken} to refresh the ID token.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param nextOrObserver - callback triggered on change.\r\n * @param error - Deprecated. This callback is never triggered. Errors\r\n * on signing in/out can be caught in promises returned from\r\n * sign-in/sign-out functions.\r\n * @param completed - Deprecated. This callback is never triggered.\r\n *\r\n * @public\r\n */\r\nfunction onIdTokenChanged(auth, nextOrObserver, error, completed) {\r\n    return util.getModularInstance(auth).onIdTokenChanged(nextOrObserver, error, completed);\r\n}\r\n/**\r\n * Adds a blocking callback that runs before an auth state change\r\n * sets a new user.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param callback - callback triggered before new user value is set.\r\n *   If this throws, it blocks the user from being set.\r\n * @param onAbort - callback triggered if a later `beforeAuthStateChanged()`\r\n *   callback throws, allowing you to undo any side effects.\r\n */\r\nfunction beforeAuthStateChanged(auth, callback, onAbort) {\r\n    return util.getModularInstance(auth).beforeAuthStateChanged(callback, onAbort);\r\n}\r\n/**\r\n * Adds an observer for changes to the user's sign-in state.\r\n *\r\n * @remarks\r\n * To keep the old behavior, see {@link onIdTokenChanged}.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param nextOrObserver - callback triggered on change.\r\n * @param error - Deprecated. This callback is never triggered. Errors\r\n * on signing in/out can be caught in promises returned from\r\n * sign-in/sign-out functions.\r\n * @param completed - Deprecated. This callback is never triggered.\r\n *\r\n * @public\r\n */\r\nfunction onAuthStateChanged(auth, nextOrObserver, error, completed) {\r\n    return util.getModularInstance(auth).onAuthStateChanged(nextOrObserver, error, completed);\r\n}\r\n/**\r\n * Sets the current language to the default device/browser preference.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n *\r\n * @public\r\n */\r\nfunction useDeviceLanguage(auth) {\r\n    util.getModularInstance(auth).useDeviceLanguage();\r\n}\r\n/**\r\n * Asynchronously sets the provided user as {@link Auth.currentUser} on the\r\n * {@link Auth} instance.\r\n *\r\n * @remarks\r\n * A new instance copy of the user provided will be made and set as currentUser.\r\n *\r\n * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners\r\n * like other sign in methods.\r\n *\r\n * The operation fails with an error if the user to be updated belongs to a different Firebase\r\n * project.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param user - The new {@link User}.\r\n *\r\n * @public\r\n */\r\nfunction updateCurrentUser(auth, user) {\r\n    return util.getModularInstance(auth).updateCurrentUser(user);\r\n}\r\n/**\r\n * Signs out the current user.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n *\r\n * @public\r\n */\r\nfunction signOut(auth) {\r\n    return util.getModularInstance(auth).signOut();\r\n}\r\n/**\r\n * Revokes the given access token. Currently only supports Apple OAuth access tokens.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param token - The Apple OAuth access token.\r\n *\r\n * @public\r\n */\r\nfunction revokeAccessToken(auth, token) {\r\n    const authInternal = _castAuth(auth);\r\n    return authInternal.revokeAccessToken(token);\r\n}\r\n/**\r\n * Deletes and signs out the user.\r\n *\r\n * @remarks\r\n * Important: this is a security-sensitive operation that requires the user to have recently\r\n * signed in. If this requirement isn't met, ask the user to authenticate again and then call\r\n * {@link reauthenticateWithCredential}.\r\n *\r\n * @param user - The user.\r\n *\r\n * @public\r\n */\r\nasync function deleteUser(user) {\r\n    return util.getModularInstance(user).delete();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass MultiFactorSessionImpl {\r\n    constructor(type, credential, user) {\r\n        this.type = type;\r\n        this.credential = credential;\r\n        this.user = user;\r\n    }\r\n    static _fromIdtoken(idToken, user) {\r\n        return new MultiFactorSessionImpl(\"enroll\" /* MultiFactorSessionType.ENROLL */, idToken, user);\r\n    }\r\n    static _fromMfaPendingCredential(mfaPendingCredential) {\r\n        return new MultiFactorSessionImpl(\"signin\" /* MultiFactorSessionType.SIGN_IN */, mfaPendingCredential);\r\n    }\r\n    toJSON() {\r\n        const key = this.type === \"enroll\" /* MultiFactorSessionType.ENROLL */\r\n            ? 'idToken'\r\n            : 'pendingCredential';\r\n        return {\r\n            multiFactorSession: {\r\n                [key]: this.credential\r\n            }\r\n        };\r\n    }\r\n    static fromJSON(obj) {\r\n        var _a, _b;\r\n        if (obj === null || obj === void 0 ? void 0 : obj.multiFactorSession) {\r\n            if ((_a = obj.multiFactorSession) === null || _a === void 0 ? void 0 : _a.pendingCredential) {\r\n                return MultiFactorSessionImpl._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);\r\n            }\r\n            else if ((_b = obj.multiFactorSession) === null || _b === void 0 ? void 0 : _b.idToken) {\r\n                return MultiFactorSessionImpl._fromIdtoken(obj.multiFactorSession.idToken);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass MultiFactorResolverImpl {\r\n    constructor(session, hints, signInResolver) {\r\n        this.session = session;\r\n        this.hints = hints;\r\n        this.signInResolver = signInResolver;\r\n    }\r\n    /** @internal */\r\n    static _fromError(authExtern, error) {\r\n        const auth = _castAuth(authExtern);\r\n        const serverResponse = error.customData._serverResponse;\r\n        const hints = (serverResponse.mfaInfo || []).map(enrollment => MultiFactorInfoImpl._fromServerResponse(auth, enrollment));\r\n        _assert(serverResponse.mfaPendingCredential, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        const session = MultiFactorSessionImpl._fromMfaPendingCredential(serverResponse.mfaPendingCredential);\r\n        return new MultiFactorResolverImpl(session, hints, async (assertion) => {\r\n            const mfaResponse = await assertion._process(auth, session);\r\n            // Clear out the unneeded fields from the old login response\r\n            delete serverResponse.mfaInfo;\r\n            delete serverResponse.mfaPendingCredential;\r\n            // Use in the new token & refresh token in the old response\r\n            const idTokenResponse = Object.assign(Object.assign({}, serverResponse), { idToken: mfaResponse.idToken, refreshToken: mfaResponse.refreshToken });\r\n            // TODO: we should collapse this switch statement into UserCredentialImpl._forOperation and have it support the SIGN_IN case\r\n            switch (error.operationType) {\r\n                case \"signIn\" /* OperationType.SIGN_IN */:\r\n                    const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse);\r\n                    await auth._updateCurrentUser(userCredential.user);\r\n                    return userCredential;\r\n                case \"reauthenticate\" /* OperationType.REAUTHENTICATE */:\r\n                    _assert(error.user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n                    return UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse);\r\n                default:\r\n                    _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n            }\r\n        });\r\n    }\r\n    async resolveSignIn(assertionExtern) {\r\n        const assertion = assertionExtern;\r\n        return this.signInResolver(assertion);\r\n    }\r\n}\r\n/**\r\n * Provides a {@link MultiFactorResolver} suitable for completion of a\r\n * multi-factor flow.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param error - The {@link MultiFactorError} raised during a sign-in, or\r\n * reauthentication operation.\r\n *\r\n * @public\r\n */\r\nfunction getMultiFactorResolver(auth, error) {\r\n    var _a;\r\n    const authModular = util.getModularInstance(auth);\r\n    const errorInternal = error;\r\n    _assert(error.customData.operationType, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n    _assert((_a = errorInternal.customData._serverResponse) === null || _a === void 0 ? void 0 : _a.mfaPendingCredential, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n    return MultiFactorResolverImpl._fromError(authModular, errorInternal);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction startEnrollPhoneMfa(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:start\" /* Endpoint.START_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\r\n}\r\nfunction finalizeEnrollPhoneMfa(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:finalize\" /* Endpoint.FINALIZE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\r\n}\r\nfunction startEnrollTotpMfa(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:start\" /* Endpoint.START_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\r\n}\r\nfunction finalizeEnrollTotpMfa(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:finalize\" /* Endpoint.FINALIZE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\r\n}\r\nfunction withdrawMfa(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:withdraw\" /* Endpoint.WITHDRAW_MFA */, _addTidIfNecessary(auth, request));\r\n}\n\nclass MultiFactorUserImpl {\r\n    constructor(user) {\r\n        this.user = user;\r\n        this.enrolledFactors = [];\r\n        user._onReload(userInfo => {\r\n            if (userInfo.mfaInfo) {\r\n                this.enrolledFactors = userInfo.mfaInfo.map(enrollment => MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment));\r\n            }\r\n        });\r\n    }\r\n    static _fromUser(user) {\r\n        return new MultiFactorUserImpl(user);\r\n    }\r\n    async getSession() {\r\n        return MultiFactorSessionImpl._fromIdtoken(await this.user.getIdToken(), this.user);\r\n    }\r\n    async enroll(assertionExtern, displayName) {\r\n        const assertion = assertionExtern;\r\n        const session = (await this.getSession());\r\n        const finalizeMfaResponse = await _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName));\r\n        // New tokens will be issued after enrollment of the new second factors.\r\n        // They need to be updated on the user.\r\n        await this.user._updateTokensIfNecessary(finalizeMfaResponse);\r\n        // The user needs to be reloaded to get the new multi-factor information\r\n        // from server. USER_RELOADED event will be triggered and `enrolledFactors`\r\n        // will be updated.\r\n        return this.user.reload();\r\n    }\r\n    async unenroll(infoOrUid) {\r\n        const mfaEnrollmentId = typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;\r\n        const idToken = await this.user.getIdToken();\r\n        try {\r\n            const idTokenResponse = await _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {\r\n                idToken,\r\n                mfaEnrollmentId\r\n            }));\r\n            // Remove the second factor from the user's list.\r\n            this.enrolledFactors = this.enrolledFactors.filter(({ uid }) => uid !== mfaEnrollmentId);\r\n            // Depending on whether the backend decided to revoke the user's session,\r\n            // the tokenResponse may be empty. If the tokens were not updated (and they\r\n            // are now invalid), reloading the user will discover this and invalidate\r\n            // the user's state accordingly.\r\n            await this.user._updateTokensIfNecessary(idTokenResponse);\r\n            await this.user.reload();\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n}\r\nconst multiFactorUserCache = new WeakMap();\r\n/**\r\n * The {@link MultiFactorUser} corresponding to the user.\r\n *\r\n * @remarks\r\n * This is used to access all multi-factor properties and operations related to the user.\r\n *\r\n * @param user - The user.\r\n *\r\n * @public\r\n */\r\nfunction multiFactor(user) {\r\n    const userModular = util.getModularInstance(user);\r\n    if (!multiFactorUserCache.has(userModular)) {\r\n        multiFactorUserCache.set(userModular, MultiFactorUserImpl._fromUser(userModular));\r\n    }\r\n    return multiFactorUserCache.get(userModular);\r\n}\n\nconst STORAGE_AVAILABLE_KEY = '__sak';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// There are two different browser persistence types: local and session.\r\n// Both have the same implementation but use a different underlying storage\r\n// object.\r\nclass BrowserPersistenceClass {\r\n    constructor(storageRetriever, type) {\r\n        this.storageRetriever = storageRetriever;\r\n        this.type = type;\r\n    }\r\n    _isAvailable() {\r\n        try {\r\n            if (!this.storage) {\r\n                return Promise.resolve(false);\r\n            }\r\n            this.storage.setItem(STORAGE_AVAILABLE_KEY, '1');\r\n            this.storage.removeItem(STORAGE_AVAILABLE_KEY);\r\n            return Promise.resolve(true);\r\n        }\r\n        catch (_a) {\r\n            return Promise.resolve(false);\r\n        }\r\n    }\r\n    _set(key, value) {\r\n        this.storage.setItem(key, JSON.stringify(value));\r\n        return Promise.resolve();\r\n    }\r\n    _get(key) {\r\n        const json = this.storage.getItem(key);\r\n        return Promise.resolve(json ? JSON.parse(json) : null);\r\n    }\r\n    _remove(key) {\r\n        this.storage.removeItem(key);\r\n        return Promise.resolve();\r\n    }\r\n    get storage() {\r\n        return this.storageRetriever();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction _iframeCannotSyncWebStorage() {\r\n    const ua = util.getUA();\r\n    return _isSafari(ua) || _isIOS(ua);\r\n}\r\n// The polling period in case events are not supported\r\nconst _POLLING_INTERVAL_MS$1 = 1000;\r\n// The IE 10 localStorage cross tab synchronization delay in milliseconds\r\nconst IE10_LOCAL_STORAGE_SYNC_DELAY = 10;\r\nclass BrowserLocalPersistence extends BrowserPersistenceClass {\r\n    constructor() {\r\n        super(() => window.localStorage, \"LOCAL\" /* PersistenceType.LOCAL */);\r\n        this.boundEventHandler = (event, poll) => this.onStorageEvent(event, poll);\r\n        this.listeners = {};\r\n        this.localCache = {};\r\n        // setTimeout return value is platform specific\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        this.pollTimer = null;\r\n        // Safari or iOS browser and embedded in an iframe.\r\n        this.safariLocalStorageNotSynced = _iframeCannotSyncWebStorage() && _isIframe();\r\n        // Whether to use polling instead of depending on window events\r\n        this.fallbackToPolling = _isMobileBrowser();\r\n        this._shouldAllowMigration = true;\r\n    }\r\n    forAllChangedKeys(cb) {\r\n        // Check all keys with listeners on them.\r\n        for (const key of Object.keys(this.listeners)) {\r\n            // Get value from localStorage.\r\n            const newValue = this.storage.getItem(key);\r\n            const oldValue = this.localCache[key];\r\n            // If local map value does not match, trigger listener with storage event.\r\n            // Differentiate this simulated event from the real storage event.\r\n            if (newValue !== oldValue) {\r\n                cb(key, oldValue, newValue);\r\n            }\r\n        }\r\n    }\r\n    onStorageEvent(event, poll = false) {\r\n        // Key would be null in some situations, like when localStorage is cleared\r\n        if (!event.key) {\r\n            this.forAllChangedKeys((key, _oldValue, newValue) => {\r\n                this.notifyListeners(key, newValue);\r\n            });\r\n            return;\r\n        }\r\n        const key = event.key;\r\n        // Check the mechanism how this event was detected.\r\n        // The first event will dictate the mechanism to be used.\r\n        if (poll) {\r\n            // Environment detects storage changes via polling.\r\n            // Remove storage event listener to prevent possible event duplication.\r\n            this.detachListener();\r\n        }\r\n        else {\r\n            // Environment detects storage changes via storage event listener.\r\n            // Remove polling listener to prevent possible event duplication.\r\n            this.stopPolling();\r\n        }\r\n        // Safari embedded iframe. Storage event will trigger with the delta\r\n        // changes but no changes will be applied to the iframe localStorage.\r\n        if (this.safariLocalStorageNotSynced) {\r\n            // Get current iframe page value.\r\n            const storedValue = this.storage.getItem(key);\r\n            // Value not synchronized, synchronize manually.\r\n            if (event.newValue !== storedValue) {\r\n                if (event.newValue !== null) {\r\n                    // Value changed from current value.\r\n                    this.storage.setItem(key, event.newValue);\r\n                }\r\n                else {\r\n                    // Current value deleted.\r\n                    this.storage.removeItem(key);\r\n                }\r\n            }\r\n            else if (this.localCache[key] === event.newValue && !poll) {\r\n                // Already detected and processed, do not trigger listeners again.\r\n                return;\r\n            }\r\n        }\r\n        const triggerListeners = () => {\r\n            // Keep local map up to date in case storage event is triggered before\r\n            // poll.\r\n            const storedValue = this.storage.getItem(key);\r\n            if (!poll && this.localCache[key] === storedValue) {\r\n                // Real storage event which has already been detected, do nothing.\r\n                // This seems to trigger in some IE browsers for some reason.\r\n                return;\r\n            }\r\n            this.notifyListeners(key, storedValue);\r\n        };\r\n        const storedValue = this.storage.getItem(key);\r\n        if (_isIE10() &&\r\n            storedValue !== event.newValue &&\r\n            event.newValue !== event.oldValue) {\r\n            // IE 10 has this weird bug where a storage event would trigger with the\r\n            // correct key, oldValue and newValue but localStorage.getItem(key) does\r\n            // not yield the updated value until a few milliseconds. This ensures\r\n            // this recovers from that situation.\r\n            setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);\r\n        }\r\n        else {\r\n            triggerListeners();\r\n        }\r\n    }\r\n    notifyListeners(key, value) {\r\n        this.localCache[key] = value;\r\n        const listeners = this.listeners[key];\r\n        if (listeners) {\r\n            for (const listener of Array.from(listeners)) {\r\n                listener(value ? JSON.parse(value) : value);\r\n            }\r\n        }\r\n    }\r\n    startPolling() {\r\n        this.stopPolling();\r\n        this.pollTimer = setInterval(() => {\r\n            this.forAllChangedKeys((key, oldValue, newValue) => {\r\n                this.onStorageEvent(new StorageEvent('storage', {\r\n                    key,\r\n                    oldValue,\r\n                    newValue\r\n                }), \r\n                /* poll */ true);\r\n            });\r\n        }, _POLLING_INTERVAL_MS$1);\r\n    }\r\n    stopPolling() {\r\n        if (this.pollTimer) {\r\n            clearInterval(this.pollTimer);\r\n            this.pollTimer = null;\r\n        }\r\n    }\r\n    attachListener() {\r\n        window.addEventListener('storage', this.boundEventHandler);\r\n    }\r\n    detachListener() {\r\n        window.removeEventListener('storage', this.boundEventHandler);\r\n    }\r\n    _addListener(key, listener) {\r\n        if (Object.keys(this.listeners).length === 0) {\r\n            // Whether browser can detect storage event when it had already been pushed to the background.\r\n            // This may happen in some mobile browsers. A localStorage change in the foreground window\r\n            // will not be detected in the background window via the storage event.\r\n            // This was detected in iOS 7.x mobile browsers\r\n            if (this.fallbackToPolling) {\r\n                this.startPolling();\r\n            }\r\n            else {\r\n                this.attachListener();\r\n            }\r\n        }\r\n        if (!this.listeners[key]) {\r\n            this.listeners[key] = new Set();\r\n            // Populate the cache to avoid spuriously triggering on first poll.\r\n            this.localCache[key] = this.storage.getItem(key);\r\n        }\r\n        this.listeners[key].add(listener);\r\n    }\r\n    _removeListener(key, listener) {\r\n        if (this.listeners[key]) {\r\n            this.listeners[key].delete(listener);\r\n            if (this.listeners[key].size === 0) {\r\n                delete this.listeners[key];\r\n            }\r\n        }\r\n        if (Object.keys(this.listeners).length === 0) {\r\n            this.detachListener();\r\n            this.stopPolling();\r\n        }\r\n    }\r\n    // Update local cache on base operations:\r\n    async _set(key, value) {\r\n        await super._set(key, value);\r\n        this.localCache[key] = JSON.stringify(value);\r\n    }\r\n    async _get(key) {\r\n        const value = await super._get(key);\r\n        this.localCache[key] = JSON.stringify(value);\r\n        return value;\r\n    }\r\n    async _remove(key) {\r\n        await super._remove(key);\r\n        delete this.localCache[key];\r\n    }\r\n}\r\nBrowserLocalPersistence.type = 'LOCAL';\r\n/**\r\n * An implementation of {@link Persistence} of type `LOCAL` using `localStorage`\r\n * for the underlying storage.\r\n *\r\n * @public\r\n */\r\nconst browserLocalPersistence = BrowserLocalPersistence;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass BrowserSessionPersistence extends BrowserPersistenceClass {\r\n    constructor() {\r\n        super(() => window.sessionStorage, \"SESSION\" /* PersistenceType.SESSION */);\r\n    }\r\n    _addListener(_key, _listener) {\r\n        // Listeners are not supported for session storage since it cannot be shared across windows\r\n        return;\r\n    }\r\n    _removeListener(_key, _listener) {\r\n        // Listeners are not supported for session storage since it cannot be shared across windows\r\n        return;\r\n    }\r\n}\r\nBrowserSessionPersistence.type = 'SESSION';\r\n/**\r\n * An implementation of {@link Persistence} of `SESSION` using `sessionStorage`\r\n * for the underlying storage.\r\n *\r\n * @public\r\n */\r\nconst browserSessionPersistence = BrowserSessionPersistence;\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Shim for Promise.allSettled, note the slightly different format of `fulfilled` vs `status`.\r\n *\r\n * @param promises - Array of promises to wait on.\r\n */\r\nfunction _allSettled(promises) {\r\n    return Promise.all(promises.map(async (promise) => {\r\n        try {\r\n            const value = await promise;\r\n            return {\r\n                fulfilled: true,\r\n                value\r\n            };\r\n        }\r\n        catch (reason) {\r\n            return {\r\n                fulfilled: false,\r\n                reason\r\n            };\r\n        }\r\n    }));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface class for receiving messages.\r\n *\r\n */\r\nclass Receiver {\r\n    constructor(eventTarget) {\r\n        this.eventTarget = eventTarget;\r\n        this.handlersMap = {};\r\n        this.boundEventHandler = this.handleEvent.bind(this);\r\n    }\r\n    /**\r\n     * Obtain an instance of a Receiver for a given event target, if none exists it will be created.\r\n     *\r\n     * @param eventTarget - An event target (such as window or self) through which the underlying\r\n     * messages will be received.\r\n     */\r\n    static _getInstance(eventTarget) {\r\n        // The results are stored in an array since objects can't be keys for other\r\n        // objects. In addition, setting a unique property on an event target as a\r\n        // hash map key may not be allowed due to CORS restrictions.\r\n        const existingInstance = this.receivers.find(receiver => receiver.isListeningto(eventTarget));\r\n        if (existingInstance) {\r\n            return existingInstance;\r\n        }\r\n        const newInstance = new Receiver(eventTarget);\r\n        this.receivers.push(newInstance);\r\n        return newInstance;\r\n    }\r\n    isListeningto(eventTarget) {\r\n        return this.eventTarget === eventTarget;\r\n    }\r\n    /**\r\n     * Fans out a MessageEvent to the appropriate listeners.\r\n     *\r\n     * @remarks\r\n     * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have\r\n     * finished processing.\r\n     *\r\n     * @param event - The MessageEvent.\r\n     *\r\n     */\r\n    async handleEvent(event) {\r\n        const messageEvent = event;\r\n        const { eventId, eventType, data } = messageEvent.data;\r\n        const handlers = this.handlersMap[eventType];\r\n        if (!(handlers === null || handlers === void 0 ? void 0 : handlers.size)) {\r\n            return;\r\n        }\r\n        messageEvent.ports[0].postMessage({\r\n            status: \"ack\" /* _Status.ACK */,\r\n            eventId,\r\n            eventType\r\n        });\r\n        const promises = Array.from(handlers).map(async (handler) => handler(messageEvent.origin, data));\r\n        const response = await _allSettled(promises);\r\n        messageEvent.ports[0].postMessage({\r\n            status: \"done\" /* _Status.DONE */,\r\n            eventId,\r\n            eventType,\r\n            response\r\n        });\r\n    }\r\n    /**\r\n     * Subscribe an event handler for a particular event.\r\n     *\r\n     * @param eventType - Event name to subscribe to.\r\n     * @param eventHandler - The event handler which should receive the events.\r\n     *\r\n     */\r\n    _subscribe(eventType, eventHandler) {\r\n        if (Object.keys(this.handlersMap).length === 0) {\r\n            this.eventTarget.addEventListener('message', this.boundEventHandler);\r\n        }\r\n        if (!this.handlersMap[eventType]) {\r\n            this.handlersMap[eventType] = new Set();\r\n        }\r\n        this.handlersMap[eventType].add(eventHandler);\r\n    }\r\n    /**\r\n     * Unsubscribe an event handler from a particular event.\r\n     *\r\n     * @param eventType - Event name to unsubscribe from.\r\n     * @param eventHandler - Optinoal event handler, if none provided, unsubscribe all handlers on this event.\r\n     *\r\n     */\r\n    _unsubscribe(eventType, eventHandler) {\r\n        if (this.handlersMap[eventType] && eventHandler) {\r\n            this.handlersMap[eventType].delete(eventHandler);\r\n        }\r\n        if (!eventHandler || this.handlersMap[eventType].size === 0) {\r\n            delete this.handlersMap[eventType];\r\n        }\r\n        if (Object.keys(this.handlersMap).length === 0) {\r\n            this.eventTarget.removeEventListener('message', this.boundEventHandler);\r\n        }\r\n    }\r\n}\r\nReceiver.receivers = [];\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction _generateEventId(prefix = '', digits = 10) {\r\n    let random = '';\r\n    for (let i = 0; i < digits; i++) {\r\n        random += Math.floor(Math.random() * 10);\r\n    }\r\n    return prefix + random;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface for sending messages and waiting for a completion response.\r\n *\r\n */\r\nclass Sender {\r\n    constructor(target) {\r\n        this.target = target;\r\n        this.handlers = new Set();\r\n    }\r\n    /**\r\n     * Unsubscribe the handler and remove it from our tracking Set.\r\n     *\r\n     * @param handler - The handler to unsubscribe.\r\n     */\r\n    removeMessageHandler(handler) {\r\n        if (handler.messageChannel) {\r\n            handler.messageChannel.port1.removeEventListener('message', handler.onMessage);\r\n            handler.messageChannel.port1.close();\r\n        }\r\n        this.handlers.delete(handler);\r\n    }\r\n    /**\r\n     * Send a message to the Receiver located at {@link target}.\r\n     *\r\n     * @remarks\r\n     * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the\r\n     * receiver has had a chance to fully process the event.\r\n     *\r\n     * @param eventType - Type of event to send.\r\n     * @param data - The payload of the event.\r\n     * @param timeout - Timeout for waiting on an ACK from the receiver.\r\n     *\r\n     * @returns An array of settled promises from all the handlers that were listening on the receiver.\r\n     */\r\n    async _send(eventType, data, timeout = 50 /* _TimeoutDuration.ACK */) {\r\n        const messageChannel = typeof MessageChannel !== 'undefined' ? new MessageChannel() : null;\r\n        if (!messageChannel) {\r\n            throw new Error(\"connection_unavailable\" /* _MessageError.CONNECTION_UNAVAILABLE */);\r\n        }\r\n        // Node timers and browser timers return fundamentally different types.\r\n        // We don't actually care what the value is but TS won't accept unknown and\r\n        // we can't cast properly in both environments.\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        let completionTimer;\r\n        let handler;\r\n        return new Promise((resolve, reject) => {\r\n            const eventId = _generateEventId('', 20);\r\n            messageChannel.port1.start();\r\n            const ackTimer = setTimeout(() => {\r\n                reject(new Error(\"unsupported_event\" /* _MessageError.UNSUPPORTED_EVENT */));\r\n            }, timeout);\r\n            handler = {\r\n                messageChannel,\r\n                onMessage(event) {\r\n                    const messageEvent = event;\r\n                    if (messageEvent.data.eventId !== eventId) {\r\n                        return;\r\n                    }\r\n                    switch (messageEvent.data.status) {\r\n                        case \"ack\" /* _Status.ACK */:\r\n                            // The receiver should ACK first.\r\n                            clearTimeout(ackTimer);\r\n                            completionTimer = setTimeout(() => {\r\n                                reject(new Error(\"timeout\" /* _MessageError.TIMEOUT */));\r\n                            }, 3000 /* _TimeoutDuration.COMPLETION */);\r\n                            break;\r\n                        case \"done\" /* _Status.DONE */:\r\n                            // Once the receiver's handlers are finished we will get the results.\r\n                            clearTimeout(completionTimer);\r\n                            resolve(messageEvent.data.response);\r\n                            break;\r\n                        default:\r\n                            clearTimeout(ackTimer);\r\n                            clearTimeout(completionTimer);\r\n                            reject(new Error(\"invalid_response\" /* _MessageError.INVALID_RESPONSE */));\r\n                            break;\r\n                    }\r\n                }\r\n            };\r\n            this.handlers.add(handler);\r\n            messageChannel.port1.addEventListener('message', handler.onMessage);\r\n            this.target.postMessage({\r\n                eventType,\r\n                eventId,\r\n                data\r\n            }, [messageChannel.port2]);\r\n        }).finally(() => {\r\n            if (handler) {\r\n                this.removeMessageHandler(handler);\r\n            }\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Lazy accessor for window, since the compat layer won't tree shake this out,\r\n * we need to make sure not to mess with window unless we have to\r\n */\r\nfunction _window() {\r\n    return window;\r\n}\r\nfunction _setWindowLocation(url) {\r\n    _window().location.href = url;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction _isWorker() {\r\n    return (typeof _window()['WorkerGlobalScope'] !== 'undefined' &&\r\n        typeof _window()['importScripts'] === 'function');\r\n}\r\nasync function _getActiveServiceWorker() {\r\n    if (!(navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker)) {\r\n        return null;\r\n    }\r\n    try {\r\n        const registration = await navigator.serviceWorker.ready;\r\n        return registration.active;\r\n    }\r\n    catch (_a) {\r\n        return null;\r\n    }\r\n}\r\nfunction _getServiceWorkerController() {\r\n    var _a;\r\n    return ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker) === null || _a === void 0 ? void 0 : _a.controller) || null;\r\n}\r\nfunction _getWorkerGlobalScope() {\r\n    return _isWorker() ? self : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DB_NAME = 'firebaseLocalStorageDb';\r\nconst DB_VERSION = 1;\r\nconst DB_OBJECTSTORE_NAME = 'firebaseLocalStorage';\r\nconst DB_DATA_KEYPATH = 'fbase_key';\r\n/**\r\n * Promise wrapper for IDBRequest\r\n *\r\n * Unfortunately we can't cleanly extend Promise<T> since promises are not callable in ES6\r\n *\r\n */\r\nclass DBPromise {\r\n    constructor(request) {\r\n        this.request = request;\r\n    }\r\n    toPromise() {\r\n        return new Promise((resolve, reject) => {\r\n            this.request.addEventListener('success', () => {\r\n                resolve(this.request.result);\r\n            });\r\n            this.request.addEventListener('error', () => {\r\n                reject(this.request.error);\r\n            });\r\n        });\r\n    }\r\n}\r\nfunction getObjectStore(db, isReadWrite) {\r\n    return db\r\n        .transaction([DB_OBJECTSTORE_NAME], isReadWrite ? 'readwrite' : 'readonly')\r\n        .objectStore(DB_OBJECTSTORE_NAME);\r\n}\r\nfunction _deleteDatabase() {\r\n    const request = indexedDB.deleteDatabase(DB_NAME);\r\n    return new DBPromise(request).toPromise();\r\n}\r\nfunction _openDatabase() {\r\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n    return new Promise((resolve, reject) => {\r\n        request.addEventListener('error', () => {\r\n            reject(request.error);\r\n        });\r\n        request.addEventListener('upgradeneeded', () => {\r\n            const db = request.result;\r\n            try {\r\n                db.createObjectStore(DB_OBJECTSTORE_NAME, { keyPath: DB_DATA_KEYPATH });\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n        request.addEventListener('success', async () => {\r\n            const db = request.result;\r\n            // Strange bug that occurs in Firefox when multiple tabs are opened at the\r\n            // same time. The only way to recover seems to be deleting the database\r\n            // and re-initializing it.\r\n            // https://github.com/firebase/firebase-js-sdk/issues/634\r\n            if (!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {\r\n                // Need to close the database or else you get a `blocked` event\r\n                db.close();\r\n                await _deleteDatabase();\r\n                resolve(await _openDatabase());\r\n            }\r\n            else {\r\n                resolve(db);\r\n            }\r\n        });\r\n    });\r\n}\r\nasync function _putObject(db, key, value) {\r\n    const request = getObjectStore(db, true).put({\r\n        [DB_DATA_KEYPATH]: key,\r\n        value\r\n    });\r\n    return new DBPromise(request).toPromise();\r\n}\r\nasync function getObject(db, key) {\r\n    const request = getObjectStore(db, false).get(key);\r\n    const data = await new DBPromise(request).toPromise();\r\n    return data === undefined ? null : data.value;\r\n}\r\nfunction _deleteObject(db, key) {\r\n    const request = getObjectStore(db, true).delete(key);\r\n    return new DBPromise(request).toPromise();\r\n}\r\nconst _POLLING_INTERVAL_MS = 800;\r\nconst _TRANSACTION_RETRY_COUNT = 3;\r\nclass IndexedDBLocalPersistence {\r\n    constructor() {\r\n        this.type = \"LOCAL\" /* PersistenceType.LOCAL */;\r\n        this._shouldAllowMigration = true;\r\n        this.listeners = {};\r\n        this.localCache = {};\r\n        // setTimeout return value is platform specific\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        this.pollTimer = null;\r\n        this.pendingWrites = 0;\r\n        this.receiver = null;\r\n        this.sender = null;\r\n        this.serviceWorkerReceiverAvailable = false;\r\n        this.activeServiceWorker = null;\r\n        // Fire & forget the service worker registration as it may never resolve\r\n        this._workerInitializationPromise =\r\n            this.initializeServiceWorkerMessaging().then(() => { }, () => { });\r\n    }\r\n    async _openDb() {\r\n        if (this.db) {\r\n            return this.db;\r\n        }\r\n        this.db = await _openDatabase();\r\n        return this.db;\r\n    }\r\n    async _withRetries(op) {\r\n        let numAttempts = 0;\r\n        while (true) {\r\n            try {\r\n                const db = await this._openDb();\r\n                return await op(db);\r\n            }\r\n            catch (e) {\r\n                if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {\r\n                    throw e;\r\n                }\r\n                if (this.db) {\r\n                    this.db.close();\r\n                    this.db = undefined;\r\n                }\r\n                // TODO: consider adding exponential backoff\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * IndexedDB events do not propagate from the main window to the worker context.  We rely on a\r\n     * postMessage interface to send these events to the worker ourselves.\r\n     */\r\n    async initializeServiceWorkerMessaging() {\r\n        return _isWorker() ? this.initializeReceiver() : this.initializeSender();\r\n    }\r\n    /**\r\n     * As the worker we should listen to events from the main window.\r\n     */\r\n    async initializeReceiver() {\r\n        this.receiver = Receiver._getInstance(_getWorkerGlobalScope());\r\n        // Refresh from persistence if we receive a KeyChanged message.\r\n        this.receiver._subscribe(\"keyChanged\" /* _EventType.KEY_CHANGED */, async (_origin, data) => {\r\n            const keys = await this._poll();\r\n            return {\r\n                keyProcessed: keys.includes(data.key)\r\n            };\r\n        });\r\n        // Let the sender know that we are listening so they give us more timeout.\r\n        this.receiver._subscribe(\"ping\" /* _EventType.PING */, async (_origin, _data) => {\r\n            return [\"keyChanged\" /* _EventType.KEY_CHANGED */];\r\n        });\r\n    }\r\n    /**\r\n     * As the main window, we should let the worker know when keys change (set and remove).\r\n     *\r\n     * @remarks\r\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}\r\n     * may not resolve.\r\n     */\r\n    async initializeSender() {\r\n        var _a, _b;\r\n        // Check to see if there's an active service worker.\r\n        this.activeServiceWorker = await _getActiveServiceWorker();\r\n        if (!this.activeServiceWorker) {\r\n            return;\r\n        }\r\n        this.sender = new Sender(this.activeServiceWorker);\r\n        // Ping the service worker to check what events they can handle.\r\n        const results = await this.sender._send(\"ping\" /* _EventType.PING */, {}, 800 /* _TimeoutDuration.LONG_ACK */);\r\n        if (!results) {\r\n            return;\r\n        }\r\n        if (((_a = results[0]) === null || _a === void 0 ? void 0 : _a.fulfilled) &&\r\n            ((_b = results[0]) === null || _b === void 0 ? void 0 : _b.value.includes(\"keyChanged\" /* _EventType.KEY_CHANGED */))) {\r\n            this.serviceWorkerReceiverAvailable = true;\r\n        }\r\n    }\r\n    /**\r\n     * Let the worker know about a changed key, the exact key doesn't technically matter since the\r\n     * worker will just trigger a full sync anyway.\r\n     *\r\n     * @remarks\r\n     * For now, we only support one service worker per page.\r\n     *\r\n     * @param key - Storage key which changed.\r\n     */\r\n    async notifyServiceWorker(key) {\r\n        if (!this.sender ||\r\n            !this.activeServiceWorker ||\r\n            _getServiceWorkerController() !== this.activeServiceWorker) {\r\n            return;\r\n        }\r\n        try {\r\n            await this.sender._send(\"keyChanged\" /* _EventType.KEY_CHANGED */, { key }, \r\n            // Use long timeout if receiver has previously responded to a ping from us.\r\n            this.serviceWorkerReceiverAvailable\r\n                ? 800 /* _TimeoutDuration.LONG_ACK */\r\n                : 50 /* _TimeoutDuration.ACK */);\r\n        }\r\n        catch (_a) {\r\n            // This is a best effort approach. Ignore errors.\r\n        }\r\n    }\r\n    async _isAvailable() {\r\n        try {\r\n            if (!indexedDB) {\r\n                return false;\r\n            }\r\n            const db = await _openDatabase();\r\n            await _putObject(db, STORAGE_AVAILABLE_KEY, '1');\r\n            await _deleteObject(db, STORAGE_AVAILABLE_KEY);\r\n            return true;\r\n        }\r\n        catch (_a) { }\r\n        return false;\r\n    }\r\n    async _withPendingWrite(write) {\r\n        this.pendingWrites++;\r\n        try {\r\n            await write();\r\n        }\r\n        finally {\r\n            this.pendingWrites--;\r\n        }\r\n    }\r\n    async _set(key, value) {\r\n        return this._withPendingWrite(async () => {\r\n            await this._withRetries((db) => _putObject(db, key, value));\r\n            this.localCache[key] = value;\r\n            return this.notifyServiceWorker(key);\r\n        });\r\n    }\r\n    async _get(key) {\r\n        const obj = (await this._withRetries((db) => getObject(db, key)));\r\n        this.localCache[key] = obj;\r\n        return obj;\r\n    }\r\n    async _remove(key) {\r\n        return this._withPendingWrite(async () => {\r\n            await this._withRetries((db) => _deleteObject(db, key));\r\n            delete this.localCache[key];\r\n            return this.notifyServiceWorker(key);\r\n        });\r\n    }\r\n    async _poll() {\r\n        // TODO: check if we need to fallback if getAll is not supported\r\n        const result = await this._withRetries((db) => {\r\n            const getAllRequest = getObjectStore(db, false).getAll();\r\n            return new DBPromise(getAllRequest).toPromise();\r\n        });\r\n        if (!result) {\r\n            return [];\r\n        }\r\n        // If we have pending writes in progress abort, we'll get picked up on the next poll\r\n        if (this.pendingWrites !== 0) {\r\n            return [];\r\n        }\r\n        const keys = [];\r\n        const keysInResult = new Set();\r\n        if (result.length !== 0) {\r\n            for (const { fbase_key: key, value } of result) {\r\n                keysInResult.add(key);\r\n                if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {\r\n                    this.notifyListeners(key, value);\r\n                    keys.push(key);\r\n                }\r\n            }\r\n        }\r\n        for (const localKey of Object.keys(this.localCache)) {\r\n            if (this.localCache[localKey] && !keysInResult.has(localKey)) {\r\n                // Deleted\r\n                this.notifyListeners(localKey, null);\r\n                keys.push(localKey);\r\n            }\r\n        }\r\n        return keys;\r\n    }\r\n    notifyListeners(key, newValue) {\r\n        this.localCache[key] = newValue;\r\n        const listeners = this.listeners[key];\r\n        if (listeners) {\r\n            for (const listener of Array.from(listeners)) {\r\n                listener(newValue);\r\n            }\r\n        }\r\n    }\r\n    startPolling() {\r\n        this.stopPolling();\r\n        this.pollTimer = setInterval(async () => this._poll(), _POLLING_INTERVAL_MS);\r\n    }\r\n    stopPolling() {\r\n        if (this.pollTimer) {\r\n            clearInterval(this.pollTimer);\r\n            this.pollTimer = null;\r\n        }\r\n    }\r\n    _addListener(key, listener) {\r\n        if (Object.keys(this.listeners).length === 0) {\r\n            this.startPolling();\r\n        }\r\n        if (!this.listeners[key]) {\r\n            this.listeners[key] = new Set();\r\n            // Populate the cache to avoid spuriously triggering on first poll.\r\n            void this._get(key); // This can happen in the background async and we can return immediately.\r\n        }\r\n        this.listeners[key].add(listener);\r\n    }\r\n    _removeListener(key, listener) {\r\n        if (this.listeners[key]) {\r\n            this.listeners[key].delete(listener);\r\n            if (this.listeners[key].size === 0) {\r\n                delete this.listeners[key];\r\n            }\r\n        }\r\n        if (Object.keys(this.listeners).length === 0) {\r\n            this.stopPolling();\r\n        }\r\n    }\r\n}\r\nIndexedDBLocalPersistence.type = 'LOCAL';\r\n/**\r\n * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB`\r\n * for the underlying storage.\r\n *\r\n * @public\r\n */\r\nconst indexedDBLocalPersistence = IndexedDBLocalPersistence;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction startSignInPhoneMfa(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:start\" /* Endpoint.START_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\r\n}\r\nfunction finalizeSignInPhoneMfa(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:finalize\" /* Endpoint.FINALIZE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\r\n}\r\nfunction finalizeSignInTotpMfa(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:finalize\" /* Endpoint.FINALIZE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst _SOLVE_TIME_MS = 500;\r\nconst _EXPIRATION_TIME_MS = 60000;\r\nconst _WIDGET_ID_START = 1000000000000;\r\nclass MockReCaptcha {\r\n    constructor(auth) {\r\n        this.auth = auth;\r\n        this.counter = _WIDGET_ID_START;\r\n        this._widgets = new Map();\r\n    }\r\n    render(container, parameters) {\r\n        const id = this.counter;\r\n        this._widgets.set(id, new MockWidget(container, this.auth.name, parameters || {}));\r\n        this.counter++;\r\n        return id;\r\n    }\r\n    reset(optWidgetId) {\r\n        var _a;\r\n        const id = optWidgetId || _WIDGET_ID_START;\r\n        void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.delete());\r\n        this._widgets.delete(id);\r\n    }\r\n    getResponse(optWidgetId) {\r\n        var _a;\r\n        const id = optWidgetId || _WIDGET_ID_START;\r\n        return ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.getResponse()) || '';\r\n    }\r\n    async execute(optWidgetId) {\r\n        var _a;\r\n        const id = optWidgetId || _WIDGET_ID_START;\r\n        void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.execute());\r\n        return '';\r\n    }\r\n}\r\nclass MockWidget {\r\n    constructor(containerOrId, appName, params) {\r\n        this.params = params;\r\n        this.timerId = null;\r\n        this.deleted = false;\r\n        this.responseToken = null;\r\n        this.clickHandler = () => {\r\n            this.execute();\r\n        };\r\n        const container = typeof containerOrId === 'string'\r\n            ? document.getElementById(containerOrId)\r\n            : containerOrId;\r\n        _assert(container, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */, { appName });\r\n        this.container = container;\r\n        this.isVisible = this.params.size !== 'invisible';\r\n        if (this.isVisible) {\r\n            this.execute();\r\n        }\r\n        else {\r\n            this.container.addEventListener('click', this.clickHandler);\r\n        }\r\n    }\r\n    getResponse() {\r\n        this.checkIfDeleted();\r\n        return this.responseToken;\r\n    }\r\n    delete() {\r\n        this.checkIfDeleted();\r\n        this.deleted = true;\r\n        if (this.timerId) {\r\n            clearTimeout(this.timerId);\r\n            this.timerId = null;\r\n        }\r\n        this.container.removeEventListener('click', this.clickHandler);\r\n    }\r\n    execute() {\r\n        this.checkIfDeleted();\r\n        if (this.timerId) {\r\n            return;\r\n        }\r\n        this.timerId = window.setTimeout(() => {\r\n            this.responseToken = generateRandomAlphaNumericString(50);\r\n            const { callback, 'expired-callback': expiredCallback } = this.params;\r\n            if (callback) {\r\n                try {\r\n                    callback(this.responseToken);\r\n                }\r\n                catch (e) { }\r\n            }\r\n            this.timerId = window.setTimeout(() => {\r\n                this.timerId = null;\r\n                this.responseToken = null;\r\n                if (expiredCallback) {\r\n                    try {\r\n                        expiredCallback();\r\n                    }\r\n                    catch (e) { }\r\n                }\r\n                if (this.isVisible) {\r\n                    this.execute();\r\n                }\r\n            }, _EXPIRATION_TIME_MS);\r\n        }, _SOLVE_TIME_MS);\r\n    }\r\n    checkIfDeleted() {\r\n        if (this.deleted) {\r\n            throw new Error('reCAPTCHA mock was already deleted!');\r\n        }\r\n    }\r\n}\r\nfunction generateRandomAlphaNumericString(len) {\r\n    const chars = [];\r\n    const allowedChars = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    for (let i = 0; i < len; i++) {\r\n        chars.push(allowedChars.charAt(Math.floor(Math.random() * allowedChars.length)));\r\n    }\r\n    return chars.join('');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// ReCaptcha will load using the same callback, so the callback function needs\r\n// to be kept around\r\nconst _JSLOAD_CALLBACK = _generateCallbackName('rcb');\r\nconst NETWORK_TIMEOUT_DELAY = new Delay(30000, 60000);\r\n/**\r\n * Loader for the GReCaptcha library. There should only ever be one of this.\r\n */\r\nclass ReCaptchaLoaderImpl {\r\n    constructor() {\r\n        var _a;\r\n        this.hostLanguage = '';\r\n        this.counter = 0;\r\n        /**\r\n         * Check for `render()` method. `window.grecaptcha` will exist if the Enterprise\r\n         * version of the ReCAPTCHA script was loaded by someone else (e.g. App Check) but\r\n         * `window.grecaptcha.render()` will not. Another load will add it.\r\n         */\r\n        this.librarySeparatelyLoaded = !!((_a = _window().grecaptcha) === null || _a === void 0 ? void 0 : _a.render);\r\n    }\r\n    load(auth, hl = '') {\r\n        _assert(isHostLanguageValid(hl), auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        if (this.shouldResolveImmediately(hl) && isV2(_window().grecaptcha)) {\r\n            return Promise.resolve(_window().grecaptcha);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            const networkTimeout = _window().setTimeout(() => {\r\n                reject(_createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\r\n            }, NETWORK_TIMEOUT_DELAY.get());\r\n            _window()[_JSLOAD_CALLBACK] = () => {\r\n                _window().clearTimeout(networkTimeout);\r\n                delete _window()[_JSLOAD_CALLBACK];\r\n                const recaptcha = _window().grecaptcha;\r\n                if (!recaptcha || !isV2(recaptcha)) {\r\n                    reject(_createError(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */));\r\n                    return;\r\n                }\r\n                // Wrap the greptcha render function so that we know if the developer has\r\n                // called it separately\r\n                const render = recaptcha.render;\r\n                recaptcha.render = (container, params) => {\r\n                    const widgetId = render(container, params);\r\n                    this.counter++;\r\n                    return widgetId;\r\n                };\r\n                this.hostLanguage = hl;\r\n                resolve(recaptcha);\r\n            };\r\n            const url = `${_recaptchaV2ScriptUrl()}?${util.querystring({\r\n                onload: _JSLOAD_CALLBACK,\r\n                render: 'explicit',\r\n                hl\r\n            })}`;\r\n            _loadJS(url).catch(() => {\r\n                clearTimeout(networkTimeout);\r\n                reject(_createError(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */));\r\n            });\r\n        });\r\n    }\r\n    clearedOneInstance() {\r\n        this.counter--;\r\n    }\r\n    shouldResolveImmediately(hl) {\r\n        var _a;\r\n        // We can resolve immediately if:\r\n        //   • grecaptcha is already defined AND (\r\n        //     1. the requested language codes are the same OR\r\n        //     2. there exists already a ReCaptcha on the page\r\n        //     3. the library was already loaded by the app\r\n        // In cases (2) and (3), we _can't_ reload as it would break the recaptchas\r\n        // that are already in the page\r\n        return (!!((_a = _window().grecaptcha) === null || _a === void 0 ? void 0 : _a.render) &&\r\n            (hl === this.hostLanguage ||\r\n                this.counter > 0 ||\r\n                this.librarySeparatelyLoaded));\r\n    }\r\n}\r\nfunction isHostLanguageValid(hl) {\r\n    return hl.length <= 6 && /^\\s*[a-zA-Z0-9\\-]*\\s*$/.test(hl);\r\n}\r\nclass MockReCaptchaLoaderImpl {\r\n    async load(auth) {\r\n        return new MockReCaptcha(auth);\r\n    }\r\n    clearedOneInstance() { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECAPTCHA_VERIFIER_TYPE = 'recaptcha';\r\nconst DEFAULT_PARAMS = {\r\n    theme: 'light',\r\n    type: 'image'\r\n};\r\n/**\r\n * An {@link https://www.google.com/recaptcha/ | reCAPTCHA}-based application verifier.\r\n *\r\n * @remarks\r\n * `RecaptchaVerifier` does not work in a Node.js environment.\r\n *\r\n * @public\r\n */\r\nclass RecaptchaVerifier {\r\n    /**\r\n     * @param authExtern - The corresponding Firebase {@link Auth} instance.\r\n     *\r\n     * @param containerOrId - The reCAPTCHA container parameter.\r\n     *\r\n     * @remarks\r\n     * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a\r\n     * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to\r\n     * an element ID. The corresponding element must also must be in the DOM at the time of\r\n     * initialization.\r\n     *\r\n     * @param parameters - The optional reCAPTCHA parameters.\r\n     *\r\n     * @remarks\r\n     * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for\r\n     * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will\r\n     * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value\r\n     * 'invisible'.\r\n     */\r\n    constructor(authExtern, containerOrId, parameters = Object.assign({}, DEFAULT_PARAMS)) {\r\n        this.parameters = parameters;\r\n        /**\r\n         * The application verifier type.\r\n         *\r\n         * @remarks\r\n         * For a reCAPTCHA verifier, this is 'recaptcha'.\r\n         */\r\n        this.type = RECAPTCHA_VERIFIER_TYPE;\r\n        this.destroyed = false;\r\n        this.widgetId = null;\r\n        this.tokenChangeListeners = new Set();\r\n        this.renderPromise = null;\r\n        this.recaptcha = null;\r\n        this.auth = _castAuth(authExtern);\r\n        this.isInvisible = this.parameters.size === 'invisible';\r\n        _assert(typeof document !== 'undefined', this.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\r\n        const container = typeof containerOrId === 'string'\r\n            ? document.getElementById(containerOrId)\r\n            : containerOrId;\r\n        _assert(container, this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        this.container = container;\r\n        this.parameters.callback = this.makeTokenCallback(this.parameters.callback);\r\n        this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting\r\n            ? new MockReCaptchaLoaderImpl()\r\n            : new ReCaptchaLoaderImpl();\r\n        this.validateStartingState();\r\n        // TODO: Figure out if sdk version is needed\r\n    }\r\n    /**\r\n     * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.\r\n     *\r\n     * @returns A Promise for the reCAPTCHA token.\r\n     */\r\n    async verify() {\r\n        this.assertNotDestroyed();\r\n        const id = await this.render();\r\n        const recaptcha = this.getAssertedRecaptcha();\r\n        const response = recaptcha.getResponse(id);\r\n        if (response) {\r\n            return response;\r\n        }\r\n        return new Promise(resolve => {\r\n            const tokenChange = (token) => {\r\n                if (!token) {\r\n                    return; // Ignore token expirations.\r\n                }\r\n                this.tokenChangeListeners.delete(tokenChange);\r\n                resolve(token);\r\n            };\r\n            this.tokenChangeListeners.add(tokenChange);\r\n            if (this.isInvisible) {\r\n                recaptcha.execute(id);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Renders the reCAPTCHA widget on the page.\r\n     *\r\n     * @returns A Promise that resolves with the reCAPTCHA widget ID.\r\n     */\r\n    render() {\r\n        try {\r\n            this.assertNotDestroyed();\r\n        }\r\n        catch (e) {\r\n            // This method returns a promise. Since it's not async (we want to return the\r\n            // _same_ promise if rendering is still occurring), the API surface should\r\n            // reject with the error rather than just throw\r\n            return Promise.reject(e);\r\n        }\r\n        if (this.renderPromise) {\r\n            return this.renderPromise;\r\n        }\r\n        this.renderPromise = this.makeRenderPromise().catch(e => {\r\n            this.renderPromise = null;\r\n            throw e;\r\n        });\r\n        return this.renderPromise;\r\n    }\r\n    /** @internal */\r\n    _reset() {\r\n        this.assertNotDestroyed();\r\n        if (this.widgetId !== null) {\r\n            this.getAssertedRecaptcha().reset(this.widgetId);\r\n        }\r\n    }\r\n    /**\r\n     * Clears the reCAPTCHA widget from the page and destroys the instance.\r\n     */\r\n    clear() {\r\n        this.assertNotDestroyed();\r\n        this.destroyed = true;\r\n        this._recaptchaLoader.clearedOneInstance();\r\n        if (!this.isInvisible) {\r\n            this.container.childNodes.forEach(node => {\r\n                this.container.removeChild(node);\r\n            });\r\n        }\r\n    }\r\n    validateStartingState() {\r\n        _assert(!this.parameters.sitekey, this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        _assert(this.isInvisible || !this.container.hasChildNodes(), this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        _assert(typeof document !== 'undefined', this.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\r\n    }\r\n    makeTokenCallback(existing) {\r\n        return token => {\r\n            this.tokenChangeListeners.forEach(listener => listener(token));\r\n            if (typeof existing === 'function') {\r\n                existing(token);\r\n            }\r\n            else if (typeof existing === 'string') {\r\n                const globalFunc = _window()[existing];\r\n                if (typeof globalFunc === 'function') {\r\n                    globalFunc(token);\r\n                }\r\n            }\r\n        };\r\n    }\r\n    assertNotDestroyed() {\r\n        _assert(!this.destroyed, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n    }\r\n    async makeRenderPromise() {\r\n        await this.init();\r\n        if (!this.widgetId) {\r\n            let container = this.container;\r\n            if (!this.isInvisible) {\r\n                const guaranteedEmpty = document.createElement('div');\r\n                container.appendChild(guaranteedEmpty);\r\n                container = guaranteedEmpty;\r\n            }\r\n            this.widgetId = this.getAssertedRecaptcha().render(container, this.parameters);\r\n        }\r\n        return this.widgetId;\r\n    }\r\n    async init() {\r\n        _assert(_isHttpOrHttps() && !_isWorker(), this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        await domReady();\r\n        this.recaptcha = await this._recaptchaLoader.load(this.auth, this.auth.languageCode || undefined);\r\n        const siteKey = await getRecaptchaParams(this.auth);\r\n        _assert(siteKey, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        this.parameters.sitekey = siteKey;\r\n    }\r\n    getAssertedRecaptcha() {\r\n        _assert(this.recaptcha, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        return this.recaptcha;\r\n    }\r\n}\r\nfunction domReady() {\r\n    let resolver = null;\r\n    return new Promise(resolve => {\r\n        if (document.readyState === 'complete') {\r\n            resolve();\r\n            return;\r\n        }\r\n        // Document not ready, wait for load before resolving.\r\n        // Save resolver, so we can remove listener in case it was externally\r\n        // cancelled.\r\n        resolver = () => resolve();\r\n        window.addEventListener('load', resolver);\r\n    }).catch(e => {\r\n        if (resolver) {\r\n            window.removeEventListener('load', resolver);\r\n        }\r\n        throw e;\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ConfirmationResultImpl {\r\n    constructor(verificationId, onConfirmation) {\r\n        this.verificationId = verificationId;\r\n        this.onConfirmation = onConfirmation;\r\n    }\r\n    confirm(verificationCode) {\r\n        const authCredential = PhoneAuthCredential._fromVerification(this.verificationId, verificationCode);\r\n        return this.onConfirmation(authCredential);\r\n    }\r\n}\r\n/**\r\n * Asynchronously signs in using a phone number.\r\n *\r\n * @remarks\r\n * This method sends a code via SMS to the given\r\n * phone number, and returns a {@link ConfirmationResult}. After the user\r\n * provides the code sent to their phone, call {@link ConfirmationResult.confirm}\r\n * with the code to sign the user in.\r\n *\r\n * For abuse prevention, this method also requires a {@link ApplicationVerifier}.\r\n * This SDK includes a reCAPTCHA-based implementation, {@link RecaptchaVerifier}.\r\n * This function can work on other platforms that do not support the\r\n * {@link RecaptchaVerifier} (like React Native), but you need to use a\r\n * third-party {@link ApplicationVerifier} implementation.\r\n *\r\n * This method does not work in a Node.js environment.\r\n *\r\n * @example\r\n * ```javascript\r\n * // 'recaptcha-container' is the ID of an element in the DOM.\r\n * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');\r\n * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\r\n * // Obtain a verificationCode from the user.\r\n * const credential = await confirmationResult.confirm(verificationCode);\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\r\n * @param appVerifier - The {@link ApplicationVerifier}.\r\n *\r\n * @public\r\n */\r\nasync function signInWithPhoneNumber(auth, phoneNumber, appVerifier) {\r\n    const authInternal = _castAuth(auth);\r\n    const verificationId = await _verifyPhoneNumber(authInternal, phoneNumber, util.getModularInstance(appVerifier));\r\n    return new ConfirmationResultImpl(verificationId, cred => signInWithCredential(authInternal, cred));\r\n}\r\n/**\r\n * Links the user account with the given phone number.\r\n *\r\n * @remarks\r\n * This method does not work in a Node.js environment.\r\n *\r\n * @param user - The user.\r\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\r\n * @param appVerifier - The {@link ApplicationVerifier}.\r\n *\r\n * @public\r\n */\r\nasync function linkWithPhoneNumber(user, phoneNumber, appVerifier) {\r\n    const userInternal = util.getModularInstance(user);\r\n    await _assertLinkedStatus(false, userInternal, \"phone\" /* ProviderId.PHONE */);\r\n    const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, util.getModularInstance(appVerifier));\r\n    return new ConfirmationResultImpl(verificationId, cred => linkWithCredential(userInternal, cred));\r\n}\r\n/**\r\n * Re-authenticates a user using a fresh phone credential.\r\n *\r\n * @remarks\r\n * Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.\r\n *\r\n * This method does not work in a Node.js environment.\r\n *\r\n * @param user - The user.\r\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\r\n * @param appVerifier - The {@link ApplicationVerifier}.\r\n *\r\n * @public\r\n */\r\nasync function reauthenticateWithPhoneNumber(user, phoneNumber, appVerifier) {\r\n    const userInternal = util.getModularInstance(user);\r\n    const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, util.getModularInstance(appVerifier));\r\n    return new ConfirmationResultImpl(verificationId, cred => reauthenticateWithCredential(userInternal, cred));\r\n}\r\n/**\r\n * Returns a verification ID to be used in conjunction with the SMS code that is sent.\r\n *\r\n */\r\nasync function _verifyPhoneNumber(auth, options, verifier) {\r\n    var _a;\r\n    const recaptchaToken = await verifier.verify();\r\n    try {\r\n        _assert(typeof recaptchaToken === 'string', auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        _assert(verifier.type === RECAPTCHA_VERIFIER_TYPE, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        let phoneInfoOptions;\r\n        if (typeof options === 'string') {\r\n            phoneInfoOptions = {\r\n                phoneNumber: options\r\n            };\r\n        }\r\n        else {\r\n            phoneInfoOptions = options;\r\n        }\r\n        if ('session' in phoneInfoOptions) {\r\n            const session = phoneInfoOptions.session;\r\n            if ('phoneNumber' in phoneInfoOptions) {\r\n                _assert(session.type === \"enroll\" /* MultiFactorSessionType.ENROLL */, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n                const response = await startEnrollPhoneMfa(auth, {\r\n                    idToken: session.credential,\r\n                    phoneEnrollmentInfo: {\r\n                        phoneNumber: phoneInfoOptions.phoneNumber,\r\n                        recaptchaToken\r\n                    }\r\n                });\r\n                return response.phoneSessionInfo.sessionInfo;\r\n            }\r\n            else {\r\n                _assert(session.type === \"signin\" /* MultiFactorSessionType.SIGN_IN */, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n                const mfaEnrollmentId = ((_a = phoneInfoOptions.multiFactorHint) === null || _a === void 0 ? void 0 : _a.uid) ||\r\n                    phoneInfoOptions.multiFactorUid;\r\n                _assert(mfaEnrollmentId, auth, \"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */);\r\n                const response = await startSignInPhoneMfa(auth, {\r\n                    mfaPendingCredential: session.credential,\r\n                    mfaEnrollmentId,\r\n                    phoneSignInInfo: {\r\n                        recaptchaToken\r\n                    }\r\n                });\r\n                return response.phoneResponseInfo.sessionInfo;\r\n            }\r\n        }\r\n        else {\r\n            const { sessionInfo } = await sendPhoneVerificationCode(auth, {\r\n                phoneNumber: phoneInfoOptions.phoneNumber,\r\n                recaptchaToken\r\n            });\r\n            return sessionInfo;\r\n        }\r\n    }\r\n    finally {\r\n        verifier._reset();\r\n    }\r\n}\r\n/**\r\n * Updates the user's phone number.\r\n *\r\n * @remarks\r\n * This method does not work in a Node.js environment.\r\n *\r\n * @example\r\n * ```\r\n * // 'recaptcha-container' is the ID of an element in the DOM.\r\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\r\n * const provider = new PhoneAuthProvider(auth);\r\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\r\n * // Obtain the verificationCode from the user.\r\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\r\n * await updatePhoneNumber(user, phoneCredential);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param credential - A credential authenticating the new phone number.\r\n *\r\n * @public\r\n */\r\nasync function updatePhoneNumber(user, credential) {\r\n    await _link$1(util.getModularInstance(user), credential);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for generating an {@link PhoneAuthCredential}.\r\n *\r\n * @remarks\r\n * `PhoneAuthProvider` does not work in a Node.js environment.\r\n *\r\n * @example\r\n * ```javascript\r\n * // 'recaptcha-container' is the ID of an element in the DOM.\r\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\r\n * const provider = new PhoneAuthProvider(auth);\r\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\r\n * // Obtain the verificationCode from the user.\r\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\r\n * const userCredential = await signInWithCredential(auth, phoneCredential);\r\n * ```\r\n *\r\n * @public\r\n */\r\nclass PhoneAuthProvider {\r\n    /**\r\n     * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.\r\n     *\r\n     */\r\n    constructor(auth) {\r\n        /** Always set to {@link ProviderId}.PHONE. */\r\n        this.providerId = PhoneAuthProvider.PROVIDER_ID;\r\n        this.auth = _castAuth(auth);\r\n    }\r\n    /**\r\n     *\r\n     * Starts a phone number authentication flow by sending a verification code to the given phone\r\n     * number.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * const provider = new PhoneAuthProvider(auth);\r\n     * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\r\n     * // Obtain verificationCode from the user.\r\n     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\r\n     * const userCredential = await signInWithCredential(auth, authCredential);\r\n     * ```\r\n     *\r\n     * @example\r\n     * An alternative flow is provided using the `signInWithPhoneNumber` method.\r\n     * ```javascript\r\n     * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\r\n     * // Obtain verificationCode from the user.\r\n     * const userCredential = confirmationResult.confirm(verificationCode);\r\n     * ```\r\n     *\r\n     * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in\r\n     * E.164 format (e.g. +16505550101).\r\n     * @param applicationVerifier - For abuse prevention, this method also requires a\r\n     * {@link ApplicationVerifier}. This SDK includes a reCAPTCHA-based implementation,\r\n     * {@link RecaptchaVerifier}.\r\n     *\r\n     * @returns A Promise for a verification ID that can be passed to\r\n     * {@link PhoneAuthProvider.credential} to identify this flow..\r\n     */\r\n    verifyPhoneNumber(phoneOptions, applicationVerifier) {\r\n        return _verifyPhoneNumber(this.auth, phoneOptions, util.getModularInstance(applicationVerifier));\r\n    }\r\n    /**\r\n     * Creates a phone auth credential, given the verification ID from\r\n     * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's\r\n     * mobile device.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * const provider = new PhoneAuthProvider(auth);\r\n     * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\r\n     * // Obtain verificationCode from the user.\r\n     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\r\n     * const userCredential = signInWithCredential(auth, authCredential);\r\n     * ```\r\n     *\r\n     * @example\r\n     * An alternative flow is provided using the `signInWithPhoneNumber` method.\r\n     * ```javascript\r\n     * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\r\n     * // Obtain verificationCode from the user.\r\n     * const userCredential = await confirmationResult.confirm(verificationCode);\r\n     * ```\r\n     *\r\n     * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.\r\n     * @param verificationCode - The verification code sent to the user's mobile device.\r\n     *\r\n     * @returns The auth provider credential.\r\n     */\r\n    static credential(verificationId, verificationCode) {\r\n        return PhoneAuthCredential._fromVerification(verificationId, verificationCode);\r\n    }\r\n    /**\r\n     * Generates an {@link AuthCredential} from a {@link UserCredential}.\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromResult(userCredential) {\r\n        const credential = userCredential;\r\n        return PhoneAuthProvider.credentialFromTaggedObject(credential);\r\n    }\r\n    /**\r\n     * Returns an {@link AuthCredential} when passed an error.\r\n     *\r\n     * @remarks\r\n     *\r\n     * This method works for errors like\r\n     * `auth/account-exists-with-different-credentials`. This is useful for\r\n     * recovering when attempting to set a user's phone number but the number\r\n     * in question is already tied to another account. For example, the following\r\n     * code tries to update the current user's phone number, and if that\r\n     * fails, links the user with the account associated with that number:\r\n     *\r\n     * ```js\r\n     * const provider = new PhoneAuthProvider(auth);\r\n     * const verificationId = await provider.verifyPhoneNumber(number, verifier);\r\n     * try {\r\n     *   const code = ''; // Prompt the user for the verification code\r\n     *   await updatePhoneNumber(\r\n     *       auth.currentUser,\r\n     *       PhoneAuthProvider.credential(verificationId, code));\r\n     * } catch (e) {\r\n     *   if ((e as FirebaseError)?.code === 'auth/account-exists-with-different-credential') {\r\n     *     const cred = PhoneAuthProvider.credentialFromError(e);\r\n     *     await linkWithCredential(auth.currentUser, cred);\r\n     *   }\r\n     * }\r\n     *\r\n     * // At this point, auth.currentUser.phoneNumber === number.\r\n     * ```\r\n     *\r\n     * @param error - The error to generate a credential from.\r\n     */\r\n    static credentialFromError(error) {\r\n        return PhoneAuthProvider.credentialFromTaggedObject((error.customData || {}));\r\n    }\r\n    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\r\n        if (!tokenResponse) {\r\n            return null;\r\n        }\r\n        const { phoneNumber, temporaryProof } = tokenResponse;\r\n        if (phoneNumber && temporaryProof) {\r\n            return PhoneAuthCredential._fromTokenResponse(phoneNumber, temporaryProof);\r\n        }\r\n        return null;\r\n    }\r\n}\r\n/** Always set to {@link ProviderId}.PHONE. */\r\nPhoneAuthProvider.PROVIDER_ID = \"phone\" /* ProviderId.PHONE */;\r\n/** Always set to {@link SignInMethod}.PHONE. */\r\nPhoneAuthProvider.PHONE_SIGN_IN_METHOD = \"phone\" /* SignInMethod.PHONE */;\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Chooses a popup/redirect resolver to use. This prefers the override (which\r\n * is directly passed in), and falls back to the property set on the auth\r\n * object. If neither are available, this function errors w/ an argument error.\r\n */\r\nfunction _withDefaultResolver(auth, resolverOverride) {\r\n    if (resolverOverride) {\r\n        return _getInstance(resolverOverride);\r\n    }\r\n    _assert(auth._popupRedirectResolver, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n    return auth._popupRedirectResolver;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass IdpCredential extends AuthCredential {\r\n    constructor(params) {\r\n        super(\"custom\" /* ProviderId.CUSTOM */, \"custom\" /* ProviderId.CUSTOM */);\r\n        this.params = params;\r\n    }\r\n    _getIdTokenResponse(auth) {\r\n        return signInWithIdp(auth, this._buildIdpRequest());\r\n    }\r\n    _linkToIdToken(auth, idToken) {\r\n        return signInWithIdp(auth, this._buildIdpRequest(idToken));\r\n    }\r\n    _getReauthenticationResolver(auth) {\r\n        return signInWithIdp(auth, this._buildIdpRequest());\r\n    }\r\n    _buildIdpRequest(idToken) {\r\n        const request = {\r\n            requestUri: this.params.requestUri,\r\n            sessionId: this.params.sessionId,\r\n            postBody: this.params.postBody,\r\n            tenantId: this.params.tenantId,\r\n            pendingToken: this.params.pendingToken,\r\n            returnSecureToken: true,\r\n            returnIdpCredential: true\r\n        };\r\n        if (idToken) {\r\n            request.idToken = idToken;\r\n        }\r\n        return request;\r\n    }\r\n}\r\nfunction _signIn(params) {\r\n    return _signInWithCredential(params.auth, new IdpCredential(params), params.bypassAuthState);\r\n}\r\nfunction _reauth(params) {\r\n    const { auth, user } = params;\r\n    _assert(user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n    return _reauthenticate(user, new IdpCredential(params), params.bypassAuthState);\r\n}\r\nasync function _link(params) {\r\n    const { auth, user } = params;\r\n    _assert(user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n    return _link$1(user, new IdpCredential(params), params.bypassAuthState);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Popup event manager. Handles the popup's entire lifecycle; listens to auth\r\n * events\r\n */\r\nclass AbstractPopupRedirectOperation {\r\n    constructor(auth, filter, resolver, user, bypassAuthState = false) {\r\n        this.auth = auth;\r\n        this.resolver = resolver;\r\n        this.user = user;\r\n        this.bypassAuthState = bypassAuthState;\r\n        this.pendingPromise = null;\r\n        this.eventManager = null;\r\n        this.filter = Array.isArray(filter) ? filter : [filter];\r\n    }\r\n    execute() {\r\n        return new Promise(async (resolve, reject) => {\r\n            this.pendingPromise = { resolve, reject };\r\n            try {\r\n                this.eventManager = await this.resolver._initialize(this.auth);\r\n                await this.onExecution();\r\n                this.eventManager.registerConsumer(this);\r\n            }\r\n            catch (e) {\r\n                this.reject(e);\r\n            }\r\n        });\r\n    }\r\n    async onAuthEvent(event) {\r\n        const { urlResponse, sessionId, postBody, tenantId, error, type } = event;\r\n        if (error) {\r\n            this.reject(error);\r\n            return;\r\n        }\r\n        const params = {\r\n            auth: this.auth,\r\n            requestUri: urlResponse,\r\n            sessionId: sessionId,\r\n            tenantId: tenantId || undefined,\r\n            postBody: postBody || undefined,\r\n            user: this.user,\r\n            bypassAuthState: this.bypassAuthState\r\n        };\r\n        try {\r\n            this.resolve(await this.getIdpTask(type)(params));\r\n        }\r\n        catch (e) {\r\n            this.reject(e);\r\n        }\r\n    }\r\n    onError(error) {\r\n        this.reject(error);\r\n    }\r\n    getIdpTask(type) {\r\n        switch (type) {\r\n            case \"signInViaPopup\" /* AuthEventType.SIGN_IN_VIA_POPUP */:\r\n            case \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */:\r\n                return _signIn;\r\n            case \"linkViaPopup\" /* AuthEventType.LINK_VIA_POPUP */:\r\n            case \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */:\r\n                return _link;\r\n            case \"reauthViaPopup\" /* AuthEventType.REAUTH_VIA_POPUP */:\r\n            case \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */:\r\n                return _reauth;\r\n            default:\r\n                _fail(this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        }\r\n    }\r\n    resolve(cred) {\r\n        debugAssert(this.pendingPromise, 'Pending promise was never set');\r\n        this.pendingPromise.resolve(cred);\r\n        this.unregisterAndCleanUp();\r\n    }\r\n    reject(error) {\r\n        debugAssert(this.pendingPromise, 'Pending promise was never set');\r\n        this.pendingPromise.reject(error);\r\n        this.unregisterAndCleanUp();\r\n    }\r\n    unregisterAndCleanUp() {\r\n        if (this.eventManager) {\r\n            this.eventManager.unregisterConsumer(this);\r\n        }\r\n        this.pendingPromise = null;\r\n        this.cleanUp();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2000, 10000);\r\n/**\r\n * Authenticates a Firebase client using a popup-based OAuth authentication flow.\r\n *\r\n * @remarks\r\n * If succeeds, returns the signed in user along with the provider's credential. If sign in was\r\n * unsuccessful, returns an error object containing additional information about the error.\r\n *\r\n * This method does not work in a Node.js environment.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new FacebookAuthProvider();\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Facebook Access Token.\r\n * const credential = provider.credentialFromResult(auth, result);\r\n * const token = credential.accessToken;\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\r\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n * @public\r\n */\r\nasync function signInWithPopup(auth, provider, resolver) {\r\n    const authInternal = _castAuth(auth);\r\n    _assertInstanceOf(auth, provider, FederatedAuthProvider);\r\n    const resolverInternal = _withDefaultResolver(authInternal, resolver);\r\n    const action = new PopupOperation(authInternal, \"signInViaPopup\" /* AuthEventType.SIGN_IN_VIA_POPUP */, provider, resolverInternal);\r\n    return action.executeNotNull();\r\n}\r\n/**\r\n * Reauthenticates the current user with the specified {@link OAuthProvider} using a pop-up based\r\n * OAuth flow.\r\n *\r\n * @remarks\r\n * If the reauthentication is successful, the returned result will contain the user and the\r\n * provider's credential.\r\n *\r\n * This method does not work in a Node.js environment.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new FacebookAuthProvider();\r\n * const result = await signInWithPopup(auth, provider);\r\n * // Reauthenticate using a popup.\r\n * await reauthenticateWithPopup(result.user, provider);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\r\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n * @public\r\n */\r\nasync function reauthenticateWithPopup(user, provider, resolver) {\r\n    const userInternal = util.getModularInstance(user);\r\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\r\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\r\n    const action = new PopupOperation(userInternal.auth, \"reauthViaPopup\" /* AuthEventType.REAUTH_VIA_POPUP */, provider, resolverInternal, userInternal);\r\n    return action.executeNotNull();\r\n}\r\n/**\r\n * Links the authenticated provider to the user account using a pop-up based OAuth flow.\r\n *\r\n * @remarks\r\n * If the linking is successful, the returned result will contain the user and the provider's credential.\r\n *\r\n * This method does not work in a Node.js environment.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using some other provider.\r\n * const result = await signInWithEmailAndPassword(auth, email, password);\r\n * // Link using a popup.\r\n * const provider = new FacebookAuthProvider();\r\n * await linkWithPopup(result.user, provider);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\r\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n * @public\r\n */\r\nasync function linkWithPopup(user, provider, resolver) {\r\n    const userInternal = util.getModularInstance(user);\r\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\r\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\r\n    const action = new PopupOperation(userInternal.auth, \"linkViaPopup\" /* AuthEventType.LINK_VIA_POPUP */, provider, resolverInternal, userInternal);\r\n    return action.executeNotNull();\r\n}\r\n/**\r\n * Popup event manager. Handles the popup's entire lifecycle; listens to auth\r\n * events\r\n *\r\n */\r\nclass PopupOperation extends AbstractPopupRedirectOperation {\r\n    constructor(auth, filter, provider, resolver, user) {\r\n        super(auth, filter, resolver, user);\r\n        this.provider = provider;\r\n        this.authWindow = null;\r\n        this.pollId = null;\r\n        if (PopupOperation.currentPopupAction) {\r\n            PopupOperation.currentPopupAction.cancel();\r\n        }\r\n        PopupOperation.currentPopupAction = this;\r\n    }\r\n    async executeNotNull() {\r\n        const result = await this.execute();\r\n        _assert(result, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        return result;\r\n    }\r\n    async onExecution() {\r\n        debugAssert(this.filter.length === 1, 'Popup operations only handle one event');\r\n        const eventId = _generateEventId();\r\n        this.authWindow = await this.resolver._openPopup(this.auth, this.provider, this.filter[0], // There's always one, see constructor\r\n        eventId);\r\n        this.authWindow.associatedEvent = eventId;\r\n        // Check for web storage support and origin validation _after_ the popup is\r\n        // loaded. These operations are slow (~1 second or so) Rather than\r\n        // waiting on them before opening the window, optimistically open the popup\r\n        // and check for storage support at the same time. If storage support is\r\n        // not available, this will cause the whole thing to reject properly. It\r\n        // will also close the popup, but since the promise has already rejected,\r\n        // the popup closed by user poll will reject into the void.\r\n        this.resolver._originValidation(this.auth).catch(e => {\r\n            this.reject(e);\r\n        });\r\n        this.resolver._isIframeWebStorageSupported(this.auth, isSupported => {\r\n            if (!isSupported) {\r\n                this.reject(_createError(this.auth, \"web-storage-unsupported\" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */));\r\n            }\r\n        });\r\n        // Handle user closure. Notice this does *not* use await\r\n        this.pollUserCancellation();\r\n    }\r\n    get eventId() {\r\n        var _a;\r\n        return ((_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.associatedEvent) || null;\r\n    }\r\n    cancel() {\r\n        this.reject(_createError(this.auth, \"cancelled-popup-request\" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */));\r\n    }\r\n    cleanUp() {\r\n        if (this.authWindow) {\r\n            this.authWindow.close();\r\n        }\r\n        if (this.pollId) {\r\n            window.clearTimeout(this.pollId);\r\n        }\r\n        this.authWindow = null;\r\n        this.pollId = null;\r\n        PopupOperation.currentPopupAction = null;\r\n    }\r\n    pollUserCancellation() {\r\n        const poll = () => {\r\n            var _a, _b;\r\n            if ((_b = (_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.window) === null || _b === void 0 ? void 0 : _b.closed) {\r\n                // Make sure that there is sufficient time for whatever action to\r\n                // complete. The window could have closed but the sign in network\r\n                // call could still be in flight. This is specifically true for\r\n                // Firefox or if the opener is in an iframe, in which case the oauth\r\n                // helper closes the popup.\r\n                this.pollId = window.setTimeout(() => {\r\n                    this.pollId = null;\r\n                    this.reject(_createError(this.auth, \"popup-closed-by-user\" /* AuthErrorCode.POPUP_CLOSED_BY_USER */));\r\n                }, 8000 /* _Timeout.AUTH_EVENT */);\r\n                return;\r\n            }\r\n            this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());\r\n        };\r\n        poll();\r\n    }\r\n}\r\n// Only one popup is ever shown at once. The lifecycle of the current popup\r\n// can be managed / cancelled by the constructor.\r\nPopupOperation.currentPopupAction = null;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PENDING_REDIRECT_KEY = 'pendingRedirect';\r\n// We only get one redirect outcome for any one auth, so just store it\r\n// in here.\r\nconst redirectOutcomeMap = new Map();\r\nclass RedirectAction extends AbstractPopupRedirectOperation {\r\n    constructor(auth, resolver, bypassAuthState = false) {\r\n        super(auth, [\r\n            \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */,\r\n            \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */,\r\n            \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */,\r\n            \"unknown\" /* AuthEventType.UNKNOWN */\r\n        ], resolver, undefined, bypassAuthState);\r\n        this.eventId = null;\r\n    }\r\n    /**\r\n     * Override the execute function; if we already have a redirect result, then\r\n     * just return it.\r\n     */\r\n    async execute() {\r\n        let readyOutcome = redirectOutcomeMap.get(this.auth._key());\r\n        if (!readyOutcome) {\r\n            try {\r\n                const hasPendingRedirect = await _getAndClearPendingRedirectStatus(this.resolver, this.auth);\r\n                const result = hasPendingRedirect ? await super.execute() : null;\r\n                readyOutcome = () => Promise.resolve(result);\r\n            }\r\n            catch (e) {\r\n                readyOutcome = () => Promise.reject(e);\r\n            }\r\n            redirectOutcomeMap.set(this.auth._key(), readyOutcome);\r\n        }\r\n        // If we're not bypassing auth state, the ready outcome should be set to\r\n        // null.\r\n        if (!this.bypassAuthState) {\r\n            redirectOutcomeMap.set(this.auth._key(), () => Promise.resolve(null));\r\n        }\r\n        return readyOutcome();\r\n    }\r\n    async onAuthEvent(event) {\r\n        if (event.type === \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */) {\r\n            return super.onAuthEvent(event);\r\n        }\r\n        else if (event.type === \"unknown\" /* AuthEventType.UNKNOWN */) {\r\n            // This is a sentinel value indicating there's no pending redirect\r\n            this.resolve(null);\r\n            return;\r\n        }\r\n        if (event.eventId) {\r\n            const user = await this.auth._redirectUserForId(event.eventId);\r\n            if (user) {\r\n                this.user = user;\r\n                return super.onAuthEvent(event);\r\n            }\r\n            else {\r\n                this.resolve(null);\r\n            }\r\n        }\r\n    }\r\n    async onExecution() { }\r\n    cleanUp() { }\r\n}\r\nasync function _getAndClearPendingRedirectStatus(resolver, auth) {\r\n    const key = pendingRedirectKey(auth);\r\n    const persistence = resolverPersistence(resolver);\r\n    if (!(await persistence._isAvailable())) {\r\n        return false;\r\n    }\r\n    const hasPendingRedirect = (await persistence._get(key)) === 'true';\r\n    await persistence._remove(key);\r\n    return hasPendingRedirect;\r\n}\r\nasync function _setPendingRedirectStatus(resolver, auth) {\r\n    return resolverPersistence(resolver)._set(pendingRedirectKey(auth), 'true');\r\n}\r\nfunction _clearRedirectOutcomes() {\r\n    redirectOutcomeMap.clear();\r\n}\r\nfunction _overrideRedirectResult(auth, result) {\r\n    redirectOutcomeMap.set(auth._key(), result);\r\n}\r\nfunction resolverPersistence(resolver) {\r\n    return _getInstance(resolver._redirectPersistence);\r\n}\r\nfunction pendingRedirectKey(auth) {\r\n    return _persistenceKeyName(PENDING_REDIRECT_KEY, auth.config.apiKey, auth.name);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Authenticates a Firebase client using a full-page redirect flow.\r\n *\r\n * @remarks\r\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\r\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\r\n * | best practices} when using {@link signInWithRedirect}.\r\n *\r\n * This method does not work in a Node.js environment.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new FacebookAuthProvider();\r\n * // You can add additional scopes to the provider:\r\n * provider.addScope('user_birthday');\r\n * // Start a sign in process for an unauthenticated user.\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Facebook Access Token.\r\n *   const credential = provider.credentialFromResult(auth, result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * // As this API can be used for sign-in, linking and reauthentication,\r\n * // check the operationType to determine what triggered this redirect\r\n * // operation.\r\n * const operationType = result.operationType;\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\r\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n * @public\r\n */\r\nfunction signInWithRedirect(auth, provider, resolver) {\r\n    return _signInWithRedirect(auth, provider, resolver);\r\n}\r\nasync function _signInWithRedirect(auth, provider, resolver) {\r\n    const authInternal = _castAuth(auth);\r\n    _assertInstanceOf(auth, provider, FederatedAuthProvider);\r\n    // Wait for auth initialization to complete, this will process pending redirects and clear the\r\n    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\r\n    // redirect and creating a PENDING_REDIRECT_KEY entry.\r\n    await authInternal._initializationPromise;\r\n    const resolverInternal = _withDefaultResolver(authInternal, resolver);\r\n    await _setPendingRedirectStatus(resolverInternal, authInternal);\r\n    return resolverInternal._openRedirect(authInternal, provider, \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */);\r\n}\r\n/**\r\n * Reauthenticates the current user with the specified {@link OAuthProvider} using a full-page redirect flow.\r\n * @remarks\r\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\r\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\r\n * | best practices} when using {@link reauthenticateWithRedirect}.\r\n *\r\n * This method does not work in a Node.js environment.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new FacebookAuthProvider();\r\n * const result = await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * // Reauthenticate using a redirect.\r\n * await reauthenticateWithRedirect(result.user, provider);\r\n * // This will again trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\r\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n * @public\r\n */\r\nfunction reauthenticateWithRedirect(user, provider, resolver) {\r\n    return _reauthenticateWithRedirect(user, provider, resolver);\r\n}\r\nasync function _reauthenticateWithRedirect(user, provider, resolver) {\r\n    const userInternal = util.getModularInstance(user);\r\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\r\n    // Wait for auth initialization to complete, this will process pending redirects and clear the\r\n    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\r\n    // redirect and creating a PENDING_REDIRECT_KEY entry.\r\n    await userInternal.auth._initializationPromise;\r\n    // Allow the resolver to error before persisting the redirect user\r\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\r\n    await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\r\n    const eventId = await prepareUserForRedirect(userInternal);\r\n    return resolverInternal._openRedirect(userInternal.auth, provider, \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */, eventId);\r\n}\r\n/**\r\n * Links the {@link OAuthProvider} to the user account using a full-page redirect flow.\r\n * @remarks\r\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\r\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\r\n * | best practices} when using {@link linkWithRedirect}.\r\n *\r\n * This method does not work in a Node.js environment.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using some other provider.\r\n * const result = await signInWithEmailAndPassword(auth, email, password);\r\n * // Link using a redirect.\r\n * const provider = new FacebookAuthProvider();\r\n * await linkWithRedirect(result.user, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\r\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n * @public\r\n */\r\nfunction linkWithRedirect(user, provider, resolver) {\r\n    return _linkWithRedirect(user, provider, resolver);\r\n}\r\nasync function _linkWithRedirect(user, provider, resolver) {\r\n    const userInternal = util.getModularInstance(user);\r\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\r\n    // Wait for auth initialization to complete, this will process pending redirects and clear the\r\n    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\r\n    // redirect and creating a PENDING_REDIRECT_KEY entry.\r\n    await userInternal.auth._initializationPromise;\r\n    // Allow the resolver to error before persisting the redirect user\r\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\r\n    await _assertLinkedStatus(false, userInternal, provider.providerId);\r\n    await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\r\n    const eventId = await prepareUserForRedirect(userInternal);\r\n    return resolverInternal._openRedirect(userInternal.auth, provider, \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */, eventId);\r\n}\r\n/**\r\n * Returns a {@link UserCredential} from the redirect-based sign-in flow.\r\n *\r\n * @remarks\r\n * If sign-in succeeded, returns the signed in user. If sign-in was unsuccessful, fails with an\r\n * error. If no redirect operation was called, returns `null`.\r\n *\r\n * This method does not work in a Node.js environment.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new FacebookAuthProvider();\r\n * // You can add additional scopes to the provider:\r\n * provider.addScope('user_birthday');\r\n * // Start a sign in process for an unauthenticated user.\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Facebook Access Token.\r\n *   const credential = provider.credentialFromResult(auth, result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * // As this API can be used for sign-in, linking and reauthentication,\r\n * // check the operationType to determine what triggered this redirect\r\n * // operation.\r\n * const operationType = result.operationType;\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n * @public\r\n */\r\nasync function getRedirectResult(auth, resolver) {\r\n    await _castAuth(auth)._initializationPromise;\r\n    return _getRedirectResult(auth, resolver, false);\r\n}\r\nasync function _getRedirectResult(auth, resolverExtern, bypassAuthState = false) {\r\n    const authInternal = _castAuth(auth);\r\n    const resolver = _withDefaultResolver(authInternal, resolverExtern);\r\n    const action = new RedirectAction(authInternal, resolver, bypassAuthState);\r\n    const result = await action.execute();\r\n    if (result && !bypassAuthState) {\r\n        delete result.user._redirectEventId;\r\n        await authInternal._persistUserIfCurrent(result.user);\r\n        await authInternal._setRedirectUser(null, resolverExtern);\r\n    }\r\n    return result;\r\n}\r\nasync function prepareUserForRedirect(user) {\r\n    const eventId = _generateEventId(`${user.uid}:::`);\r\n    user._redirectEventId = eventId;\r\n    await user.auth._setRedirectUser(user);\r\n    await user.auth._persistUserIfCurrent(user);\r\n    return eventId;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// The amount of time to store the UIDs of seen events; this is\r\n// set to 10 min by default\r\nconst EVENT_DUPLICATION_CACHE_DURATION_MS = 10 * 60 * 1000;\r\nclass AuthEventManager {\r\n    constructor(auth) {\r\n        this.auth = auth;\r\n        this.cachedEventUids = new Set();\r\n        this.consumers = new Set();\r\n        this.queuedRedirectEvent = null;\r\n        this.hasHandledPotentialRedirect = false;\r\n        this.lastProcessedEventTime = Date.now();\r\n    }\r\n    registerConsumer(authEventConsumer) {\r\n        this.consumers.add(authEventConsumer);\r\n        if (this.queuedRedirectEvent &&\r\n            this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)) {\r\n            this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);\r\n            this.saveEventToCache(this.queuedRedirectEvent);\r\n            this.queuedRedirectEvent = null;\r\n        }\r\n    }\r\n    unregisterConsumer(authEventConsumer) {\r\n        this.consumers.delete(authEventConsumer);\r\n    }\r\n    onEvent(event) {\r\n        // Check if the event has already been handled\r\n        if (this.hasEventBeenHandled(event)) {\r\n            return false;\r\n        }\r\n        let handled = false;\r\n        this.consumers.forEach(consumer => {\r\n            if (this.isEventForConsumer(event, consumer)) {\r\n                handled = true;\r\n                this.sendToConsumer(event, consumer);\r\n                this.saveEventToCache(event);\r\n            }\r\n        });\r\n        if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) {\r\n            // If we've already seen a redirect before, or this is a popup event,\r\n            // bail now\r\n            return handled;\r\n        }\r\n        this.hasHandledPotentialRedirect = true;\r\n        // If the redirect wasn't handled, hang on to it\r\n        if (!handled) {\r\n            this.queuedRedirectEvent = event;\r\n            handled = true;\r\n        }\r\n        return handled;\r\n    }\r\n    sendToConsumer(event, consumer) {\r\n        var _a;\r\n        if (event.error && !isNullRedirectEvent(event)) {\r\n            const code = ((_a = event.error.code) === null || _a === void 0 ? void 0 : _a.split('auth/')[1]) ||\r\n                \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */;\r\n            consumer.onError(_createError(this.auth, code));\r\n        }\r\n        else {\r\n            consumer.onAuthEvent(event);\r\n        }\r\n    }\r\n    isEventForConsumer(event, consumer) {\r\n        const eventIdMatches = consumer.eventId === null ||\r\n            (!!event.eventId && event.eventId === consumer.eventId);\r\n        return consumer.filter.includes(event.type) && eventIdMatches;\r\n    }\r\n    hasEventBeenHandled(event) {\r\n        if (Date.now() - this.lastProcessedEventTime >=\r\n            EVENT_DUPLICATION_CACHE_DURATION_MS) {\r\n            this.cachedEventUids.clear();\r\n        }\r\n        return this.cachedEventUids.has(eventUid(event));\r\n    }\r\n    saveEventToCache(event) {\r\n        this.cachedEventUids.add(eventUid(event));\r\n        this.lastProcessedEventTime = Date.now();\r\n    }\r\n}\r\nfunction eventUid(e) {\r\n    return [e.type, e.eventId, e.sessionId, e.tenantId].filter(v => v).join('-');\r\n}\r\nfunction isNullRedirectEvent({ type, error }) {\r\n    return (type === \"unknown\" /* AuthEventType.UNKNOWN */ &&\r\n        (error === null || error === void 0 ? void 0 : error.code) === `auth/${\"no-auth-event\" /* AuthErrorCode.NO_AUTH_EVENT */}`);\r\n}\r\nfunction isRedirectEvent(event) {\r\n    switch (event.type) {\r\n        case \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */:\r\n        case \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */:\r\n        case \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */:\r\n            return true;\r\n        case \"unknown\" /* AuthEventType.UNKNOWN */:\r\n            return isNullRedirectEvent(event);\r\n        default:\r\n            return false;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function _getProjectConfig(auth, request = {}) {\r\n    return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v1/projects\" /* Endpoint.GET_PROJECT_CONFIG */, request);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst IP_ADDRESS_REGEX = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;\r\nconst HTTP_REGEX = /^https?/;\r\nasync function _validateOrigin(auth) {\r\n    // Skip origin validation if we are in an emulated environment\r\n    if (auth.config.emulator) {\r\n        return;\r\n    }\r\n    const { authorizedDomains } = await _getProjectConfig(auth);\r\n    for (const domain of authorizedDomains) {\r\n        try {\r\n            if (matchDomain(domain)) {\r\n                return;\r\n            }\r\n        }\r\n        catch (_a) {\r\n            // Do nothing if there's a URL error; just continue searching\r\n        }\r\n    }\r\n    // In the old SDK, this error also provides helpful messages.\r\n    _fail(auth, \"unauthorized-domain\" /* AuthErrorCode.INVALID_ORIGIN */);\r\n}\r\nfunction matchDomain(expected) {\r\n    const currentUrl = _getCurrentUrl();\r\n    const { protocol, hostname } = new URL(currentUrl);\r\n    if (expected.startsWith('chrome-extension://')) {\r\n        const ceUrl = new URL(expected);\r\n        if (ceUrl.hostname === '' && hostname === '') {\r\n            // For some reason we're not parsing chrome URLs properly\r\n            return (protocol === 'chrome-extension:' &&\r\n                expected.replace('chrome-extension://', '') ===\r\n                    currentUrl.replace('chrome-extension://', ''));\r\n        }\r\n        return protocol === 'chrome-extension:' && ceUrl.hostname === hostname;\r\n    }\r\n    if (!HTTP_REGEX.test(protocol)) {\r\n        return false;\r\n    }\r\n    if (IP_ADDRESS_REGEX.test(expected)) {\r\n        // The domain has to be exactly equal to the pattern, as an IP domain will\r\n        // only contain the IP, no extra character.\r\n        return hostname === expected;\r\n    }\r\n    // Dots in pattern should be escaped.\r\n    const escapedDomainPattern = expected.replace(/\\./g, '\\\\.');\r\n    // Non ip address domains.\r\n    // domain.com = *.domain.com OR domain.com\r\n    const re = new RegExp('^(.+\\\\.' + escapedDomainPattern + '|' + escapedDomainPattern + ')$', 'i');\r\n    return re.test(hostname);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst NETWORK_TIMEOUT = new Delay(30000, 60000);\r\n/**\r\n * Reset unlaoded GApi modules. If gapi.load fails due to a network error,\r\n * it will stop working after a retrial. This is a hack to fix this issue.\r\n */\r\nfunction resetUnloadedGapiModules() {\r\n    // Clear last failed gapi.load state to force next gapi.load to first\r\n    // load the failed gapi.iframes module.\r\n    // Get gapix.beacon context.\r\n    const beacon = _window().___jsl;\r\n    // Get current hint.\r\n    if (beacon === null || beacon === void 0 ? void 0 : beacon.H) {\r\n        // Get gapi hint.\r\n        for (const hint of Object.keys(beacon.H)) {\r\n            // Requested modules.\r\n            beacon.H[hint].r = beacon.H[hint].r || [];\r\n            // Loaded modules.\r\n            beacon.H[hint].L = beacon.H[hint].L || [];\r\n            // Set requested modules to a copy of the loaded modules.\r\n            beacon.H[hint].r = [...beacon.H[hint].L];\r\n            // Clear pending callbacks.\r\n            if (beacon.CP) {\r\n                for (let i = 0; i < beacon.CP.length; i++) {\r\n                    // Remove all failed pending callbacks.\r\n                    beacon.CP[i] = null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction loadGapi(auth) {\r\n    return new Promise((resolve, reject) => {\r\n        var _a, _b, _c;\r\n        // Function to run when gapi.load is ready.\r\n        function loadGapiIframe() {\r\n            // The developer may have tried to previously run gapi.load and failed.\r\n            // Run this to fix that.\r\n            resetUnloadedGapiModules();\r\n            gapi.load('gapi.iframes', {\r\n                callback: () => {\r\n                    resolve(gapi.iframes.getContext());\r\n                },\r\n                ontimeout: () => {\r\n                    // The above reset may be sufficient, but having this reset after\r\n                    // failure ensures that if the developer calls gapi.load after the\r\n                    // connection is re-established and before another attempt to embed\r\n                    // the iframe, it would work and would not be broken because of our\r\n                    // failed attempt.\r\n                    // Timeout when gapi.iframes.Iframe not loaded.\r\n                    resetUnloadedGapiModules();\r\n                    reject(_createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\r\n                },\r\n                timeout: NETWORK_TIMEOUT.get()\r\n            });\r\n        }\r\n        if ((_b = (_a = _window().gapi) === null || _a === void 0 ? void 0 : _a.iframes) === null || _b === void 0 ? void 0 : _b.Iframe) {\r\n            // If gapi.iframes.Iframe available, resolve.\r\n            resolve(gapi.iframes.getContext());\r\n        }\r\n        else if (!!((_c = _window().gapi) === null || _c === void 0 ? void 0 : _c.load)) {\r\n            // Gapi loader ready, load gapi.iframes.\r\n            loadGapiIframe();\r\n        }\r\n        else {\r\n            // Create a new iframe callback when this is called so as not to overwrite\r\n            // any previous defined callback. This happens if this method is called\r\n            // multiple times in parallel and could result in the later callback\r\n            // overwriting the previous one. This would end up with a iframe\r\n            // timeout.\r\n            const cbName = _generateCallbackName('iframefcb');\r\n            // GApi loader not available, dynamically load platform.js.\r\n            _window()[cbName] = () => {\r\n                // GApi loader should be ready.\r\n                if (!!gapi.load) {\r\n                    loadGapiIframe();\r\n                }\r\n                else {\r\n                    // Gapi loader failed, throw error.\r\n                    reject(_createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\r\n                }\r\n            };\r\n            // Load GApi loader.\r\n            return _loadJS(`${_gapiScriptUrl()}?onload=${cbName}`)\r\n                .catch(e => reject(e));\r\n        }\r\n    }).catch(error => {\r\n        // Reset cached promise to allow for retrial.\r\n        cachedGApiLoader = null;\r\n        throw error;\r\n    });\r\n}\r\nlet cachedGApiLoader = null;\r\nfunction _loadGapi(auth) {\r\n    cachedGApiLoader = cachedGApiLoader || loadGapi(auth);\r\n    return cachedGApiLoader;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PING_TIMEOUT = new Delay(5000, 15000);\r\nconst IFRAME_PATH = '__/auth/iframe';\r\nconst EMULATED_IFRAME_PATH = 'emulator/auth/iframe';\r\nconst IFRAME_ATTRIBUTES = {\r\n    style: {\r\n        position: 'absolute',\r\n        top: '-100px',\r\n        width: '1px',\r\n        height: '1px'\r\n    },\r\n    'aria-hidden': 'true',\r\n    tabindex: '-1'\r\n};\r\n// Map from apiHost to endpoint ID for passing into iframe. In current SDK, apiHost can be set to\r\n// anything (not from a list of endpoints with IDs as in legacy), so this is the closest we can get.\r\nconst EID_FROM_APIHOST = new Map([\r\n    [\"identitytoolkit.googleapis.com\" /* DefaultConfig.API_HOST */, 'p'],\r\n    ['staging-identitytoolkit.sandbox.googleapis.com', 's'],\r\n    ['test-identitytoolkit.sandbox.googleapis.com', 't'] // test\r\n]);\r\nfunction getIframeUrl(auth) {\r\n    const config = auth.config;\r\n    _assert(config.authDomain, auth, \"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */);\r\n    const url = config.emulator\r\n        ? _emulatorUrl(config, EMULATED_IFRAME_PATH)\r\n        : `https://${auth.config.authDomain}/${IFRAME_PATH}`;\r\n    const params = {\r\n        apiKey: config.apiKey,\r\n        appName: auth.name,\r\n        v: app.SDK_VERSION\r\n    };\r\n    const eid = EID_FROM_APIHOST.get(auth.config.apiHost);\r\n    if (eid) {\r\n        params.eid = eid;\r\n    }\r\n    const frameworks = auth._getFrameworks();\r\n    if (frameworks.length) {\r\n        params.fw = frameworks.join(',');\r\n    }\r\n    return `${url}?${util.querystring(params).slice(1)}`;\r\n}\r\nasync function _openIframe(auth) {\r\n    const context = await _loadGapi(auth);\r\n    const gapi = _window().gapi;\r\n    _assert(gapi, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n    return context.open({\r\n        where: document.body,\r\n        url: getIframeUrl(auth),\r\n        messageHandlersFilter: gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER,\r\n        attributes: IFRAME_ATTRIBUTES,\r\n        dontclear: true\r\n    }, (iframe) => new Promise(async (resolve, reject) => {\r\n        await iframe.restyle({\r\n            // Prevent iframe from closing on mouse out.\r\n            setHideOnLeave: false\r\n        });\r\n        const networkError = _createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */);\r\n        // Confirm iframe is correctly loaded.\r\n        // To fallback on failure, set a timeout.\r\n        const networkErrorTimer = _window().setTimeout(() => {\r\n            reject(networkError);\r\n        }, PING_TIMEOUT.get());\r\n        // Clear timer and resolve pending iframe ready promise.\r\n        function clearTimerAndResolve() {\r\n            _window().clearTimeout(networkErrorTimer);\r\n            resolve(iframe);\r\n        }\r\n        // This returns an IThenable. However the reject part does not call\r\n        // when the iframe is not loaded.\r\n        iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, () => {\r\n            reject(networkError);\r\n        });\r\n    }));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst BASE_POPUP_OPTIONS = {\r\n    location: 'yes',\r\n    resizable: 'yes',\r\n    statusbar: 'yes',\r\n    toolbar: 'no'\r\n};\r\nconst DEFAULT_WIDTH = 500;\r\nconst DEFAULT_HEIGHT = 600;\r\nconst TARGET_BLANK = '_blank';\r\nconst FIREFOX_EMPTY_URL = 'http://localhost';\r\nclass AuthPopup {\r\n    constructor(window) {\r\n        this.window = window;\r\n        this.associatedEvent = null;\r\n    }\r\n    close() {\r\n        if (this.window) {\r\n            try {\r\n                this.window.close();\r\n            }\r\n            catch (e) { }\r\n        }\r\n    }\r\n}\r\nfunction _open(auth, url, name, width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT) {\r\n    const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();\r\n    const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();\r\n    let target = '';\r\n    const options = Object.assign(Object.assign({}, BASE_POPUP_OPTIONS), { width: width.toString(), height: height.toString(), top,\r\n        left });\r\n    // Chrome iOS 7 and 8 is returning an undefined popup win when target is\r\n    // specified, even though the popup is not necessarily blocked.\r\n    const ua = util.getUA().toLowerCase();\r\n    if (name) {\r\n        target = _isChromeIOS(ua) ? TARGET_BLANK : name;\r\n    }\r\n    if (_isFirefox(ua)) {\r\n        // Firefox complains when invalid URLs are popped out. Hacky way to bypass.\r\n        url = url || FIREFOX_EMPTY_URL;\r\n        // Firefox disables by default scrolling on popup windows, which can create\r\n        // issues when the user has many Google accounts, for instance.\r\n        options.scrollbars = 'yes';\r\n    }\r\n    const optionsString = Object.entries(options).reduce((accum, [key, value]) => `${accum}${key}=${value},`, '');\r\n    if (_isIOSStandalone(ua) && target !== '_self') {\r\n        openAsNewWindowIOS(url || '', target);\r\n        return new AuthPopup(null);\r\n    }\r\n    // about:blank getting sanitized causing browsers like IE/Edge to display\r\n    // brief error message before redirecting to handler.\r\n    const newWin = window.open(url || '', target, optionsString);\r\n    _assert(newWin, auth, \"popup-blocked\" /* AuthErrorCode.POPUP_BLOCKED */);\r\n    // Flaky on IE edge, encapsulate with a try and catch.\r\n    try {\r\n        newWin.focus();\r\n    }\r\n    catch (e) { }\r\n    return new AuthPopup(newWin);\r\n}\r\nfunction openAsNewWindowIOS(url, target) {\r\n    const el = document.createElement('a');\r\n    el.href = url;\r\n    el.target = target;\r\n    const click = document.createEvent('MouseEvent');\r\n    click.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 1, null);\r\n    el.dispatchEvent(click);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * URL for Authentication widget which will initiate the OAuth handshake\r\n *\r\n * @internal\r\n */\r\nconst WIDGET_PATH = '__/auth/handler';\r\n/**\r\n * URL for emulated environment\r\n *\r\n * @internal\r\n */\r\nconst EMULATOR_WIDGET_PATH = 'emulator/auth/handler';\r\n/**\r\n * Fragment name for the App Check token that gets passed to the widget\r\n *\r\n * @internal\r\n */\r\nconst FIREBASE_APP_CHECK_FRAGMENT_ID = encodeURIComponent('fac');\r\nasync function _getRedirectUrl(auth, provider, authType, redirectUrl, eventId, additionalParams) {\r\n    _assert(auth.config.authDomain, auth, \"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */);\r\n    _assert(auth.config.apiKey, auth, \"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */);\r\n    const params = {\r\n        apiKey: auth.config.apiKey,\r\n        appName: auth.name,\r\n        authType,\r\n        redirectUrl,\r\n        v: app.SDK_VERSION,\r\n        eventId\r\n    };\r\n    if (provider instanceof FederatedAuthProvider) {\r\n        provider.setDefaultLanguage(auth.languageCode);\r\n        params.providerId = provider.providerId || '';\r\n        if (!util.isEmpty(provider.getCustomParameters())) {\r\n            params.customParameters = JSON.stringify(provider.getCustomParameters());\r\n        }\r\n        // TODO set additionalParams from the provider as well?\r\n        for (const [key, value] of Object.entries(additionalParams || {})) {\r\n            params[key] = value;\r\n        }\r\n    }\r\n    if (provider instanceof BaseOAuthProvider) {\r\n        const scopes = provider.getScopes().filter(scope => scope !== '');\r\n        if (scopes.length > 0) {\r\n            params.scopes = scopes.join(',');\r\n        }\r\n    }\r\n    if (auth.tenantId) {\r\n        params.tid = auth.tenantId;\r\n    }\r\n    // TODO: maybe set eid as endipointId\r\n    // TODO: maybe set fw as Frameworks.join(\",\")\r\n    const paramsDict = params;\r\n    for (const key of Object.keys(paramsDict)) {\r\n        if (paramsDict[key] === undefined) {\r\n            delete paramsDict[key];\r\n        }\r\n    }\r\n    // Sets the App Check token to pass to the widget\r\n    const appCheckToken = await auth._getAppCheckToken();\r\n    const appCheckTokenFragment = appCheckToken\r\n        ? `#${FIREBASE_APP_CHECK_FRAGMENT_ID}=${encodeURIComponent(appCheckToken)}`\r\n        : '';\r\n    // Start at index 1 to skip the leading '&' in the query string\r\n    return `${getHandlerBase(auth)}?${util.querystring(paramsDict).slice(1)}${appCheckTokenFragment}`;\r\n}\r\nfunction getHandlerBase({ config }) {\r\n    if (!config.emulator) {\r\n        return `https://${config.authDomain}/${WIDGET_PATH}`;\r\n    }\r\n    return _emulatorUrl(config, EMULATOR_WIDGET_PATH);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The special web storage event\r\n *\r\n */\r\nconst WEB_STORAGE_SUPPORT_KEY = 'webStorageSupport';\r\nclass BrowserPopupRedirectResolver {\r\n    constructor() {\r\n        this.eventManagers = {};\r\n        this.iframes = {};\r\n        this.originValidationPromises = {};\r\n        this._redirectPersistence = browserSessionPersistence;\r\n        this._completeRedirectFn = _getRedirectResult;\r\n        this._overrideRedirectResult = _overrideRedirectResult;\r\n    }\r\n    // Wrapping in async even though we don't await anywhere in order\r\n    // to make sure errors are raised as promise rejections\r\n    async _openPopup(auth, provider, authType, eventId) {\r\n        var _a;\r\n        debugAssert((_a = this.eventManagers[auth._key()]) === null || _a === void 0 ? void 0 : _a.manager, '_initialize() not called before _openPopup()');\r\n        const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);\r\n        return _open(auth, url, _generateEventId());\r\n    }\r\n    async _openRedirect(auth, provider, authType, eventId) {\r\n        await this._originValidation(auth);\r\n        const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);\r\n        _setWindowLocation(url);\r\n        return new Promise(() => { });\r\n    }\r\n    _initialize(auth) {\r\n        const key = auth._key();\r\n        if (this.eventManagers[key]) {\r\n            const { manager, promise } = this.eventManagers[key];\r\n            if (manager) {\r\n                return Promise.resolve(manager);\r\n            }\r\n            else {\r\n                debugAssert(promise, 'If manager is not set, promise should be');\r\n                return promise;\r\n            }\r\n        }\r\n        const promise = this.initAndGetManager(auth);\r\n        this.eventManagers[key] = { promise };\r\n        // If the promise is rejected, the key should be removed so that the\r\n        // operation can be retried later.\r\n        promise.catch(() => {\r\n            delete this.eventManagers[key];\r\n        });\r\n        return promise;\r\n    }\r\n    async initAndGetManager(auth) {\r\n        const iframe = await _openIframe(auth);\r\n        const manager = new AuthEventManager(auth);\r\n        iframe.register('authEvent', (iframeEvent) => {\r\n            _assert(iframeEvent === null || iframeEvent === void 0 ? void 0 : iframeEvent.authEvent, auth, \"invalid-auth-event\" /* AuthErrorCode.INVALID_AUTH_EVENT */);\r\n            // TODO: Consider splitting redirect and popup events earlier on\r\n            const handled = manager.onEvent(iframeEvent.authEvent);\r\n            return { status: handled ? \"ACK\" /* GapiOutcome.ACK */ : \"ERROR\" /* GapiOutcome.ERROR */ };\r\n        }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);\r\n        this.eventManagers[auth._key()] = { manager };\r\n        this.iframes[auth._key()] = iframe;\r\n        return manager;\r\n    }\r\n    _isIframeWebStorageSupported(auth, cb) {\r\n        const iframe = this.iframes[auth._key()];\r\n        iframe.send(WEB_STORAGE_SUPPORT_KEY, { type: WEB_STORAGE_SUPPORT_KEY }, result => {\r\n            var _a;\r\n            const isSupported = (_a = result === null || result === void 0 ? void 0 : result[0]) === null || _a === void 0 ? void 0 : _a[WEB_STORAGE_SUPPORT_KEY];\r\n            if (isSupported !== undefined) {\r\n                cb(!!isSupported);\r\n            }\r\n            _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);\r\n    }\r\n    _originValidation(auth) {\r\n        const key = auth._key();\r\n        if (!this.originValidationPromises[key]) {\r\n            this.originValidationPromises[key] = _validateOrigin(auth);\r\n        }\r\n        return this.originValidationPromises[key];\r\n    }\r\n    get _shouldInitProactively() {\r\n        // Mobile browsers and Safari need to optimistically initialize\r\n        return _isMobileBrowser() || _isSafari() || _isIOS();\r\n    }\r\n}\r\n/**\r\n * An implementation of {@link PopupRedirectResolver} suitable for browser\r\n * based applications.\r\n *\r\n * @remarks\r\n * This method does not work in a Node.js environment.\r\n *\r\n * @public\r\n */\r\nconst browserPopupRedirectResolver = BrowserPopupRedirectResolver;\n\nclass MultiFactorAssertionImpl {\r\n    constructor(factorId) {\r\n        this.factorId = factorId;\r\n    }\r\n    _process(auth, session, displayName) {\r\n        switch (session.type) {\r\n            case \"enroll\" /* MultiFactorSessionType.ENROLL */:\r\n                return this._finalizeEnroll(auth, session.credential, displayName);\r\n            case \"signin\" /* MultiFactorSessionType.SIGN_IN */:\r\n                return this._finalizeSignIn(auth, session.credential);\r\n            default:\r\n                return debugFail('unexpected MultiFactorSessionType');\r\n        }\r\n    }\r\n}\n\n/**\r\n * {@inheritdoc PhoneMultiFactorAssertion}\r\n *\r\n * @public\r\n */\r\nclass PhoneMultiFactorAssertionImpl extends MultiFactorAssertionImpl {\r\n    constructor(credential) {\r\n        super(\"phone\" /* FactorId.PHONE */);\r\n        this.credential = credential;\r\n    }\r\n    /** @internal */\r\n    static _fromCredential(credential) {\r\n        return new PhoneMultiFactorAssertionImpl(credential);\r\n    }\r\n    /** @internal */\r\n    _finalizeEnroll(auth, idToken, displayName) {\r\n        return finalizeEnrollPhoneMfa(auth, {\r\n            idToken,\r\n            displayName,\r\n            phoneVerificationInfo: this.credential._makeVerificationRequest()\r\n        });\r\n    }\r\n    /** @internal */\r\n    _finalizeSignIn(auth, mfaPendingCredential) {\r\n        return finalizeSignInPhoneMfa(auth, {\r\n            mfaPendingCredential,\r\n            phoneVerificationInfo: this.credential._makeVerificationRequest()\r\n        });\r\n    }\r\n}\r\n/**\r\n * Provider for generating a {@link PhoneMultiFactorAssertion}.\r\n *\r\n * @public\r\n */\r\nclass PhoneMultiFactorGenerator {\r\n    constructor() { }\r\n    /**\r\n     * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.\r\n     *\r\n     * @remarks\r\n     * This method does not work in a Node.js environment.\r\n     *\r\n     * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.\r\n     * @returns A {@link PhoneMultiFactorAssertion} which can be used with\r\n     * {@link MultiFactorResolver.resolveSignIn}\r\n     */\r\n    static assertion(credential) {\r\n        return PhoneMultiFactorAssertionImpl._fromCredential(credential);\r\n    }\r\n}\r\n/**\r\n * The identifier of the phone second factor: `phone`.\r\n */\r\nPhoneMultiFactorGenerator.FACTOR_ID = 'phone';\n\n/**\r\n * Provider for generating a {@link TotpMultiFactorAssertion}.\r\n *\r\n * @public\r\n */\r\nclass TotpMultiFactorGenerator {\r\n    /**\r\n     * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of\r\n     * the TOTP (time-based one-time password) second factor.\r\n     * This assertion is used to complete enrollment in TOTP second factor.\r\n     *\r\n     * @param secret A {@link TotpSecret} containing the shared secret key and other TOTP parameters.\r\n     * @param oneTimePassword One-time password from TOTP App.\r\n     * @returns A {@link TotpMultiFactorAssertion} which can be used with\r\n     * {@link MultiFactorUser.enroll}.\r\n     */\r\n    static assertionForEnrollment(secret, oneTimePassword) {\r\n        return TotpMultiFactorAssertionImpl._fromSecret(secret, oneTimePassword);\r\n    }\r\n    /**\r\n     * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of the TOTP second factor.\r\n     * This assertion is used to complete signIn with TOTP as the second factor.\r\n     *\r\n     * @param enrollmentId identifies the enrolled TOTP second factor.\r\n     * @param oneTimePassword One-time password from TOTP App.\r\n     * @returns A {@link TotpMultiFactorAssertion} which can be used with\r\n     * {@link MultiFactorResolver.resolveSignIn}.\r\n     */\r\n    static assertionForSignIn(enrollmentId, oneTimePassword) {\r\n        return TotpMultiFactorAssertionImpl._fromEnrollmentId(enrollmentId, oneTimePassword);\r\n    }\r\n    /**\r\n     * Returns a promise to {@link TotpSecret} which contains the TOTP shared secret key and other parameters.\r\n     * Creates a TOTP secret as part of enrolling a TOTP second factor.\r\n     * Used for generating a QR code URL or inputting into a TOTP app.\r\n     * This method uses the auth instance corresponding to the user in the multiFactorSession.\r\n     *\r\n     * @param session The {@link MultiFactorSession} that the user is part of.\r\n     * @returns A promise to {@link TotpSecret}.\r\n     */\r\n    static async generateSecret(session) {\r\n        var _a;\r\n        const mfaSession = session;\r\n        _assert(typeof ((_a = mfaSession.user) === null || _a === void 0 ? void 0 : _a.auth) !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        const response = await startEnrollTotpMfa(mfaSession.user.auth, {\r\n            idToken: mfaSession.credential,\r\n            totpEnrollmentInfo: {}\r\n        });\r\n        return TotpSecret._fromStartTotpMfaEnrollmentResponse(response, mfaSession.user.auth);\r\n    }\r\n}\r\n/**\r\n * The identifier of the TOTP second factor: `totp`.\r\n */\r\nTotpMultiFactorGenerator.FACTOR_ID = \"totp\" /* FactorId.TOTP */;\r\nclass TotpMultiFactorAssertionImpl extends MultiFactorAssertionImpl {\r\n    constructor(otp, enrollmentId, secret) {\r\n        super(\"totp\" /* FactorId.TOTP */);\r\n        this.otp = otp;\r\n        this.enrollmentId = enrollmentId;\r\n        this.secret = secret;\r\n    }\r\n    /** @internal */\r\n    static _fromSecret(secret, otp) {\r\n        return new TotpMultiFactorAssertionImpl(otp, undefined, secret);\r\n    }\r\n    /** @internal */\r\n    static _fromEnrollmentId(enrollmentId, otp) {\r\n        return new TotpMultiFactorAssertionImpl(otp, enrollmentId);\r\n    }\r\n    /** @internal */\r\n    async _finalizeEnroll(auth, idToken, displayName) {\r\n        _assert(typeof this.secret !== 'undefined', auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        return finalizeEnrollTotpMfa(auth, {\r\n            idToken,\r\n            displayName,\r\n            totpVerificationInfo: this.secret._makeTotpVerificationInfo(this.otp)\r\n        });\r\n    }\r\n    /** @internal */\r\n    async _finalizeSignIn(auth, mfaPendingCredential) {\r\n        _assert(this.enrollmentId !== undefined && this.otp !== undefined, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        const totpVerificationInfo = { verificationCode: this.otp };\r\n        return finalizeSignInTotpMfa(auth, {\r\n            mfaPendingCredential,\r\n            mfaEnrollmentId: this.enrollmentId,\r\n            totpVerificationInfo\r\n        });\r\n    }\r\n}\r\n/**\r\n * Provider for generating a {@link TotpMultiFactorAssertion}.\r\n *\r\n * Stores the shared secret key and other parameters to generate time-based OTPs.\r\n * Implements methods to retrieve the shared secret key and generate a QR code URL.\r\n * @public\r\n */\r\nclass TotpSecret {\r\n    // The public members are declared outside the constructor so the docs can be generated.\r\n    constructor(secretKey, hashingAlgorithm, codeLength, codeIntervalSeconds, enrollmentCompletionDeadline, sessionInfo, auth) {\r\n        this.sessionInfo = sessionInfo;\r\n        this.auth = auth;\r\n        this.secretKey = secretKey;\r\n        this.hashingAlgorithm = hashingAlgorithm;\r\n        this.codeLength = codeLength;\r\n        this.codeIntervalSeconds = codeIntervalSeconds;\r\n        this.enrollmentCompletionDeadline = enrollmentCompletionDeadline;\r\n    }\r\n    /** @internal */\r\n    static _fromStartTotpMfaEnrollmentResponse(response, auth) {\r\n        return new TotpSecret(response.totpSessionInfo.sharedSecretKey, response.totpSessionInfo.hashingAlgorithm, response.totpSessionInfo.verificationCodeLength, response.totpSessionInfo.periodSec, new Date(response.totpSessionInfo.finalizeEnrollmentTime).toUTCString(), response.totpSessionInfo.sessionInfo, auth);\r\n    }\r\n    /** @internal */\r\n    _makeTotpVerificationInfo(otp) {\r\n        return { sessionInfo: this.sessionInfo, verificationCode: otp };\r\n    }\r\n    /**\r\n     * Returns a QR code URL as described in\r\n     * https://github.com/google/google-authenticator/wiki/Key-Uri-Format\r\n     * This can be displayed to the user as a QR code to be scanned into a TOTP app like Google Authenticator.\r\n     * If the optional parameters are unspecified, an accountName of <userEmail> and issuer of <firebaseAppName> are used.\r\n     *\r\n     * @param accountName the name of the account/app along with a user identifier.\r\n     * @param issuer issuer of the TOTP (likely the app name).\r\n     * @returns A QR code URL string.\r\n     */\r\n    generateQrCodeUrl(accountName, issuer) {\r\n        var _a;\r\n        let useDefaults = false;\r\n        if (_isEmptyString(accountName) || _isEmptyString(issuer)) {\r\n            useDefaults = true;\r\n        }\r\n        if (useDefaults) {\r\n            if (_isEmptyString(accountName)) {\r\n                accountName = ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.email) || 'unknownuser';\r\n            }\r\n            if (_isEmptyString(issuer)) {\r\n                issuer = this.auth.name;\r\n            }\r\n        }\r\n        return `otpauth://totp/${issuer}:${accountName}?secret=${this.secretKey}&issuer=${issuer}&algorithm=${this.hashingAlgorithm}&digits=${this.codeLength}`;\r\n    }\r\n}\r\n/** @internal */\r\nfunction _isEmptyString(input) {\r\n    return typeof input === 'undefined' || (input === null || input === void 0 ? void 0 : input.length) === 0;\r\n}\n\nvar name = \"@firebase/auth\";\nvar version = \"1.6.0\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AuthInterop {\r\n    constructor(auth) {\r\n        this.auth = auth;\r\n        this.internalListeners = new Map();\r\n    }\r\n    getUid() {\r\n        var _a;\r\n        this.assertAuthConfigured();\r\n        return ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid) || null;\r\n    }\r\n    async getToken(forceRefresh) {\r\n        this.assertAuthConfigured();\r\n        await this.auth._initializationPromise;\r\n        if (!this.auth.currentUser) {\r\n            return null;\r\n        }\r\n        const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);\r\n        return { accessToken };\r\n    }\r\n    addAuthTokenListener(listener) {\r\n        this.assertAuthConfigured();\r\n        if (this.internalListeners.has(listener)) {\r\n            return;\r\n        }\r\n        const unsubscribe = this.auth.onIdTokenChanged(user => {\r\n            listener((user === null || user === void 0 ? void 0 : user.stsTokenManager.accessToken) || null);\r\n        });\r\n        this.internalListeners.set(listener, unsubscribe);\r\n        this.updateProactiveRefresh();\r\n    }\r\n    removeAuthTokenListener(listener) {\r\n        this.assertAuthConfigured();\r\n        const unsubscribe = this.internalListeners.get(listener);\r\n        if (!unsubscribe) {\r\n            return;\r\n        }\r\n        this.internalListeners.delete(listener);\r\n        unsubscribe();\r\n        this.updateProactiveRefresh();\r\n    }\r\n    assertAuthConfigured() {\r\n        _assert(this.auth._initializationPromise, \"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */);\r\n    }\r\n    updateProactiveRefresh() {\r\n        if (this.internalListeners.size > 0) {\r\n            this.auth._startProactiveRefresh();\r\n        }\r\n        else {\r\n            this.auth._stopProactiveRefresh();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getVersionForPlatform(clientPlatform) {\r\n    switch (clientPlatform) {\r\n        case \"Node\" /* ClientPlatform.NODE */:\r\n            return 'node';\r\n        case \"ReactNative\" /* ClientPlatform.REACT_NATIVE */:\r\n            return 'rn';\r\n        case \"Worker\" /* ClientPlatform.WORKER */:\r\n            return 'webworker';\r\n        case \"Cordova\" /* ClientPlatform.CORDOVA */:\r\n            return 'cordova';\r\n        case \"WebExtension\" /* ClientPlatform.WEB_EXTENSION */:\r\n            return 'web-extension';\r\n        default:\r\n            return undefined;\r\n    }\r\n}\r\n/** @internal */\r\nfunction registerAuth(clientPlatform) {\r\n    app._registerComponent(new component.Component(\"auth\" /* _ComponentName.AUTH */, (container, { options: deps }) => {\r\n        const app = container.getProvider('app').getImmediate();\r\n        const heartbeatServiceProvider = container.getProvider('heartbeat');\r\n        const appCheckServiceProvider = container.getProvider('app-check-internal');\r\n        const { apiKey, authDomain } = app.options;\r\n        _assert(apiKey && !apiKey.includes(':'), \"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */, { appName: app.name });\r\n        const config = {\r\n            apiKey,\r\n            authDomain,\r\n            clientPlatform,\r\n            apiHost: \"identitytoolkit.googleapis.com\" /* DefaultConfig.API_HOST */,\r\n            tokenApiHost: \"securetoken.googleapis.com\" /* DefaultConfig.TOKEN_API_HOST */,\r\n            apiScheme: \"https\" /* DefaultConfig.API_SCHEME */,\r\n            sdkClientVersion: _getClientVersion(clientPlatform)\r\n        };\r\n        const authInstance = new AuthImpl(app, heartbeatServiceProvider, appCheckServiceProvider, config);\r\n        _initializeAuthInstance(authInstance, deps);\r\n        return authInstance;\r\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */)\r\n        /**\r\n         * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()\r\n         * For why we do this, See go/firebase-next-auth-init\r\n         */\r\n        .setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */)\r\n        /**\r\n         * Because all firebase products that depend on auth depend on auth-internal directly,\r\n         * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.\r\n         */\r\n        .setInstanceCreatedCallback((container, _instanceIdentifier, _instance) => {\r\n        const authInternalProvider = container.getProvider(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */);\r\n        authInternalProvider.initialize();\r\n    }));\r\n    app._registerComponent(new component.Component(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */, container => {\r\n        const auth = _castAuth(container.getProvider(\"auth\" /* _ComponentName.AUTH */).getImmediate());\r\n        return (auth => new AuthInterop(auth))(auth);\r\n    }, \"PRIVATE\" /* ComponentType.PRIVATE */).setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */));\r\n    app.registerVersion(name, version, getVersionForPlatform(clientPlatform));\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    app.registerVersion(name, version, 'cjs2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_ID_TOKEN_MAX_AGE = 5 * 60;\r\nconst authIdTokenMaxAge = util.getExperimentalSetting('authIdTokenMaxAge') || DEFAULT_ID_TOKEN_MAX_AGE;\r\nlet lastPostedIdToken = null;\r\nconst mintCookieFactory = (url) => async (user) => {\r\n    const idTokenResult = user && (await user.getIdTokenResult());\r\n    const idTokenAge = idTokenResult &&\r\n        (new Date().getTime() - Date.parse(idTokenResult.issuedAtTime)) / 1000;\r\n    if (idTokenAge && idTokenAge > authIdTokenMaxAge) {\r\n        return;\r\n    }\r\n    // Specifically trip null => undefined when logged out, to delete any existing cookie\r\n    const idToken = idTokenResult === null || idTokenResult === void 0 ? void 0 : idTokenResult.token;\r\n    if (lastPostedIdToken === idToken) {\r\n        return;\r\n    }\r\n    lastPostedIdToken = idToken;\r\n    await fetch(url, {\r\n        method: idToken ? 'POST' : 'DELETE',\r\n        headers: idToken\r\n            ? {\r\n                'Authorization': `Bearer ${idToken}`\r\n            }\r\n            : {}\r\n    });\r\n};\r\n/**\r\n * Returns the Auth instance associated with the provided {@link @firebase/app#FirebaseApp}.\r\n * If no instance exists, initializes an Auth instance with platform-specific default dependencies.\r\n *\r\n * @param app - The Firebase App.\r\n *\r\n * @public\r\n */\r\nfunction getAuth(app$1 = app.getApp()) {\r\n    const provider = app._getProvider(app$1, 'auth');\r\n    if (provider.isInitialized()) {\r\n        return provider.getImmediate();\r\n    }\r\n    const auth = initializeAuth(app$1, {\r\n        popupRedirectResolver: browserPopupRedirectResolver,\r\n        persistence: [\r\n            indexedDBLocalPersistence,\r\n            browserLocalPersistence,\r\n            browserSessionPersistence\r\n        ]\r\n    });\r\n    const authTokenSyncUrl = util.getExperimentalSetting('authTokenSyncURL');\r\n    if (authTokenSyncUrl) {\r\n        const mintCookie = mintCookieFactory(authTokenSyncUrl);\r\n        beforeAuthStateChanged(auth, mintCookie, () => mintCookie(auth.currentUser));\r\n        onIdTokenChanged(auth, user => mintCookie(user));\r\n    }\r\n    const authEmulatorHost = util.getDefaultEmulatorHost('auth');\r\n    if (authEmulatorHost) {\r\n        connectAuthEmulator(auth, `http://${authEmulatorHost}`);\r\n    }\r\n    return auth;\r\n}\r\nfunction getScriptParentElement() {\r\n    var _a, _b;\r\n    return (_b = (_a = document.getElementsByTagName('head')) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : document;\r\n}\r\n_setExternalJSProvider({\r\n    loadJS(url) {\r\n        // TODO: consider adding timeout support & cancellation\r\n        return new Promise((resolve, reject) => {\r\n            const el = document.createElement('script');\r\n            el.setAttribute('src', url);\r\n            el.onload = resolve;\r\n            el.onerror = e => {\r\n                const error = _createError(\"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n                error.customData = e;\r\n                reject(error);\r\n            };\r\n            el.type = 'text/javascript';\r\n            el.charset = 'UTF-8';\r\n            getScriptParentElement().appendChild(el);\r\n        });\r\n    },\r\n    gapiScript: 'https://apis.google.com/js/api.js',\r\n    recaptchaV2Script: 'https://www.google.com/recaptcha/api.js',\r\n    recaptchaEnterpriseScript: 'https://www.google.com/recaptcha/enterprise.js?render='\r\n});\r\nregisterAuth(\"Browser\" /* ClientPlatform.BROWSER */);\n\nexports.AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY;\nexports.ActionCodeOperation = ActionCodeOperation;\nexports.ActionCodeURL = ActionCodeURL;\nexports.AuthCredential = AuthCredential;\nexports.AuthEventManager = AuthEventManager;\nexports.AuthImpl = AuthImpl;\nexports.AuthPopup = AuthPopup;\nexports.EmailAuthCredential = EmailAuthCredential;\nexports.EmailAuthProvider = EmailAuthProvider;\nexports.FacebookAuthProvider = FacebookAuthProvider;\nexports.FactorId = FactorId;\nexports.FetchProvider = FetchProvider;\nexports.GithubAuthProvider = GithubAuthProvider;\nexports.GoogleAuthProvider = GoogleAuthProvider;\nexports.OAuthCredential = OAuthCredential;\nexports.OAuthProvider = OAuthProvider;\nexports.OperationType = OperationType;\nexports.PhoneAuthCredential = PhoneAuthCredential;\nexports.PhoneAuthProvider = PhoneAuthProvider;\nexports.PhoneMultiFactorGenerator = PhoneMultiFactorGenerator;\nexports.ProviderId = ProviderId;\nexports.RecaptchaVerifier = RecaptchaVerifier;\nexports.SAMLAuthCredential = SAMLAuthCredential;\nexports.SAMLAuthProvider = SAMLAuthProvider;\nexports.SignInMethod = SignInMethod;\nexports.TotpMultiFactorGenerator = TotpMultiFactorGenerator;\nexports.TotpSecret = TotpSecret;\nexports.TwitterAuthProvider = TwitterAuthProvider;\nexports.UserImpl = UserImpl;\nexports._assert = _assert;\nexports._castAuth = _castAuth;\nexports._clearRedirectOutcomes = _clearRedirectOutcomes;\nexports._createError = _createError;\nexports._fail = _fail;\nexports._generateEventId = _generateEventId;\nexports._getClientVersion = _getClientVersion;\nexports._getInstance = _getInstance;\nexports._getProjectConfig = _getProjectConfig;\nexports._getRedirectResult = _getRedirectResult;\nexports._getRedirectUrl = _getRedirectUrl;\nexports._isAndroid = _isAndroid;\nexports._isIOS = _isIOS;\nexports._isIOS7Or8 = _isIOS7Or8;\nexports._overrideRedirectResult = _overrideRedirectResult;\nexports._persistenceKeyName = _persistenceKeyName;\nexports.applyActionCode = applyActionCode;\nexports.beforeAuthStateChanged = beforeAuthStateChanged;\nexports.browserLocalPersistence = browserLocalPersistence;\nexports.browserPopupRedirectResolver = browserPopupRedirectResolver;\nexports.browserSessionPersistence = browserSessionPersistence;\nexports.checkActionCode = checkActionCode;\nexports.confirmPasswordReset = confirmPasswordReset;\nexports.connectAuthEmulator = connectAuthEmulator;\nexports.createUserWithEmailAndPassword = createUserWithEmailAndPassword;\nexports.debugAssert = debugAssert;\nexports.debugErrorMap = debugErrorMap;\nexports.deleteUser = deleteUser;\nexports.fetchSignInMethodsForEmail = fetchSignInMethodsForEmail;\nexports.getAdditionalUserInfo = getAdditionalUserInfo;\nexports.getAuth = getAuth;\nexports.getIdToken = getIdToken;\nexports.getIdTokenResult = getIdTokenResult;\nexports.getMultiFactorResolver = getMultiFactorResolver;\nexports.getRedirectResult = getRedirectResult;\nexports.inMemoryPersistence = inMemoryPersistence;\nexports.indexedDBLocalPersistence = indexedDBLocalPersistence;\nexports.initializeAuth = initializeAuth;\nexports.initializeRecaptchaConfig = initializeRecaptchaConfig;\nexports.isSignInWithEmailLink = isSignInWithEmailLink;\nexports.linkWithCredential = linkWithCredential;\nexports.linkWithPhoneNumber = linkWithPhoneNumber;\nexports.linkWithPopup = linkWithPopup;\nexports.linkWithRedirect = linkWithRedirect;\nexports.multiFactor = multiFactor;\nexports.onAuthStateChanged = onAuthStateChanged;\nexports.onIdTokenChanged = onIdTokenChanged;\nexports.parseActionCodeURL = parseActionCodeURL;\nexports.prodErrorMap = prodErrorMap;\nexports.reauthenticateWithCredential = reauthenticateWithCredential;\nexports.reauthenticateWithPhoneNumber = reauthenticateWithPhoneNumber;\nexports.reauthenticateWithPopup = reauthenticateWithPopup;\nexports.reauthenticateWithRedirect = reauthenticateWithRedirect;\nexports.reload = reload;\nexports.revokeAccessToken = revokeAccessToken;\nexports.sendEmailVerification = sendEmailVerification;\nexports.sendPasswordResetEmail = sendPasswordResetEmail;\nexports.sendSignInLinkToEmail = sendSignInLinkToEmail;\nexports.setPersistence = setPersistence;\nexports.signInAnonymously = signInAnonymously;\nexports.signInWithCredential = signInWithCredential;\nexports.signInWithCustomToken = signInWithCustomToken;\nexports.signInWithEmailAndPassword = signInWithEmailAndPassword;\nexports.signInWithEmailLink = signInWithEmailLink;\nexports.signInWithPhoneNumber = signInWithPhoneNumber;\nexports.signInWithPopup = signInWithPopup;\nexports.signInWithRedirect = signInWithRedirect;\nexports.signOut = signOut;\nexports.unlink = unlink;\nexports.updateCurrentUser = updateCurrentUser;\nexports.updateEmail = updateEmail;\nexports.updatePassword = updatePassword;\nexports.updatePhoneNumber = updatePhoneNumber;\nexports.updateProfile = updateProfile;\nexports.useDeviceLanguage = useDeviceLanguage;\nexports.validatePassword = validatePassword;\nexports.verifyBeforeUpdateEmail = verifyBeforeUpdateEmail;\nexports.verifyPasswordResetCode = verifyPasswordResetCode;\n//# sourceMappingURL=index-ae17685c.js.map\n"],"names":["util","app","logger","tslib","component","_prodErrorMap","debugErrorMap","prodErrorMap","_DEFAULT_AUTH_ERROR_FACTORY","ErrorFactory","logClient","Logger","_logError","msg","args","logLevel","LogLevel","ERROR","error","SDK_VERSION","_fail","authOrCode","rest","createErrorInternal","_createError","_errorWithCustomMessage","auth","code","message","errorMap","Object","assign","create","appName","name","_assertInstanceOf","object","instance","constructor","fullParams","slice","_errorFactory","_assert","assertion","debugFail","failure","Error","debugAssert","_getCurrentUrl","_a","self","location","href","_isHttpOrHttps","_getCurrentScheme","protocol","Delay","shortDelay","longDelay","this","isMobile","isMobileCordova","isReactNative","get","navigator","onLine","isBrowserExtension","Math","min","_emulatorUrl","config","path","emulator","url","startsWith","FetchProvider","initialize","fetchImpl","headersImpl","responseImpl","fetch","globalThis","headers","Headers","response","Response","SERVER_ERROR_MAP","DEFAULT_API_TIMEOUT_MS","_addTidIfNecessary","request","tenantId","async","_performApiRequest","method","customErrorMap","_performFetchWithErrorHandling","body","params","JSON","stringify","query","querystring","key","apiKey","_getAdditionalHeaders","languageCode","_getFinalTarget","apiHost","referrerPolicy","fetchFn","_canInitEmulator","networkTimeout","NetworkTimeout","Promise","race","promise","clearNetworkTimeout","json","_makeTaggedError","ok","errorMessage","serverErrorCode","serverErrorMessage","split","authError","toLowerCase","replace","e","FirebaseError","String","_performSignInRequest","serverResponse","_serverResponse","host","base","apiScheme","_parseEnforcementState","enforcementStateStr","timer","_","reject","setTimeout","clearTimeout","errorParams","email","phoneNumber","customData","_tokenResponse","isV2","grecaptcha","undefined","getResponse","isEnterprise","enterprise","RecaptchaConfig","siteKey","recaptchaEnforcementState","recaptchaKey","getProviderEnforcementState","providerStr","length","provider","enforcementState","isProviderEnabled","getRecaptchaConfig","utcTimestampToDateString","utcTimestamp","date","Date","Number","isNaN","getTime","toUTCString","getIdTokenResult","user","forceRefresh","userInternal","getModularInstance","token","getIdToken","claims","_parseToken","exp","auth_time","iat","firebase","signInProvider","authTime","secondsStringToMilliseconds","issuedAtTime","expirationTime","signInSecondFactor","seconds","algorithm","payload","signature","decoded","base64Decode","parse","toString","_logoutIfInvalidated","bypassAuthState","isUserInvalidated","currentUser","signOut","ProactiveRefresh","isRunning","timerId","errorBackoff","_start","schedule","_stop","getInterval","wasError","interval","stsTokenManager","now","max","iteration","UserMetadata","createdAt","lastLoginAt","_initializeTime","lastSignInTime","creationTime","_copy","metadata","toJSON","_reloadWithoutSaving","idToken","getAccountInfo","users","coreAccount","_notifyReloadListener","newProviderData","providerUserInfo","map","providerId","__rest","uid","rawId","displayName","photoURL","photoUrl","providerData","original","newData","filter","o","some","n","oldIsAnonymous","isAnonymous","newIsAnonymous","passwordHash","updates","localId","emailVerified","reload","_persistUserIfCurrent","_notifyListenersIfCurrent","StsTokenManager","refreshToken","accessToken","isExpired","updateFromServerResponse","expiresIn","parsedToken","_tokenExpiresIn","updateTokensAndExpiration","getToken","refresh","clearRefreshToken","oldToken","tokenApiHost","access_token","expires_in","refresh_token","requestStsToken","expiresInSec","fromJSON","manager","_assign","_clone","_performRefresh","assertStringOrUndefined","UserImpl","opt","proactiveRefresh","reloadUserInfo","reloadListener","userInfo","newUser","_onReload","callback","_startProactiveRefresh","_stopProactiveRefresh","_updateTokensIfNecessary","tokensRefreshed","deleteAccount","_redirectEventId","_fromJSON","_b","_c","_d","_e","_f","_g","_h","plainObjectTokenManager","Array","isArray","_fromIdTokenResponse","idTokenResponse","instanceCache","Map","_getInstance","cls","Function","set","InMemoryPersistence","type","storage","_isAvailable","_set","value","_get","_remove","_addListener","_key","_listener","_removeListener","inMemoryPersistence","_persistenceKeyName","PersistenceUserManager","persistence","userKey","fullUserKey","fullPersistenceKey","boundEventHandler","_onStorageEvent","bind","setCurrentUser","getCurrentUser","blob","removeCurrentUser","savePersistenceForRedirect","setPersistence","newPersistence","persistenceHierarchy","availablePersistences","all","selectedPersistence","userToMigrate","migrationHierarchy","p","_shouldAllowMigration","_getBrowserName","userAgent","ua","includes","_isIEMobile","_isFirefox","_isBlackBerry","_isWebOS","_isSafari","_isChromeIOS","_isAndroid","re","matches","match","getUA","test","_isIOS","_isMobileBrowser","_getClientVersion","clientPlatform","frameworks","reportedPlatform","reportedFrameworks","join","AuthMiddlewareQueue","queue","pushCallback","onAbort","wrappedCallback","resolve","push","index","runMiddleware","nextUser","onAbortStack","beforeStateCallback","reverse","originalMessage","PasswordPolicyImpl","responseOptions","customStrengthOptions","minPasswordLength","maxPasswordLength","containsLowercaseCharacter","containsLowercaseLetter","containsUppercaseCharacter","containsUppercaseLetter","containsNumericCharacter","containsNonAlphanumericCharacter","allowedNonAlphanumericCharacters","forceUpgradeOnSignin","schemaVersion","validatePassword","password","status","isValid","passwordPolicy","validatePasswordLengthOptions","validatePasswordCharacterOptions","meetsMinPasswordLength","meetsMaxPasswordLength","passwordChar","updatePasswordCharacterOptionsStatuses","i","charAt","AuthImpl","heartbeatServiceProvider","appCheckServiceProvider","emulatorConfig","operations","authStateSubscription","Subscription","idTokenSubscription","beforeStateQueue","redirectUser","isProactiveRefreshEnabled","EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION","_isInitialized","_deleted","_initializationPromise","_popupRedirectResolver","_agentRecaptchaConfig","_tenantRecaptchaConfigs","_projectPasswordPolicy","_tenantPasswordPolicies","lastNotifiedUid","settings","appVerificationDisabledForTesting","clientVersion","sdkClientVersion","_initializeWithPersistence","popupRedirectResolver","persistenceManager","_shouldInitProactively","_initialize","initializeCurrentUser","assertedPersistence","_currentUser","_updateCurrentUser","previouslyStoredUser","futureCurrentUser","needsTocheckMiddleware","authDomain","getOrInitRedirectPersistenceManager","redirectUserEventId","storedUserEventId","result","tryRedirectSignIn","directlySetCurrentUser","_overrideRedirectResult","reloadAndSetCurrentUserOrClear","redirectResolver","_completeRedirectFn","_setRedirectUser","useDeviceLanguage","navigatorLanguage","languages","language","_getUserLanguage","_delete","updateCurrentUser","userExtern","skipBeforeStateCallbacks","notifyAuthListeners","redirectPersistenceManager","_getRecaptchaConfig","_getPasswordPolicyInternal","_updatePasswordPolicy","_getPasswordPolicy","_getPersistence","_updateErrorMap","onAuthStateChanged","nextOrObserver","completed","registerStateListener","beforeAuthStateChanged","onIdTokenChanged","authStateReady","unsubscribe","revokeAccessToken","tokenType","revokeToken","redirectManager","resolver","_redirectPersistence","_redirectUserForId","id","next","currentUid","subscription","cb","isUnsubscribed","then","addObserver","action","_logFramework","framework","sort","_getFrameworks","options","appId","heartbeatsHeader","getImmediate","optional","getHeartbeatsHeader","appCheckToken","_getAppCheckToken","appCheckTokenResult","WARN","warn","_logWarn","_castAuth","observer","createSubscribe","externalJSProvider","loadJS","recaptchaV2Script","recaptchaEnterpriseScript","gapiScript","_loadJS","_generateCallbackName","prefix","floor","random","RecaptchaEnterpriseVerifier","authExtern","verify","retrieveRecaptchaToken","window","ready","execute","catch","clientType","version","retrieveSiteKey","injectRecaptchaFields","captchaResp","verifier","captchaResponse","newRequest","handleRecaptchaFlow","authInstance","actionName","actionMethod","requestWithRecaptcha","console","log","initializeAuth","app$1","deps","_getProvider","isInitialized","initialOptions","getOptions","deepEqual","connectAuthEmulator","authInternal","disableWarnings","extractProtocol","port","authority","exec","substr","hostAndPort","pop","bracketedIPv6","parsePort","extractHostAndPort","portStr","freeze","attachBanner","el","document","createElement","sty","style","innerText","position","width","backgroundColor","border","color","bottom","left","margin","zIndex","textAlign","classList","add","appendChild","info","readyState","addEventListener","emitEmulatorWarning","protocolEnd","indexOf","AuthCredential","signInMethod","_getIdTokenResponse","_auth","_linkToIdToken","_idToken","_getReauthenticationResolver","resetPassword","linkEmailPassword","signInWithPassword","sendOobCode","sendPasswordResetEmail$1","sendSignInLinkToEmail$1","EmailAuthCredential","_email","_password","_tenantId","super","_fromEmailAndPassword","_fromEmailAndCode","oobCode","obj","returnSecureToken","signInWithEmailLink$1","signInWithEmailLinkForLinking","signInWithIdp","OAuthCredential","arguments","pendingToken","_fromParams","cred","nonce","oauthToken","oauthTokenSecret","secret","buildRequest","autoCreate","requestUri","postBody","VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_","PhoneAuthCredential","_fromVerification","verificationId","verificationCode","_fromTokenResponse","temporaryProof","signInWithPhoneNumber$1","_makeVerificationRequest","linkWithPhoneNumber$1","operation","verifyPhoneNumberForExisting","sessionInfo","ActionCodeURL","actionLink","searchParams","querystringDecode","extractQuerystring","mode","parseMode","continueUrl","parseLink","link","doubleDeepLink","iOSDeepLink","parseDeepLink","EmailAuthProvider","PROVIDER_ID","credential","credentialWithLink","emailLink","actionCodeUrl","EMAIL_PASSWORD_SIGN_IN_METHOD","EMAIL_LINK_SIGN_IN_METHOD","FederatedAuthProvider","defaultLanguageCode","customParameters","setDefaultLanguage","setCustomParameters","customOAuthParameters","getCustomParameters","BaseOAuthProvider","scopes","addScope","scope","getScopes","OAuthProvider","credentialFromJSON","_credential","rawNonce","credentialFromResult","userCredential","oauthCredentialFromTaggedObject","credentialFromError","tokenResponse","oauthIdToken","oauthAccessToken","FacebookAuthProvider","FACEBOOK_SIGN_IN_METHOD","credentialFromTaggedObject","GoogleAuthProvider","GOOGLE_SIGN_IN_METHOD","GithubAuthProvider","GITHUB_SIGN_IN_METHOD","SAMLAuthCredential","_create","SAMLAuthProvider","samlCredentialFromTaggedObject","TwitterAuthProvider","TWITTER_SIGN_IN_METHOD","signUp","UserCredentialImpl","operationType","providerIdForResponse","_forOperation","MultiFactorError","setPrototypeOf","prototype","_fromErrorAndOperation","_processCredentialSavingMfaContextIfNecessary","providerDataAsNames","Set","pid","_link$1","_assertLinkedStatus","expected","has","_reauthenticate","parsed","sub","_signInWithCredential","signInWithCredential","linkWithCredential","reauthenticateWithCredential","MultiFactorInfoImpl","factorId","mfaEnrollmentId","enrollmentTime","enrolledAt","_fromServerResponse","enrollment","PhoneMultiFactorInfoImpl","TotpMultiFactorInfoImpl","phoneInfo","_setActionCodeSettingsOnRequest","actionCodeSettings","dynamicLinkDomain","canHandleCodeInApp","handleCodeInApp","iOS","bundleId","iOSBundleId","android","packageName","androidInstallApp","installApp","androidMinimumVersionCode","minimumVersion","androidPackageName","recachePasswordPolicy","checkActionCode","authModular","requestType","newEmail","mfaInfo","multiFactorInfo","data","previousEmail","updateEmailOrPassword","updateEmailPassword","GenericAdditionalUserInfo","isNewUser","profile","FederatedAdditionalUserInfoWithUsername","username","FacebookAdditionalUserInfo","GithubAdditionalUserInfo","login","GoogleAdditionalUserInfo","TwitterAdditionalUserInfo","screenName","MultiFactorSessionImpl","_fromIdtoken","_fromMfaPendingCredential","mfaPendingCredential","multiFactorSession","pendingCredential","MultiFactorResolverImpl","session","hints","signInResolver","_fromError","mfaResponse","_process","resolveSignIn","assertionExtern","MultiFactorUserImpl","enrolledFactors","_fromUser","getSession","enroll","finalizeMfaResponse","unenroll","infoOrUid","multiFactorUserCache","WeakMap","STORAGE_AVAILABLE_KEY","BrowserPersistenceClass","storageRetriever","setItem","removeItem","getItem","BrowserLocalPersistence","localStorage","event","poll","onStorageEvent","listeners","localCache","pollTimer","safariLocalStorageNotSynced","_iframeCannotSyncWebStorage","top","_isIframe","fallbackToPolling","forAllChangedKeys","keys","newValue","oldValue","_oldValue","notifyListeners","detachListener","stopPolling","storedValue","triggerListeners","isIE","documentMode","listener","from","startPolling","setInterval","StorageEvent","clearInterval","attachListener","removeEventListener","delete","size","browserLocalPersistence","BrowserSessionPersistence","sessionStorage","browserSessionPersistence","Receiver","eventTarget","handlersMap","handleEvent","existingInstance","receivers","find","receiver","isListeningto","newInstance","messageEvent","eventId","eventType","handlers","ports","postMessage","promises","handler","origin","fulfilled","reason","_allSettled","_subscribe","eventHandler","_unsubscribe","_generateEventId","digits","Sender","target","removeMessageHandler","messageChannel","port1","onMessage","close","_send","timeout","MessageChannel","completionTimer","start","ackTimer","port2","finally","_window","_isWorker","DB_NAME","DB_OBJECTSTORE_NAME","DB_DATA_KEYPATH","DBPromise","toPromise","getObjectStore","db","isReadWrite","transaction","objectStore","_openDatabase","indexedDB","open","createObjectStore","keyPath","objectStoreNames","contains","deleteDatabase","_deleteDatabase","_putObject","put","_deleteObject","IndexedDBLocalPersistence","pendingWrites","sender","serviceWorkerReceiverAvailable","activeServiceWorker","_workerInitializationPromise","initializeServiceWorkerMessaging","_openDb","_withRetries","op","numAttempts","initializeReceiver","initializeSender","_origin","keyProcessed","_poll","_data","serviceWorker","active","_getActiveServiceWorker","results","notifyServiceWorker","controller","_withPendingWrite","write","getObject","getAllRequest","getAll","keysInResult","fbase_key","localKey","indexedDBLocalPersistence","_WIDGET_ID_START","MockReCaptcha","counter","_widgets","render","container","parameters","MockWidget","reset","optWidgetId","containerOrId","deleted","responseToken","clickHandler","getElementById","isVisible","checkIfDeleted","len","chars","allowedChars","generateRandomAlphaNumericString","expiredCallback","_JSLOAD_CALLBACK","NETWORK_TIMEOUT_DELAY","ReCaptchaLoaderImpl","hostLanguage","librarySeparatelyLoaded","load","hl","isHostLanguageValid","shouldResolveImmediately","recaptcha","widgetId","onload","clearedOneInstance","MockReCaptchaLoaderImpl","RECAPTCHA_VERIFIER_TYPE","DEFAULT_PARAMS","theme","ConfirmationResultImpl","onConfirmation","confirm","authCredential","_verifyPhoneNumber","recaptchaToken","phoneInfoOptions","startEnrollPhoneMfa","phoneEnrollmentInfo","phoneSessionInfo","multiFactorHint","multiFactorUid","startSignInPhoneMfa","phoneSignInInfo","phoneResponseInfo","sendPhoneVerificationCode","_reset","PhoneAuthProvider","verifyPhoneNumber","phoneOptions","applicationVerifier","_withDefaultResolver","resolverOverride","PHONE_SIGN_IN_METHOD","IdpCredential","_buildIdpRequest","sessionId","returnIdpCredential","_signIn","_reauth","_link","AbstractPopupRedirectOperation","pendingPromise","eventManager","onExecution","registerConsumer","onAuthEvent","urlResponse","getIdpTask","onError","unregisterAndCleanUp","unregisterConsumer","cleanUp","_POLL_WINDOW_CLOSE_TIMEOUT","PopupOperation","authWindow","pollId","currentPopupAction","cancel","executeNotNull","_openPopup","associatedEvent","_originValidation","_isIframeWebStorageSupported","isSupported","pollUserCancellation","closed","PENDING_REDIRECT_KEY","redirectOutcomeMap","RedirectAction","readyOutcome","pendingRedirectKey","resolverPersistence","hasPendingRedirect","_getAndClearPendingRedirectStatus","_setPendingRedirectStatus","_getRedirectResult","resolverExtern","prepareUserForRedirect","AuthEventManager","cachedEventUids","consumers","queuedRedirectEvent","hasHandledPotentialRedirect","lastProcessedEventTime","authEventConsumer","isEventForConsumer","sendToConsumer","saveEventToCache","onEvent","hasEventBeenHandled","handled","forEach","consumer","isNullRedirectEvent","isRedirectEvent","eventIdMatches","clear","eventUid","v","_getProjectConfig","IP_ADDRESS_REGEX","HTTP_REGEX","matchDomain","currentUrl","hostname","URL","ceUrl","escapedDomainPattern","RegExp","NETWORK_TIMEOUT","resetUnloadedGapiModules","beacon","___jsl","H","hint","r","L","CP","loadGapi","loadGapiIframe","gapi","iframes","getContext","ontimeout","Iframe","cbName","cachedGApiLoader","PING_TIMEOUT","IFRAME_PATH","EMULATED_IFRAME_PATH","IFRAME_ATTRIBUTES","height","tabindex","EID_FROM_APIHOST","getIframeUrl","eid","fw","_openIframe","context","_loadGapi","where","messageHandlersFilter","CROSS_ORIGIN_IFRAMES_FILTER","attributes","dontclear","iframe","restyle","setHideOnLeave","networkError","networkErrorTimer","clearTimerAndResolve","ping","BASE_POPUP_OPTIONS","resizable","statusbar","toolbar","AuthPopup","_open","screen","availHeight","availWidth","scrollbars","optionsString","entries","reduce","accum","standalone","_isIOSStandalone","click","createEvent","initMouseEvent","dispatchEvent","openAsNewWindowIOS","newWin","focus","WIDGET_PATH","EMULATOR_WIDGET_PATH","FIREBASE_APP_CHECK_FRAGMENT_ID","encodeURIComponent","_getRedirectUrl","authType","redirectUrl","additionalParams","isEmpty","tid","paramsDict","appCheckTokenFragment","getHandlerBase","WEB_STORAGE_SUPPORT_KEY","browserPopupRedirectResolver","eventManagers","originValidationPromises","_openRedirect","_setWindowLocation","initAndGetManager","register","iframeEvent","authEvent","send","authorizedDomains","domain","_validateOrigin","MultiFactorAssertionImpl","_finalizeEnroll","_finalizeSignIn","PhoneMultiFactorAssertionImpl","_fromCredential","finalizeEnrollPhoneMfa","phoneVerificationInfo","finalizeSignInPhoneMfa","PhoneMultiFactorGenerator","FACTOR_ID","TotpMultiFactorGenerator","assertionForEnrollment","oneTimePassword","TotpMultiFactorAssertionImpl","_fromSecret","assertionForSignIn","enrollmentId","_fromEnrollmentId","generateSecret","mfaSession","totpEnrollmentInfo","TotpSecret","_fromStartTotpMfaEnrollmentResponse","otp","finalizeEnrollTotpMfa","totpVerificationInfo","_makeTotpVerificationInfo","finalizeSignInTotpMfa","secretKey","hashingAlgorithm","codeLength","codeIntervalSeconds","enrollmentCompletionDeadline","totpSessionInfo","sharedSecretKey","verificationCodeLength","periodSec","finalizeEnrollmentTime","generateQrCodeUrl","accountName","issuer","useDefaults","_isEmptyString","input","AuthInterop","internalListeners","getUid","assertAuthConfigured","addAuthTokenListener","updateProactiveRefresh","removeAuthTokenListener","authIdTokenMaxAge","getExperimentalSetting","lastPostedIdToken","setAttribute","onerror","charset","getElementsByTagName","_registerComponent","Component","getProvider","hierarchy","_initializeAuthInstance","setInstantiationMode","setInstanceCreatedCallback","_instanceIdentifier","_instance","registerVersion","getVersionForPlatform","exports","AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY","ADMIN_ONLY_OPERATION","ARGUMENT_ERROR","APP_NOT_AUTHORIZED","APP_NOT_INSTALLED","CAPTCHA_CHECK_FAILED","CODE_EXPIRED","CORDOVA_NOT_READY","CORS_UNSUPPORTED","CREDENTIAL_ALREADY_IN_USE","CREDENTIAL_MISMATCH","CREDENTIAL_TOO_OLD_LOGIN_AGAIN","DEPENDENT_SDK_INIT_BEFORE_AUTH","DYNAMIC_LINK_NOT_ACTIVATED","EMAIL_CHANGE_NEEDS_VERIFICATION","EMAIL_EXISTS","EMULATOR_CONFIG_FAILED","EXPIRED_OOB_CODE","EXPIRED_POPUP_REQUEST","INTERNAL_ERROR","INVALID_API_KEY","INVALID_APP_CREDENTIAL","INVALID_APP_ID","INVALID_AUTH","INVALID_AUTH_EVENT","INVALID_CERT_HASH","INVALID_CODE","INVALID_CONTINUE_URI","INVALID_CORDOVA_CONFIGURATION","INVALID_CUSTOM_TOKEN","INVALID_DYNAMIC_LINK_DOMAIN","INVALID_EMAIL","INVALID_EMULATOR_SCHEME","INVALID_IDP_RESPONSE","INVALID_LOGIN_CREDENTIALS","INVALID_MESSAGE_PAYLOAD","INVALID_MFA_SESSION","INVALID_OAUTH_CLIENT_ID","INVALID_OAUTH_PROVIDER","INVALID_OOB_CODE","INVALID_ORIGIN","INVALID_PASSWORD","INVALID_PERSISTENCE","INVALID_PHONE_NUMBER","INVALID_PROVIDER_ID","INVALID_RECIPIENT_EMAIL","INVALID_SENDER","INVALID_SESSION_INFO","INVALID_TENANT_ID","MFA_INFO_NOT_FOUND","MFA_REQUIRED","MISSING_ANDROID_PACKAGE_NAME","MISSING_APP_CREDENTIAL","MISSING_AUTH_DOMAIN","MISSING_CODE","MISSING_CONTINUE_URI","MISSING_IFRAME_START","MISSING_IOS_BUNDLE_ID","MISSING_OR_INVALID_NONCE","MISSING_MFA_INFO","MISSING_MFA_SESSION","MISSING_PHONE_NUMBER","MISSING_SESSION_INFO","MODULE_DESTROYED","NEED_CONFIRMATION","NETWORK_REQUEST_FAILED","NULL_USER","NO_AUTH_EVENT","NO_SUCH_PROVIDER","OPERATION_NOT_ALLOWED","OPERATION_NOT_SUPPORTED","POPUP_BLOCKED","POPUP_CLOSED_BY_USER","PROVIDER_ALREADY_LINKED","QUOTA_EXCEEDED","REDIRECT_CANCELLED_BY_USER","REDIRECT_OPERATION_PENDING","REJECTED_CREDENTIAL","SECOND_FACTOR_ALREADY_ENROLLED","SECOND_FACTOR_LIMIT_EXCEEDED","TENANT_ID_MISMATCH","TIMEOUT","TOKEN_EXPIRED","TOO_MANY_ATTEMPTS_TRY_LATER","UNAUTHORIZED_DOMAIN","UNSUPPORTED_FIRST_FACTOR","UNSUPPORTED_PERSISTENCE","UNSUPPORTED_TENANT_OPERATION","UNVERIFIED_EMAIL","USER_CANCELLED","USER_DELETED","USER_DISABLED","USER_MISMATCH","USER_SIGNED_OUT","WEAK_PASSWORD","WEB_STORAGE_UNSUPPORTED","ALREADY_INITIALIZED","RECAPTCHA_NOT_ENABLED","MISSING_RECAPTCHA_TOKEN","INVALID_RECAPTCHA_TOKEN","INVALID_RECAPTCHA_ACTION","MISSING_CLIENT_TYPE","MISSING_RECAPTCHA_VERSION","INVALID_RECAPTCHA_VERSION","INVALID_REQ_TYPE","ActionCodeOperation","EMAIL_SIGNIN","PASSWORD_RESET","RECOVER_EMAIL","REVERT_SECOND_FACTOR_ADDITION","VERIFY_AND_CHANGE_EMAIL","VERIFY_EMAIL","FactorId","PHONE","TOTP","OperationType","LINK","REAUTHENTICATE","SIGN_IN","ProviderId","FACEBOOK","GITHUB","GOOGLE","PASSWORD","TWITTER","RecaptchaVerifier","destroyed","tokenChangeListeners","renderPromise","isInvisible","makeTokenCallback","_recaptchaLoader","validateStartingState","assertNotDestroyed","getAssertedRecaptcha","tokenChange","makeRenderPromise","childNodes","node","removeChild","sitekey","hasChildNodes","existing","globalFunc","init","guaranteedEmpty","domReady","recaptchaSiteKey","getRecaptchaParams","SignInMethod","EMAIL_LINK","EMAIL_PASSWORD","_clearRedirectOutcomes","_isIOS7Or8","applyActionCode","applyActionCode$1","confirmPasswordReset","newPassword","createUserWithEmailAndPassword","signUpResponse","deleteUser","fetchSignInMethodsForEmail","identifier","continueUri","signinMethods","createAuthUri","getAdditionalUserInfo","rawUserInfo","kind","getAuth","getApp","authTokenSyncUrl","mintCookie","idTokenResult","idTokenAge","authEmulatorHost","getDefaultEmulatorHost","getMultiFactorResolver","errorInternal","getRedirectResult","initializeRecaptchaConfig","_initializeRecaptchaConfig","isSignInWithEmailLink","linkWithPhoneNumber","appVerifier","linkWithPopup","resolverInternal","linkWithRedirect","_linkWithRedirect","multiFactor","userModular","parseActionCodeURL","reauthenticateWithPhoneNumber","reauthenticateWithPopup","reauthenticateWithRedirect","_reauthenticateWithRedirect","sendEmailVerification","sendEmailVerification$1","sendPasswordResetEmail","sendSignInLinkToEmail","setActionCodeSettings","signInAnonymously","signInWithCustomToken","customToken","signInWithCustomToken$1","signInWithEmailAndPassword","signInWithEmailLink","signInWithPhoneNumber","signInWithPopup","signInWithRedirect","_signInWithRedirect","unlink","deleteLinkedAccounts","deleteProvider","providersLeft","pd","updateEmail","updatePassword","updatePhoneNumber","updateProfile","profileRequest","updateProfile$1","passwordProvider","verifyBeforeUpdateEmail","verifyAndChangeEmail","verifyPasswordResetCode"],"sourceRoot":""}