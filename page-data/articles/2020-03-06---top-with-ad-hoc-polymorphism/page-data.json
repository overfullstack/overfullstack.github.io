{"componentChunkName":"component---src-pages-articles-2020-03-06-top-with-ad-hoc-polymorphism-index-mdx","path":"/articles/2020-03-06---top-with-ad-hoc-polymorphism/","result":{"pageContext":{"frontmatter":{"title":"Template-Oriented-Programming (TOP) to Ship Faster","date":"2020-03-06T00:00:00.000Z","layout":"post","draft":false,"path":"/posts/top-with-ad-hoc-polymorphism","cover":"./cover.jpeg","category":"Design","tags":["Kotlin","Arrow"],"description":"Top-up with Ad-hoc Polymorphism","largeAbstract":"The trend in the B2C world is to chop the use-cases with varied traffic-needs into _ Microservices/Macroservices_ managed by independent Scrum teams. These teams develop using Heterogeneous frameworks and tech-stacks (blocking/reactive), as per the traffic needs of their services. Despite being heterogenous, these services have many commonalities in their Domain logic, ranging from small features such as Authentication, Logging, to large features such as Request-Validation, Idempotency, External-Integrations. But the code for these features can't be shared/reused due to paradigm contrast. This leads to scrum teams duplicating the same logic in all the services. Or, if a service is migrated to a different paradigm to scale better for increasing traffic, it needs to be entirely rewritten. Letâ€™s see (with a hands-on demo), how to make such common logic reusable/sharable, turning the Monomorphic code into Polymorphic **Templates**, using open-source technologies, which enables scrum teams to share well-tested small & large features across their services."}}},"staticQueryHashes":[],"slicesMap":{}}